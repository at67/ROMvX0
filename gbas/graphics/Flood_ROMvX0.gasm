_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28
register16                        EQU                          register0 + 0x2A

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
_entryPoint_                      EQU                          0x0200
_break0                           EQU                          0x0354
_break1                           EQU                          0x0383
_flood                            EQU                          0x02b2
_while_0x0001                     EQU                          0x02c3
_while_0x0003                     EQU                          0x02dd
_wcond_0x0002                     EQU                          0x02e5
_while_0x0005                     EQU                          0x0309
_wcond_0x0004                     EQU                          0x0311
_next_0x0007                      EQU                          0x0335
_endif_0x0008                     EQU                          0x0350
_endif_0x0006                     EQU                          0x0354
_next_0x000a                      EQU                          0x0364
_endif_0x000b                     EQU                          0x037f
_endif_0x0009                     EQU                          0x0383
_wcond_0x0000                     EQU                          0x0383
_page_0x0300                      EQU                          0x0300

; Constants

; Global Variables
_j                                EQU                          0x0030
_s                                EQU                          0x0032

; Local Variables
_flood_x                          EQU                          0x00c4
_flood_y                          EQU                          0x00c6
_flood_fc                         EQU                          0x00c8
_flood_rc                         EQU                          0x00ca
_flood_i                          EQU                          0x00cc
_flood_j                          EQU                          0x00ce
_flood_idx                        EQU                          0x00d0

; Arrays
_scanx                            EQU                          0x0688
_scanx                            DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scany                            EQU                          0x0610
_scany                            DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 

; Strings

; Constant Strings
_str_0x7ffd                       EQU                          0x7ffd
_str_0x7ffd                       DB                           1 ' ' 0
_str_0x7ff8                       EQU                          0x7ff8
_str_0x7ff8                       DB                           3 '/60' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables

; Lazy Constants

; Code
_entryPoint_                      LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                 
                                  ClearVertBlinds                                           ; mode 2 : cls

                                  MOVQB                        fgbgColour + 1, 37           ; set FG_COLOUR, &h25

                                  MOVQW                        drawRectF_x1, 40
                                  MOVQW                        drawRectF_y1, 20
                                  MOVQW                        drawRectF_x2, 120
                                  MOVQW                        drawRectF_y2, 100
                                  DrawRectF                                                 ; rectf 40, 20, 120, 100

                                  MOVQB                        fgbgColour + 1, 33           ; set FG_COLOUR, &h21

                                  MOVQW                        drawCircleF_cx, 80
                                  MOVQW                        drawCircleF_cy, 60
                                  MOVQW                        drawCircleF_r, 35
                                  DrawCircleF                                               ; circlef 80, 60, 35

                                  MOVQB                        fgbgColour + 1, 0            ; set FG_COLOUR, 0

                                  MOVQW                        drawRect_x1, 40
                                  MOVQW                        drawRect_y1, 20
                                  MOVQW                        drawRect_x2, 120
                                  MOVQW                        drawRect_y2, 100
                                  DrawRect                                                  ; rect 40, 20, 120, 100

                                  MOVQW                        giga_secondsTickLo, 0
                                  MOVQB                        giga_jiffiesTick, 0          ; set TIMER, 0

                                  MOVQW                        0xc4, 0x50
                                  MOVQW                        0xc6, 0x3c
                                  MOVQW                        0xc8, 0x1f
                                  MOVQW                        0xca, 0x21
                                  CALLI                        _flood                       ; call flood, 80, 60, &h1f, &h21

                                  MOVQW                        0xc4, 0x00
                                  MOVQW                        0xc6, 0x00
                                  MOVQW                        0xc8, 0x37
                                  MOVQW                        0xca, 0x20
                                  CALLI                        _flood                       ; call flood, 0, 0, &h37, &h20

                                  MOVQW                        0xc4, 0x29
                                  MOVQW                        0xc6, 0x15
                                  MOVQW                        0xc8, 0x59
                                  MOVQW                        0xca, 0x25
                                  CALLI                        _flood                       ; call flood, 41, 21, &h59, &h25

                                  LD                           giga_jiffiesTick
                                  STW                          _j                           ; j = get("JIFFIES")

                                  MOVWA                        giga_secondsTickLo, _s       ; s = get("TIMER")

                                  MOVQB                        fgbgColour + 1, 255          ; set FG_COLOUR, &hFF

                                  LDW                          _s
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7ffd
                                  LDW                          _j
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7ff8
                                  NewLine                                                   ; print s;" ";j;"/60"

                                  HALT                                                      ; end

_flood                            PUSH                                                      ; proc flood, x, y, fc, rc

                                  MOVQW                        _flood_idx, 1                ; idx = 1

                                  LDWI                         0x0688
                                  POKEA                        _flood_x                     ; scanx(0) = x

                                  LDWI                         0x0610
                                  POKEA                        _flood_y                     ; scany(0) = y

                                  CALLI                        _wcond_0x0000                ; while idx > 0

_while_0x0001                     DECW                         _flood_idx                   ; dec idx

                                  LDARRB                       _flood_idx, 0x0688
                                  ST                           _flood_x                     ; x.lo = scanx(idx)

                                  LDARRB                       _flood_idx, 0x0610
                                  ST                           _flood_y                     ; y.lo = scany(idx)

                                  LDW                          _flood_x
                                  SUBI                         1
                                  STW                          _flood_i
                                  MOVWA                        _flood_y, _flood_j           ; i = x - 1 : j = y

                                  CALLI                        _wcond_0x0002                ; while (point(i, j) = rc) AND (i >= 0)

_while_0x0003                     PACKVW                       _flood_i, _flood_j
                                  STPX                         _flood_fc                    ; pset i, j, fc

                                  DECW                         _flood_i                     ; dec i

_wcond_0x0002                     PACKVW                       _flood_i, _flood_j
                                  LDPX                         
                                  XORW                         _flood_rc
                                  TEQ                          0xe8
                                  LDW                          _flood_i
                                  TGE                          giga_vAC
                                  ANDW                         0xe8
                                  JumpTrue                     _while_0x0003                ; wend

                                  CALLI                        _page_0x0300
_page_0x0300                      MOVWA                        _flood_x, _flood_i
                                  MOVWA                        _flood_y, _flood_j           ; i = x : j = y

                                  CALLI                        _wcond_0x0004                ; while (point(i, j) = rc) AND (i < 160)

_while_0x0005                     PACKVW                       _flood_i, _flood_j
                                  STPX                         _flood_fc                    ; pset i, j, fc

                                  INCW                         _flood_i                     ; inc i

_wcond_0x0004                     PACKVW                       _flood_i, _flood_j
                                  LDPX                         
                                  XORW                         _flood_rc
                                  TEQ                          0xe8
                                  LDW                          _flood_i
                                  SUBI                         160
                                  TLT                          giga_vAC
                                  ANDW                         0xe8
                                  JumpTrue                     _while_0x0005                ; wend

                                  DECW                         _flood_i                     ; dec i

                                  LDW                          _flood_j
                                  SUBI                         1
                                  STW                          _flood_y                     ; y = j - 1

                                  LDW                          _flood_y
                                  JLT                          _endif_0x0006                ; if y >= 0

                                  MOVWA                        _flood_i, _flood_x           ; for x=i &downto 1

_next_0x0007                      PACKVW                       _flood_x, _flood_y
                                  LDPX                         
                                  XORW                         _flood_rc
                                  JNE                          _endif_0x0008                ; if point(x, y) = rc

                                  LDW                          _flood_x
                                  STARRB                       _flood_idx, 0x0688           ; scanx(idx) = x

                                  LDW                          _flood_y
                                  STARRB                       _flood_idx, 0x0610           ; scany(idx) = y

                                  INCW                         _flood_idx                   ; inc idx

                                  CALLI                        _break0                      ; goto break0

_endif_0x0008                     ForNextDJNE                  _flood_x _next_0x0007        ; next x

_break0                           LDW                          _flood_j
                                  ADDI                         1
                                  STW                          _flood_y                     ; y = j + 1

                                  LDW                          _flood_y
                                  SUBI                         120
                                  JGE                          _endif_0x0009                ; if y < 120

                                  MOVWA                        _flood_i, _flood_x           ; for x=i &downto 1

_next_0x000a                      PACKVW                       _flood_x, _flood_y
                                  LDPX                         
                                  XORW                         _flood_rc
                                  JNE                          _endif_0x000b                ; if point(x, y) = rc

                                  LDW                          _flood_x
                                  STARRB                       _flood_idx, 0x0688           ; scanx(idx) = x

                                  LDW                          _flood_y
                                  STARRB                       _flood_idx, 0x0610           ; scany(idx) = y

                                  INCW                         _flood_idx                   ; inc idx

                                  CALLI                        _break1                      ; goto break1

_endif_0x000b                     ForNextDJNE                  _flood_x _next_0x000a        ; next x

_break1                           LDW                          _flood_idx
                                  TGT                          giga_vAC
                                  JumpTrue                     _while_0x0001                ; wend

                                  Return                                                    ; endproc

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x7ba0
scanlineMode                      EQU     0x79a2
resetVideoFlags                   EQU     0x77a9
initClearFuncs                    EQU     0x7fa3
clearVertBlinds                   EQU     0x7aa0
clearCursorRow                    EQU     0x78b8
clearCursorRow4x6                 EQU     0x77dc
drawHLine                         EQU     0x79ac
drawVLine                         EQU     0x78db
drawCircleF                       EQU     0x7ea0
drawRect                          EQU     0x79d2
drawRectF                         EQU     0x7cc1
printInit                         EQU     0x77b1
printInit4x6                      EQU     0x7ca0
printText                         EQU     0x76eb
printDigit                        EQU     0x7da0
printInt16                        EQU     0x7aca
printChar                         EQU     0x7bc9
printChar4x6                      EQU     0x7ca9
printClip                         EQU     0x78a2
printClip4x6                      EQU     0x77c6
newLineScroll                     EQU     0x7fb1
newLineScroll4x6                  EQU     0x7dbf



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register7
drawRect_y1         EQU     register10
drawRect_x2         EQU     register11
drawRect_y2         EQU     register16

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET


drawCircleF         LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    MOVB    fgbgColour + 1, giga_sysArg1
                    LDI     0
                    STW     drawCircleF_v
                    STW     drawCircleF_w
                    
drawCF_wloop        LDW     drawCircleF_cx
                    SUBW    drawCircleF_r
                    STW     drawCircleF_x1
                    LDW     drawCircleF_cx
                    ADDW    drawCircleF_r
                    STW     drawCircleF_x2
                    SUBW    drawCircleF_x1
                    STW     drawCircleF_cnt
                    LDW     drawCircleF_cy
                    SUBW    drawCircleF_v
                    STW     giga_sysArg3
                    ADDBI   giga_sysArg3, 8                     
                    MOVB    drawCircleF_x1, giga_sysArg2        
                    MOVB    drawCircleF_cnt, giga_sysArg0       
                    SYS     54                                  
                    LDW     drawCircleF_cy
                    ADDW    drawCircleF_v
                    STW     giga_sysArg3
                    ADDBI   giga_sysArg3, 8                     
                    MOVB    drawCircleF_x1, giga_sysArg2        
                    MOVB    drawCircleF_cnt, giga_sysArg0       
                    SYS     54                                  
                    LDW     drawCircleF_w
                    ADDW    drawCircleF_v
                    ADDW    drawCircleF_v
                    ADDI    1
                    STW     drawCircleF_w
                    INC     drawCircleF_v
                    
drawCF_rloop        LDW     drawCircleF_w
                    BLT     drawCF_wloop
                    LDW     drawCircleF_w
                    SUBW    drawCircleF_r
                    SUBW    drawCircleF_r
                    ADDI    1
                    STW     drawCircleF_w
                    DBNE    drawCircleF_r, drawCF_rloop
                    RET



drawHLine           MOVB    drawHLine_x1, giga_sysArg2          
                    LD      drawHLine_x2
                    SUBW    drawHLine_x1
                    BGE     drawHL_cont
                    MOVB    drawHLine_x2, giga_sysArg2          
                    LD      drawHLine_x1
                    SUBW    drawHLine_x2
                    
drawHL_cont         ADDI    1
                    ST      giga_sysArg0                        
                    MOVB    fgbgColour + 1, giga_sysArg1        
                    MOVB    drawHLine_y1, giga_sysArg3
                    ADDBI   giga_sysArg3, 8                     
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    SYS     54                                  
                    RET



drawVLine           MOVB    drawVLine_y1, giga_sysArg3          
                    LD      drawVLine_y2
                    SUBW    drawVLine_y1
                    BGE     drawVL_cont
                    MOVB    drawVLine_y2, giga_sysArg3          
                    LD      drawVLine_y1
                    SUBW    drawVLine_y2
                    
drawVL_cont         ADDI    1
                    ST      giga_sysArg0                        
                    MOVB    fgbgColour + 1, giga_sysArg1        
                    MOVB    drawVLine_x1, giga_sysArg2
                    ADDBI   giga_sysArg3, 8                     
                    MOVQW   giga_sysFn, SYS_DrawVLine_vX_66     
                    SYS     66                                  
                    RET


drawRect            PUSH
                    MOVWA   drawRect_x1, drawHLine_x1
                    MOVWA   drawRect_y1, drawHLine_y1
                    MOVWA   drawRect_x2, drawHLine_x2
                    CALLI   drawHLine
                    MOVWA   drawRect_y2, drawHLine_y1
                    CALLI   drawHLine

                    MOVWA   drawRect_x1, drawVLine_x1
                    MOVWA   drawRect_y1, drawVLine_y1
                    MOVWA   drawRect_y2, drawVLine_y2
                    CALLI   drawVLine
                    MOVWA   drawRect_x2, drawVLine_x1
                    MOVWA   drawRect_y1, drawVLine_y1
                    MOVWA   drawRect_y2, drawVLine_y2
                    CALLI   drawVLine

                    POP
                    RET


drawRectF           LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    LD      drawRectF_y2
                    SUBW    drawRectF_y1
                    STW     drawRectF_ycnt                      
                    BGE     drawRFY_cont
                    MOVB    drawRectF_y2, drawRectF_y1
                    NEGW    drawRectF_ycnt                      
                    
drawRFY_cont        ADDBI   drawRectF_y1, 8                     
                    INC     drawRectF_ycnt                      
                    LD      drawRectF_x2
                    SUBW    drawRectF_x1
                    BGE     drawRFX_cont                        
                    MOVB    drawRectF_x2, drawRectF_x1          
                    NEGW    giga_vAC                            
                    
drawRFX_cont        ADDI    1                                   
                    ST      drawRectF_xcnt
                    MOVB    fgbgColour + 1, giga_sysArg1        
                    MOVB    drawRectF_y1, giga_sysArg3          
                    
drawRF_loop         MOVB    drawRectF_xcnt, giga_sysArg0        
                    MOVB    drawRectF_x1, giga_sysArg2          
                    SYS     54                                  
                    INC     giga_sysArg3
                    DBNE    drawRectF_ycnt, drawRF_loop
                    RET





textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printInit4x6                        
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET


printInit4x6        MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET



                    
printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             

printT_char         PEEKV+  textStr             
                    BEQ     printT_exit                         
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    MOVQB   digitIndex, 0x30
printD_exit         POP
                    RET


                    
printInt16          PUSH
                    STW     textNum
                    CALLI   printInit
                    MOVQB   digitIndex, 0
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    NEGW    textNum
    
printI16_pos        LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDI     100
                    CALLI   printDigit
                    LDI     10
                    CALLI   printDigit
                    ORBK    textNum, 0x30
                    CALLI   printChar
                    POP
                    RET




                    
printChar           STW     textChr
                    CMPII   32, 132                             
                    BNE     printC_exit
                    ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printChar4x6                        
                    FNT6X8  textFont, textChr
                    FLT6X8  textFont
                    MOVQB   textSlice, 0x05

printC_slice        LDW     textFont                            
                    LUP     0x00                                
                    ST      giga_sysArg2
                    SYS     134                                 
                    INC     textFont                            
                    INC     giga_sysArg4                        
                    DBNE    textSlice, printC_slice
                    
                    MOVQB   giga_sysArg2, 0
                    SYS     134                                 
                    INC     giga_sysArg4                        
                    
                    PUSH
                    CALLI   printClip
                    POP
                    
printC_exit         RET



                    
printChar4x6        FNT4X6  textFont, textChr
                    FLT4X6  textFont
                    MOVQB   giga_sysArg2, 3                     
                    LDW     giga_sysArg4
                    PRN4X6  textFont
                    ADDBI   giga_sysArg4, 4                     
                    PUSH
                    CALLI   printClip4x6
                    POP
                    
printC46_exit       RET


printClip           ADDBI   cursorXY, giga_xfont
                    CMPI    cursorXY, giga_xres - giga_xfont    
                    BLE     printCl_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                        
                    PUSH
                    CALLI   newLineScroll                       
                    POP
                    
printCl_exit        RET



printClip4x6        ADDBI   cursorXY, 4
                    CMPI    cursorXY, giga_xres - 4             
                    BLE     printCl46_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl46_exit                      
                    PUSH
                    CALLI   newLineScroll4x6                    
                    POP
                    
printCl46_exit      RET



                    
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, giga_yfont

clearCR_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll       ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     newLineScroll4x6                    
                    LDI     giga_CursorX                        
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                         
                    RET
                    
newLS_cont0         PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                         
                    ADDBI   cursorXY + 1, giga_yfont
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS_exit
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, giga_yfont            
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS_exit          CALLI   printInit                           
                    POP
                    RET



                    
clearCursorRow4x6   PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, 6

clearCR46_loopy     MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR46_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll4x6    LDI     0                                   
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS46_cont0                       
                    RET
                    
newLS46_cont0       PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS46_cont1                       
                    ADDBI   cursorXY + 1, 6
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS46_exit
                    MOVQB   cursorXY + 1, giga_yres - 6
                    
newLS46_cont1       CALLI   clearCursorRow4x6
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, 6                     
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS46_exit        CALLI   printInit4x6                        
                    POP
                    RET

