_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_next_0x0000                      EQU                          0x0232

; Constants

; Global Variables
_i                                EQU                          0x0030
_xy                               EQU                          0x0032
_jiffies                          EQU                          0x0034
_seconds                          EQU                          0x0036

; Local Variables

; Arrays

; Strings

; Constant Strings
_str_0x7dfd                       EQU                          0x7dfd
_str_0x7dfd                       DB                           1 ' ' 0
_str_0x7df8                       EQU                          0x7df8
_str_0x7df8                       DB                           3 '/60' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  ClearVertBlinds              
                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                                              ; cls : mode 2

                                  MOVQW                        giga_secondsTickLo, 0
                                  MOVQB                        giga_jiffiesTick, 0          ; set TIMER, 0

                                  LDWI                         10000
                                  STW                          _i                           ; for i=10000 downto 1

_next_0x0000                      LDI                          0xa0
                                  RandFastMod                  
                                  ST                           _xy
                                  LDI                          0x78
                                  RandFastMod                  
                                  ST                           _xy + 1                      ; xy.lo = rnd(160) : xy.hi = rnd(120)

                                  MOVWA                        _xy, drawPixel_xy
                                  Rand                         
                                  ANDI                         0x3f
                                  ST                           fgbgColour + 1
                                  LDW                          drawPixel_xy
                                  STPX                         fgbgColour+1                 ; pset xy.lo, xy.hi, rnd(0) AND &h3F

                                  ForNextDJNE                  _i _next_0x0000              ; next i

                                  LD                           giga_jiffiesTick
                                  STW                          _jiffies                     ; jiffies = get("JIFFIES")

                                  MOVWA                        giga_secondsTickLo, _seconds ; seconds = get("TIMER")

                                  LDWI                         16128
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h3F00

                                  MOVQB                        cursorXY, 60
                                  MOVQB                        cursorXY + 1, 56
                                  AtTextCursor                 
                                  LDW                          _seconds
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7dfd
                                  LDW                          _jiffies
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7df8
                                  NewLine                                                   ; at 60, 56 : print seconds;" ";jiffies;"/60"

                                  HALT                                                      ; end

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x7ba0
randFastMod16bit                  EQU     0x79a0
fastMod168bit                     EQU     0x76f4
scanlineMode                      EQU     0x77a0
resetVideoFlags                   EQU     0x78a0
initClearFuncs                    EQU     0x7da3
clearVertBlinds                   EQU     0x7aa0
clearCursorRow                    EQU     0x79dc
clearCursorRow4x6                 EQU     0x79b9
printInit                         EQU     0x77be
printInit4x6                      EQU     0x76eb
printText                         EQU     0x77aa
printDigit                        EQU     0x7ca0
printInt16                        EQU     0x7aca
printChar                         EQU     0x7bc9
printChar4x6                      EQU     0x78a8
printClip                         EQU     0x77e9
printClip4x6                      EQU     0x77d3
newLineScroll                     EQU     0x7db1
newLineScroll4x6                  EQU     0x7cbf
atTextCursor                      EQU     0x78dc
atTextCursor4x6                   EQU     0x78c0



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET




mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


randFastMod16bit    PUSH
                    LDWI    SYS_Random_34
                    STW     giga_sysFn
                    SYS     34
                    STW     giga_sysArg0                        
                    LD      giga_sysArg1
                    SUBW    giga_sysArg2                        
                    BLT     randfm16_mod
                    MOVB    giga_sysArg3, giga_sysArg1          
randfm16_mod        CALLI   fastMod168bit
                    POP
                    RET


fastMod168bit       MOVQB   giga_sysArg4, 8
                    MOVQW   giga_sysFn, SYS_Divide_u168_vX_56
                    SYS     56
                    LD      giga_sysArg1
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET





textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printInit4x6                        
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET


printInit4x6        MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET



                    
printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             

printT_char         PEEKV+  textStr             
                    BEQ     printT_exit                         
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    MOVQB   digitIndex, 0x30
printD_exit         POP
                    RET


                    
printInt16          PUSH
                    STW     textNum
                    CALLI   printInit
                    MOVQB   digitIndex, 0
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    NEGW    textNum
    
printI16_pos        LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDI     100
                    CALLI   printDigit
                    LDI     10
                    CALLI   printDigit
                    ORBK    textNum, 0x30
                    CALLI   printChar
                    POP
                    RET




                    
printChar           STW     textChr
                    CMPII   32, 132                             
                    BNE     printC_exit
                    ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printChar4x6                        
                    FNT6X8  textFont, textChr
                    FLT6X8  textFont
                    MOVQB   textSlice, 0x05

printC_slice        LDW     textFont                            
                    LUP     0x00                                
                    ST      giga_sysArg2
                    SYS     134                                 
                    INC     textFont                            
                    INC     giga_sysArg4                        
                    DBNE    textSlice, printC_slice
                    
                    MOVQB   giga_sysArg2, 0
                    SYS     134                                 
                    INC     giga_sysArg4                        
                    
                    PUSH
                    CALLI   printClip
                    POP
                    
printC_exit         RET



                    
printChar4x6        FNT4X6  textFont, textChr
                    FLT4X6  textFont
                    MOVQB   giga_sysArg2, 3                     
                    LDW     giga_sysArg4
                    PRN4X6  textFont
                    ADDBI   giga_sysArg4, 4                     
                    PUSH
                    CALLI   printClip4x6
                    POP
                    
printC46_exit       RET


printClip           ADDBI   cursorXY, giga_xfont
                    CMPI    cursorXY, giga_xres - giga_xfont    
                    BLE     printCl_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                        
                    PUSH
                    CALLI   newLineScroll                       
                    POP
                    
printCl_exit        RET



printClip4x6        ADDBI   cursorXY, 4
                    CMPI    cursorXY, giga_xres - 4             
                    BLE     printCl46_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl46_exit                      
                    PUSH
                    CALLI   newLineScroll4x6                    
                    POP
                    
printCl46_exit      RET



                    
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, giga_yfont

clearCR_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll       ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     newLineScroll4x6                    
                    LDI     giga_CursorX                        
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                         
                    RET
                    
newLS_cont0         PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                         
                    ADDBI   cursorXY + 1, giga_yfont
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS_exit
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, giga_yfont            
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS_exit          CALLI   printInit                           
                    POP
                    RET



                    
clearCursorRow4x6   PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, 6

clearCR46_loopy     MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR46_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll4x6    LDI     0                                   
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS46_cont0                       
                    RET
                    
newLS46_cont0       PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS46_cont1                       
                    ADDBI   cursorXY + 1, 6
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS46_exit
                    MOVQB   cursorXY + 1, giga_yres - 6
                    
newLS46_cont1       CALLI   clearCursorRow4x6
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, 6                     
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS46_exit        CALLI   printInit4x6                        
                    POP
                    RET



atTextCursor        ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     atTextCursor4x6                     
                    CMPI    cursorXY, giga_xres - giga_xfont
                    BLE     atTC_checkY
                    MOVQB   cursorXY, 0
                    
atTC_checkY         CMPI    cursorXY + 1, giga_yres - giga_yfont
                    BLT     atTC_resbot
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC_resbot         ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET


atTextCursor4x6     CMPI    cursorXY, giga_xres - 4
                    BLE     atTC46_checkY
                    MOVQB   cursorXY, 0
                    
atTC46_checkY       CMPI    cursorXY + 1, giga_yres - 6
                    BLT     atTC46_resbot
                    MOVQB   cursorXY + 1, giga_yres - 6
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    RET
                    
atTC46_resbot       ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET

