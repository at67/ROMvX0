_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_reset                            EQU                          0x0224
_start                            EQU                          0x0227
_init                             EQU                          0x022a
_mod5                             EQU                          0x02e8
_drawGhosts                       EQU                          0x0405
_drawNextGhost                    EQU                          0x0471
_drawEyesGhost                    EQU                          0x05d6
_movePucMon                       EQU                          0x0838
_moveNextGhost                    EQU                          0x0cf3
_getGhostVars                     EQU                          0x0db9
_setGhostVars                     EQU                          0x0ddc
_setGhostsMode                    EQU                          0x0eb4
_getBlinkyTarget                  EQU                          0x0fa8
_getPinkyTarget                   EQU                          0x0fc4
_getInkyTarget                    EQU                          0x0fec
_getClydeTarget                   EQU                          0x10c2
_getJuncDir                       EQU                          0x10ed
_getWallDir                       EQU                          0x13a8
_replaceDot                       EQU                          0x14ce
_coordsPucMon                     EQU                          0x14fc
_handleInput                      EQU                          0x15bd
_253                              EQU                          0x15d9
_254                              EQU                          0x15e9
_247                              EQU                          0x15f9
_251                              EQU                          0x16ac
_nextLevel                        EQU                          0x1fb7
_startLevel                       EQU                          0x20c6
_resetLevel                       EQU                          0x21ca
_initSystem                       EQU                          0x21e4
_repeat_0x0000                    EQU                          0x022d
_else_0x0001                      EQU                          0x023f
_endif_0x0002                     EQU                          0x0245
_endif_0x0004                     EQU                          0x0252
_endif_0x0003                     EQU                          0x0252
_endif_0x0006                     EQU                          0x026f
_endif_0x0005                     EQU                          0x0272
_div5                             EQU                          0x029d
_elseif_0x0007                    EQU                          0x0315
_elseif_0x0008                    EQU                          0x0322
_endif_0x0009                     EQU                          0x032c
_elseif_0x000a                    EQU                          0x034e
_elseif_0x000b                    EQU                          0x035b
_endif_0x000c                     EQU                          0x0365
_drawPucMon                       EQU                          0x0367
_endif_0x000d                     EQU                          0x037f
_elseif_0x000e                    EQU                          0x03aa
_elseif_0x000f                    EQU                          0x03c6
_else_0x0010                      EQU                          0x03e1
_endif_0x0011                     EQU                          0x03f3
_next_0x0012                      EQU                          0x0409
_endif_0x0013                     EQU                          0x0428
_elseif_0x0014                    EQU                          0x0435
_else_0x0016                      EQU                          0x0455
_else_0x0018                      EQU                          0x0468
_endif_0x0019                     EQU                          0x046b
_endif_0x0017                     EQU                          0x046b
_else_0x0015                      EQU                          0x046e
_endif_0x001a                     EQU                          0x0471
_drawNormalGhost                  EQU                          0x047b
_else_0x001c                      EQU                          0x04bc
_endif_0x001d                     EQU                          0x04ce
_if_0x001e                        EQU                          0x04e5
_else_0x001b                      EQU                          0x04e8
_else_0x0020                      EQU                          0x050e
_endif_0x0021                     EQU                          0x0520
_if_0x0022                        EQU                          0x0537
_endif_0x001f                     EQU                          0x0537
_drawScaredGhost                  EQU                          0x0539
_else_0x0024                      EQU                          0x0571
_endif_0x0025                     EQU                          0x0580
_if_0x0026                        EQU                          0x0594
_else_0x0023                      EQU                          0x0597
_else_0x0028                      EQU                          0x05b1
_endif_0x0029                     EQU                          0x05c0
_if_0x002a                        EQU                          0x05d4
_endif_0x0027                     EQU                          0x05d4
_elseif_0x002b                    EQU                          0x05f2
_elseif_0x002c                    EQU                          0x0612
_else_0x002d                      EQU                          0x062d
_endif_0x002e                     EQU                          0x063f
_drawPills                        EQU                          0x0641
_if_0x0030                        EQU                          0x0671
_if_0x0031                        EQU                          0x0806
_if_0x0032                        EQU                          0x081e
_if_0x0033                        EQU                          0x0836
_endif_0x002f                     EQU                          0x0836
_elseif_0x0034                    EQU                          0x088e
_elseif_0x0035                    EQU                          0x08c2
_elseif_0x0036                    EQU                          0x08e4
_endif_0x0037                     EQU                          0x08f0
_endif_0x0038                     EQU                          0x08fb
_moveGhosts                       EQU                          0x0900
_next_0x0039                      EQU                          0x0904
_endif_0x003c                     EQU                          0x0934
_endif_0x003b                     EQU                          0x0934
_endif_0x003a                     EQU                          0x0934
_else_0x0040                      EQU                          0x099d
_endif_0x0041                     EQU                          0x09a0
_endif_0x003f                     EQU                          0x09a0
_endif_0x003e                     EQU                          0x09a0
_endif_0x003d                     EQU                          0x09a0
_endif_0x0044                     EQU                          0x09b8
_endif_0x0043                     EQU                          0x09b8
_endif_0x0042                     EQU                          0x09b8
_if_0x0045                        EQU                          0x09ca
_if_0x0046                        EQU                          0x09d3
_if_0x0047                        EQU                          0x0ac5
_endif_0x004a                     EQU                          0x0aed
_endif_0x0049                     EQU                          0x0aed
_endif_0x0048                     EQU                          0x0aed
_endif_0x004c                     EQU                          0x0bb3
_endif_0x004b                     EQU                          0x0bb3
_endif_0x004d                     EQU                          0x0bc0
_elseif_0x004e                    EQU                          0x0be1
_elseif_0x004f                    EQU                          0x0bf0
_else_0x0050                      EQU                          0x0ca7
_endif_0x0052                     EQU                          0x0cb8
_endif_0x0053                     EQU                          0x0cf3
_endif_0x0051                     EQU                          0x0cf3
_endif_0x0054                     EQU                          0x0da0
_else_0x0055                      EQU                          0x0db4
_endif_0x0056                     EQU                          0x0db7
_getGhostDir                      EQU                          0x0df7
_if_0x0057                        EQU                          0x0ebe
_endif_0x0059                     EQU                          0x0ee3
_endif_0x0058                     EQU                          0x0ee5
_endif_0x005a                     EQU                          0x0ef3
_endif_0x005b                     EQU                          0x0fa6
_endif_0x005c                     EQU                          0x0fbc
_endif_0x005d                     EQU                          0x0fe4
_endif_0x005e                     EQU                          0x10ba
_endif_0x0060                     EQU                          0x10e5
_endif_0x005f                     EQU                          0x10e5
_if_0x0064                        EQU                          0x11c1
_endif_0x0063                     EQU                          0x11c1
_if_0x0066                        EQU                          0x11e2
_endif_0x0065                     EQU                          0x11e2
_endif_0x0062                     EQU                          0x11e2
_else_0x0061                      EQU                          0x11e5
_if_0x006a                        EQU                          0x12b5
_endif_0x0069                     EQU                          0x12b5
_if_0x006c                        EQU                          0x12d9
_endif_0x006b                     EQU                          0x12d9
_endif_0x0068                     EQU                          0x12d9
_endif_0x0067                     EQU                          0x12d9
_elseif_0x006d                    EQU                          0x12e5
_elseif_0x006e                    EQU                          0x12f2
_else_0x006f                      EQU                          0x13a3
_endif_0x0070                     EQU                          0x13a6
_if_0x0073                        EQU                          0x13cf
_endif_0x0072                     EQU                          0x13cf
_if_0x0074                        EQU                          0x13e7
_else_0x0071                      EQU                          0x13ea
_if_0x0077                        EQU                          0x14b1
_endif_0x0076                     EQU                          0x14b1
_if_0x0078                        EQU                          0x14cc
_endif_0x0075                     EQU                          0x14cc
_endif_0x0079                     EQU                          0x14fa
_if_0x007a                        EQU                          0x15e7
_if_0x007b                        EQU                          0x15f7
_if_0x007c                        EQU                          0x16aa
_if_0x007d                        EQU                          0x16ba
_drawScore                        EQU                          0x16bc
_next_0x007e                      EQU                          0x16d2
_endif_0x007f                     EQU                          0x17ba
_drawHigh                         EQU                          0x17bc
_next_0x0080                      EQU                          0x17c3
_drawLevel                        EQU                          0x17e3
_next_0x0081                      EQU                          0x17f6
_drawLives                        EQU                          0x18b9
_while_0x0083                     EQU                          0x18c3
_wcond_0x0082                     EQU                          0x18d4
_while_0x0085                     EQU                          0x18e0
_wcond_0x0084                     EQU                          0x18f1
_eatSound                         EQU                          0x18fc
_endif_0x0086                     EQU                          0x19c9
_scaredSound                      EQU                          0x19cb
_if_0x0087                        EQU                          0x19f0
_chaseSound                       EQU                          0x19f5
_deadSound                        EQU                          0x1ad5
_repeat_0x0088                    EQU                          0x1ae0
_next_0x0089                      EQU                          0x1ae3
_next_0x008a                      EQU                          0x1ba3
_drawDeath                        EQU                          0x1bd4
_next_0x008b                      EQU                          0x1be3
_next_0x008c                      EQU                          0x1cb6
_else_0x008d                      EQU                          0x1cdb
_endif_0x008e                     EQU                          0x1cea
_endif_0x008f                     EQU                          0x1cf4
_drawMaze                         EQU                          0x1da7
_next_0x0090                      EQU                          0x1dae
_drawDots                         EQU                          0x1de7
_next_0x0091                      EQU                          0x1dee
_next_0x0092                      EQU                          0x1df1
_elseif_0x0094                    EQU                          0x1ebd
_endif_0x0095                     EQU                          0x1ece
_endif_0x0093                     EQU                          0x1edf
_endif_0x0096                     EQU                          0x1fa5
_if_0x0097                        EQU                          0x1fc3
_initVars                         EQU                          0x1fca
_next_0x0098                      EQU                          0x1fec
_else_0x0099                      EQU                          0x1ff9
_endif_0x009a                     EQU                          0x20a7
_if_0x009b                        EQU                          0x20f6
_else_0x009c                      EQU                          0x21c2
_endif_0x009d                     EQU                          0x21c8
_page_0x0300                      EQU                          0x0300
_page_0x0400                      EQU                          0x0400
_page_0x0500                      EQU                          0x0500
_page_0x0600                      EQU                          0x0600
_page_0x0800                      EQU                          0x0800
_page_0x0aa0                      EQU                          0x0aa0
_page_0x0ba0                      EQU                          0x0ba0
_page_0x0ca0                      EQU                          0x0ca0
_page_0x0ea0                      EQU                          0x0ea0
_page_0x0fa0                      EQU                          0x0fa0
_page_0x10a0                      EQU                          0x10a0
_page_0x11a0                      EQU                          0x11a0
_page_0x12a0                      EQU                          0x12a0
_page_0x13a0                      EQU                          0x13a0
_page_0x14a0                      EQU                          0x14a0
_page_0x15a0                      EQU                          0x15a0
_page_0x16a0                      EQU                          0x16a0
_page_0x17a0                      EQU                          0x17a0
_page_0x18a0                      EQU                          0x18a0
_page_0x19a0                      EQU                          0x19a0
_page_0x1aa0                      EQU                          0x1aa0
_page_0x1ba0                      EQU                          0x1ba0
_page_0x1ca0                      EQU                          0x1ca0
_page_0x1da0                      EQU                          0x1da0
_page_0x1ea0                      EQU                          0x1ea0
_page_0x1fa0                      EQU                          0x1fa0
_page_0x20a0                      EQU                          0x20a0
_page_0x21a0                      EQU                          0x21a0
_page_0x22a0                      EQU                          0x22a0

; Constants
_BLIT_OVERLAP                     EQU                          0x0003
_BlinkyUp                         EQU                          0x0000
_BlinkyDn                         EQU                          0x0001
_BlinkyLt                         EQU                          0x0002
_BlinkyRt                         EQU                          0x0003
_PinkyUp                          EQU                          0x0004
_PinkyDn                          EQU                          0x0005
_PinkyLt                          EQU                          0x0006
_PinkyRt                          EQU                          0x0007
_InkyUp                           EQU                          0x0008
_InkyDn                           EQU                          0x0009
_InkyLt                           EQU                          0x000a
_InkyRt                           EQU                          0x000b
_ClydeUp                          EQU                          0x000c
_ClydeDn                          EQU                          0x000d
_ClydeLt                          EQU                          0x000e
_ClydeRt                          EQU                          0x000f
_PucUp                            EQU                          0x0010
_PucDn                            EQU                          0x0014
_PucLt                            EQU                          0x0018
_PucRt                            EQU                          0x001c
_ScaredUp                         EQU                          0x0020
_ScaredDn                         EQU                          0x0021
_ScaredLt                         EQU                          0x0022
_ScaredRt                         EQU                          0x0023
_EyesUp                           EQU                          0x0024
_EyesDn                           EQU                          0x0025
_EyesLt                           EQU                          0x0026
_EyesRt                           EQU                          0x0027
_Tunnel                           EQU                          0x0028
_Pill                             EQU                          0x0029
_Erase6x6                         EQU                          0x002a
_Erase12x9                        EQU                          0x002b
_Life                             EQU                          0x002c
_Level                            EQU                          0x002d
_Digit                            EQU                          0x002e
_Blinky_1                         EQU                          0x0038
_Pinky_1                          EQU                          0x0039
_Inky_1                           EQU                          0x003a
_Clyde_1                          EQU                          0x003b
_Scared_1                         EQU                          0x003c
_MUSIC_INTRO                      EQU                          0x31a0
_ORIGIN_X                         EQU                          0x0002
_ORIGIN_Y                         EQU                          0x0002
_SCORE_X                          EQU                          0x0070
_SCORE_Y                          EQU                          0x0041
_LEVEL_X                          EQU                          0x0089
_LEVEL_Y                          EQU                          0x0035
_HIGH_X                           EQU                          0x0070
_HIGH_Y                           EQU                          0x0028
_LIFE_X                           EQU                          0x0089
_LIFE_Y                           EQU                          0x006d
_PILL_LT                          EQU                          0x6cae
_PILL_RT                          EQU                          0x6cc7
_PILL_LB                          EQU                          0x5cae
_PILL_RB                          EQU                          0x5cc7
_WALL                             EQU                          0x00f0
_DOOR                             EQU                          0x00e0
_JUNC                             EQU                          0x00d0
_EXIT                             EQU                          0x00c0
_ENTER                            EQU                          0x00b0
_TUNNEL                           EQU                          0x00a0
_SLOW                             EQU                          0x0090
_RPILL                            EQU                          0x0004
_RDOT                             EQU                          0x0003
_PILL                             EQU                          0x0002
_DOT                              EQU                          0x0001
_NUM_MAZE_PIECES                  EQU                          0x0024
_MAX_LIVES                        EQU                          0x0003
_NUM_GHOSTS                       EQU                          0x0004
_CHASE_MODE                       EQU                          0x0000
_SCARED_MODE                      EQU                          0x0001
_SCATTER_MODE                     EQU                          0x0002
_SCORE_LEN                        EQU                          0x0007
_LEVEL_LEN                        EQU                          0x0005

; Global Variables
_livesDots                        EQU                          0x0030
_levelPain                        EQU                          0x0032
_timeTicks                        EQU                          0x0034
_flags                            EQU                          0x0036
_gmode                            EQU                          0x0038
_gx                               EQU                          0x003a
_gy                               EQU                          0x003c
_gxd                              EQU                          0x003e
_gyd                              EQU                          0x0040
_gdir                             EQU                          0x0042
_mz                               EQU                          0x0044
_pyd                              EQU                          0x0046
_oxd                              EQU                          0x0048
_oyd                              EQU                          0x004a
_puci                             EQU                          0x004c
_pucj                             EQU                          0x004e
_ti                               EQU                          0x0050
_tj                               EQU                          0x0052
_bi                               EQU                          0x0054
_bj                               EQU                          0x0056
_zi                               EQU                          0x0058
_zj                               EQU                          0x005a
_px                               EQU                          0x005c
_py                               EQU                          0x005e
_pxd                              EQU                          0x0060
_bonus                            EQU                          0x0062
_eatTicks                         EQU                          0x0064
_scaredTicks                      EQU                          0x0066
_ci                               EQU                          0x0068
_cj                               EQU                          0x006a
_mx                               EQU                          0x006c
_my                               EQU                          0x006e
_gidx                             EQU                          0x0070
_slowed                           EQU                          0x0072
_di                               EQU                          0x0074
_dj                               EQU                          0x0076
_gi                               EQU                          0x0078
_gj                               EQU                          0x007a

; Local Variables
_div5_i                           EQU                          0x00c4
_div5_j                           EQU                          0x00c6
_drawPucMon_xf                    EQU                          0x00c4
_drawPucMon_yf                    EQU                          0x00c6
_drawNormalGhost_i                EQU                          0x00c4
_drawNormalGhost_xf               EQU                          0x00c6
_drawNormalGhost_yf               EQU                          0x00c8
_drawNormalGhost_yskirt           EQU                          0x00ca
_drawScaredGhost_xf               EQU                          0x00c4
_drawScaredGhost_yf               EQU                          0x00c6
_drawScaredGhost_yskirt           EQU                          0x00c8
_drawPills_i                      EQU                          0x00c4
_getGhostDir_dir                  EQU                          0x00c4
_drawScore_i                      EQU                          0x00c4
_drawScore_char                   EQU                          0x00c6
_drawHigh_i                       EQU                          0x00c4
_drawHigh_char                    EQU                          0x00c6
_drawLevel_i                      EQU                          0x00c4
_drawLevel_char                   EQU                          0x00c6
_drawLives_i                      EQU                          0x00c4
_drawLives_puc                    EQU                          0x00c6
_eatSound_n                       EQU                          0x00c4
_chaseSound_n                     EQU                          0x00c4
_chaseSound_v                     EQU                          0x00c6
_chaseSound_f                     EQU                          0x00c8
_deadSound_i                      EQU                          0x00c4
_deadSound_v                      EQU                          0x00c6
_deadSound_f                      EQU                          0x00c8
_drawDeath_i                      EQU                          0x00c4
_drawDeath_j                      EQU                          0x00c6
_drawDeath_n                      EQU                          0x00c8
_drawDeath_f                      EQU                          0x00ca
_drawMaze_i                       EQU                          0x00c4
_drawDots_redraw                  EQU                          0x00c4
_initVars_i                       EQU                          0x00c4
_initVars_corner                  EQU                          0x00c6

; Arrays
_maze                             EQU                          0x57b4
_maze                             DW                           0x6ea6 0x6dad 0x6cad 0x6bad 0x6aad 0x69ad 0x68ad 0x67ad 0x66ad 0x65ad 0x64ad 0x63ad 0x62ad 0x61ad 0x60ad 0x5fad 0x5ead 0x5dad 0x5cad 0x5bad 0x5aad 0x59ad 0x58ad 0x57e4 
_maze_0x6ea6                      EQU                          0x6ea6
_maze_0x6ea6                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x6dad                      EQU                          0x6dad
_maze_0x6dad                      DB                           0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x6cad                      EQU                          0x6cad
_maze_0x6cad                      DB                           0xf0 0x02 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x02 0xf0 
_maze_0x6bad                      EQU                          0x6bad
_maze_0x6bad                      DB                           0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x6aad                      EQU                          0x6aad
_maze_0x6aad                      DB                           0xf0 0xd1 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0xd1 0xf0 
_maze_0x69ad                      EQU                          0x69ad
_maze_0x69ad                      DB                           0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x68ad                      EQU                          0x68ad
_maze_0x68ad                      DB                           0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x67ad                      EQU                          0x67ad
_maze_0x67ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x66ad                      EQU                          0x66ad
_maze_0x66ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0x00 0x00 0xd0 0xb0 0x00 0xd0 0x00 0x00 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x65ad                      EQU                          0x65ad
_maze_0x65ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xe0 0xe0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x64ad                      EQU                          0x64ad
_maze_0x64ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0xc0 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x63ad                      EQU                          0x63ad
_maze_0x63ad                      DB                           0xa0 0x90 0x90 0x90 0x90 0x00 0xd1 0x00 0x00 0xd0 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0xd0 0x00 0x00 0xd1 0x00 0x90 0x90 0x90 0x90 0xa0 
_maze_0x62ad                      EQU                          0x62ad
_maze_0x62ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0x00 0x00 0x00 0x00 0x00 0x00 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x61ad                      EQU                          0x61ad
_maze_0x61ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x60ad                      EQU                          0x60ad
_maze_0x60ad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xd0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xd0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5fad                      EQU                          0x5fad
_maze_0x5fad                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x00 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x00 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_maze_0x5ead                      EQU                          0x5ead
_maze_0x5ead                      DB                           0xf0 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x5dad                      EQU                          0x5dad
_maze_0x5dad                      DB                           0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x5cad                      EQU                          0x5cad
_maze_0x5cad                      DB                           0xf0 0x02 0x01 0x01 0xf0 0xf0 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0x00 0x00 0xd1 0x01 0x01 0xd1 0x01 0x01 0xd1 0xf0 0xf0 0x01 0x01 0x02 0xf0 
_maze_0x5bad                      EQU                          0x5bad
_maze_0x5bad                      DB                           0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 
_maze_0x5aad                      EQU                          0x5aad
_maze_0x5aad                      DB                           0xf0 0x01 0x01 0xd1 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0x01 0xf0 0xf0 0x01 0x01 0x01 0xd1 0x01 0x01 0xf0 
_maze_0x59ad                      EQU                          0x59ad
_maze_0x59ad                      DB                           0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 0xf0 0x01 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0x01 0xf0 
_maze_0x58ad                      EQU                          0x58ad
_maze_0x58ad                      DB                           0xf0 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xd1 0x01 0x01 0xd1 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0xf0 
_maze_0x57e4                      EQU                          0x57e4
_maze_0x57e4                      DB                           0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 0xf0 
_MAZE_BORDER                      EQU                          0x57a6
_MAZE_BORDER                      DW                           0x0000 0x0073 0x00ff 0x00ff 0x00ff 0x00ff 0x00ff 
_MAZE_OUTER_T                     EQU                          0x56e2
_MAZE_OUTER_T                     DW                           0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x0000 0xffdd 0x0041 0x0000 0x0000 0x000f 0x0002 0x0000 0x00ff 
_MAZE_OUTER_B                     EQU                          0x56c0
_MAZE_OUTER_B                     DW                           0xffbc 0x0000 0x0000 0xffec 0x0009 0x0000 0xfff7 0x0000 0x0000 0xffec 0x0019 0x0000 0x0000 0xfff1 0xffe7 0x0000 0x00ff 
_MAZE_TJUNC_0                     EQU                          0x56aa
_MAZE_TJUNC_0                     DW                           0x0019 0x0000 0x0000 0xfff6 0x0005 0x0000 0x0000 0x000a 0x000f 0x0000 0x00ff 
_MAZE_TJUNC_1                     EQU                          0x55f2
_MAZE_TJUNC_1                     DW                           0xfffe 0x0000 0x0000 0xfff6 0xfff1 0x0000 0x00ff 
_MAZE_CAGE                        EQU                          0x55e4
_MAZE_CAGE                        DW                           0xfff6 0x0000 0x0000 0x0014 0x0011 0x0000 0x00ff 
_MAZE_VERT_0                      EQU                          0x55d2
_MAZE_VERT_0                      DW                           0x0000 0x000f 0xfffb 0x0000 0x0000 0xfff1 0x0005 0x0000 0x00ff 
_MAZE_VERT_1                      EQU                          0x55c0
_MAZE_VERT_1                      DW                           0x0005 0x0000 0x0000 0x0019 0xfffb 0x0000 0x0000 0xffe7 0x00ff 
_MAZE_CORNER                      EQU                          0x55ae
_MAZE_CORNER                      DW                           0x000a 0x0000 0x0000 0x000a 0x0005 0x0000 0x0000 0xfff6 0x00ff 
_MAZE_HORIZ_0                     EQU                          0x54ee
_MAZE_HORIZ_0                     DW                           0x000f 0x0000 0x0000 0x0005 0xfff1 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_HORIZ_1                     EQU                          0x54dc
_MAZE_HORIZ_1                     DW                           0x0014 0x0000 0x0000 0x0005 0xffec 0x0000 0x0000 0xfffb 0x00ff 
_MAZE_LINE_0                      EQU                          0x6fa0
_MAZE_LINE_0                      DW                           0x000f 0x0000 0x00ff 
_MAZE_LINE_1                      EQU                          0x6ea0
_MAZE_LINE_1                      DW                           0x0014 0x0000 0x00ff 
_MAZE_PIECES                      EQU                          0x53b8
_MAZE_PIECES                      DW                           0x0200 0x0201 0x0202 0x029d 0x029e 0x029f 0x3402 0x3489 0x7546 0x7545 0x6b0c 0x6b7f 0x6b45 0x6b46 0x5745 0x5746 0x2545 0x2546 0x2f3e 0x2f4d 0x3e2a 0x3e61 0x1b25 0x1b66 0x570c 0x577f 0x0c0c 0x0c7f 0x0c25 0x0c66 0x252a 0x2561 0x5725 0x5766 0x1b0c 0x1b7f 
_MAZE_ADDRS                       EQU                          0x52b8
_MAZE_ADDRS                       DW                           0x57a6 0x57a6 0x57a6 0x57a6 0x57a6 0x57a6 0x56e2 0x56e2 0x56c0 0x56c0 0x56aa 0x56aa 0x55f2 0x55f2 0x55f2 0x55f2 0x55f2 0x55f2 0x55e4 0x55e4 0x55d2 0x55d2 0x55c0 0x55c0 0x55ae 0x55ae 0x54ee 0x54ee 0x54dc 0x54dc 0x6fa0 0x6fa0 0x6ea0 0x6ea0 0x6fa0 0x6fa0 
_GHOST_DIRS                       EQU                          0x54cc
_GHOST_DIRS                       DW                           0x0001 0x0000 0x0000 0x0001 0xffff 0x0000 0x0000 0xffff 
_gframes                          EQU                          0x54bc
_gframes                          DB                           0x03 0x02 0x01 0x00 0x07 0x06 0x05 0x04 0x0b 0x0a 0x09 0x08 0x0f 0x0e 0x0d 0x0c 
_gframes1                         EQU                          0x7da0
_gframes1                         DB                           0x38 0x39 0x3a 0x3b 
_ghostsXr                         EQU                          0x6da2
_ghostsXr                         DW                           0x0042 0x0036 0x0036 0x004e 0x004e 
_ghostsYr                         EQU                          0x6ca2
_ghostsYr                         DW                           0x0026 0x0030 0x003a 0x0030 0x003a 
_ghostsX                          EQU                          0x6ba4
_ghostsX                          DW                           0x0042 0x0036 0x0036 0x004e 
_ghostsY                          EQU                          0x6aa4
_ghostsY                          DW                           0x0026 0x0030 0x003a 0x0030 
_ghostsXd                         EQU                          0x69a4
_ghostsXd                         DW                           0xffff 0xffff 0xffff 0xffff 
_ghostsYd                         EQU                          0x68a4
_ghostsYd                         DW                           0x0000 0x0000 0x0000 0x0000 
_ghostsFlags                      EQU                          0x7ca0
_ghostsFlags                      DB                           0x00 0x00 0x00 0x00 
_highBCD                          EQU                          0x67a6
_highBCD                          DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD                         EQU                          0x66a6
_scoreBCD                         DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD                        EQU                          0x65a6
_pointsBCD                        DB                           0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD                         EQU                          0x67a1
_levelBCD                         DB                           0x00 0x00 0x00 0x00 0x00 
_enotes                           EQU                          0x66a1
_enotes                           DB                           0x3a 0x3d 0x3f 0x3c 0x39 
_gnotes                           EQU                          0x54ac
_gnotes                           DB                           0x45 0x47 0x48 0x4a 0x4c 0x4d 0x4f 0x51 0x53 0x51 0x4f 0x4d 0x4c 0x4a 0x48 0x47 
_dnotes                           EQU                          0x53a8
_dnotes                           DB                           0x4b 0x4a 0x49 0x48 0x47 0x46 0x45 0x44 0x43 0x44 0x45 0x46 0x47 0x48 0x49 0x4a 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x31a0                  EQU                          0x31a0
def_bytes_0x31a0                  DB                           144 71 145 35 4 128 4 144 83 129 5 128 4 144 78 4 
def_bytes_0x31b0                  EQU                          0x31b0
def_bytes_0x31b0                  DB                           128 4 144 75 145 47 5 128 4 144 83 145 35 4 144 78 
def_bytes_0x31c0                  EQU                          0x31c0
def_bytes_0x31c0                  DB                           4 128 129 9 144 75 8 145 47 5 128 4 144 72 145 36 
def_bytes_0x31d0                  EQU                          0x31d0
def_bytes_0x31d0                  DB                           4 128 4 144 84 129 5 128 4 144 79 4 128 4 144 76 
def_bytes_0x31e0                  EQU                          0x31e0
def_bytes_0x31e0                  DB                           145 48 5 128 4 144 84 145 36 4 144 79 4 128 129 9 
def_bytes_0x31f0                  EQU                          0x31f0
def_bytes_0x31f0                  DB                           144 76 8 145 48 5 128 4 144 71 145 35 4 208 160 50 
def_bytes_0x32a0                  EQU                          0x32a0
def_bytes_0x32a0                  DB                           128 4 144 83 129 5 128 4 144 78 4 128 4 144 75 145 
def_bytes_0x32b0                  EQU                          0x32b0
def_bytes_0x32b0                  DB                           47 5 128 4 144 83 145 35 4 144 78 4 128 129 9 144 
def_bytes_0x32c0                  EQU                          0x32c0
def_bytes_0x32c0                  DB                           75 8 145 47 4 128 5 144 75 145 42 4 144 76 4 144 
def_bytes_0x32d0                  EQU                          0x32d0
def_bytes_0x32d0                  DB                           77 129 4 128 5 144 77 145 44 4 144 78 4 144 79 129 
def_bytes_0x32e0                  EQU                          0x32e0
def_bytes_0x32e0                  DB                           4 128 5 144 79 145 46 4 144 80 4 144 81 129 4 128 
def_bytes_0x32f0                  EQU                          0x32f0
def_bytes_0x32f0                  DB                           5 144 83 145 47 8 128 129 208 0 0 
def_bytes_0x0700                  EQU                          0x0700
def_bytes_0x0700                  DB(4)                        32 35 38 41 44 47 49 52 54 56 58 59 61 62 62 63 63 63 62 62 61 59 58 56 54 52 49 47 44 41 38 35 32 29 26 23 20 17 15 12 10 8 6 5 3 2 2 1 1 1 2 2 3 5 6 8 10 12 15 17 20 23 26 29 
def_bytes_0x0701                  EQU                          0x0701
def_bytes_0x0701                  DB(4)                        31 39 46 51 55 58 60 62 63 62 60 58 55 51 46 39 33 27 22 16 11 6 3 1 0 1 3 6 11 16 22 32 39 46 51 55 59 62 63 62 59 54 48 41 32 23 15 8 3 0 3 8 15 26 38 49 58 63 55 46 35 22 11 0 
def_bytes_0x0703                  EQU                          0x0703
def_bytes_0x0703                  DB(4)                        33 45 52 57 60 62 63 62 60 57 52 45 48 50 52 53 52 50 48 45 42 39 35 31 26 21 17 13 11 15 21 28 34 41 47 52 50 47 43 38 31 23 19 16 14 12 11 12 14 16 19 22 25 23 20 15 9 4 1 0 1 5 11 20 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits
def_blits_0x7fc9                  EQU                          0x7fc9
def_blits_0x7fc9                  DB                           0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 56 0 0 0 3 63 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_blits_0x7f92                  EQU                          0x7f92
def_blits_0x7f92                  DB                           3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 56 63 3 0 3 3 63 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_blits_0x7f5b                  EQU                          0x7f5b
def_blits_0x7f5b                  DB                           0 0 0 0 0 0 0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 63 56 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 247 
def_blits_0x7f24                  EQU                          0x7f24
def_blits_0x7f24                  DB                           0 0 0 0 0 0 3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 247 
def_blits_0x7ec9                  EQU                          0x7ec9
def_blits_0x7ec9                  DB                           0 0 3 0 0 0 0 3 3 0 0 0 3 3 3 0 0 0 3 63 63 0 0 0 3 56 63 0 0 0 3 3 3 0 0 0 3 3 3 0 0 0 3 0 3 0 0 0 0 0 0 0 0 0 247 
def_blits_0x7e92                  EQU                          0x7e92
def_blits_0x7e92                  DB                           3 3 3 0 0 0 3 3 3 3 0 0 3 3 3 3 3 0 3 3 63 63 3 0 3 3 56 63 3 0 3 3 3 3 3 0 3 3 3 3 3 0 0 3 0 3 0 0 0 0 0 0 0 0 247 
def_blits_0x7e5b                  EQU                          0x7e5b
def_blits_0x7e5b                  DB                           0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 56 0 0 0 59 63 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_blits_0x7e24                  EQU                          0x7e24
def_blits_0x7e24                  DB                           59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 56 63 59 0 59 59 63 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_blits_0x7dc9                  EQU                          0x7dc9
def_blits_0x7dc9                  DB                           0 0 0 0 0 0 0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 63 56 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 247 
def_blits_0x7cc9                  EQU                          0x7cc9
def_blits_0x7cc9                  DB                           0 0 0 0 0 0 59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 247 
def_blits_0x7bc9                  EQU                          0x7bc9
def_blits_0x7bc9                  DB                           0 0 59 0 0 0 0 59 59 0 0 0 59 59 59 0 0 0 59 63 63 0 0 0 59 56 63 0 0 0 59 59 59 0 0 0 59 59 59 0 0 0 59 0 59 0 0 0 0 0 0 0 0 0 247 
def_blits_0x7ac9                  EQU                          0x7ac9
def_blits_0x7ac9                  DB                           59 59 59 0 0 0 59 59 59 59 0 0 59 59 59 59 59 0 59 59 63 63 59 0 59 59 56 63 59 0 59 59 59 59 59 0 59 59 59 59 59 0 0 59 0 59 0 0 0 0 0 0 0 0 247 
def_blits_0x79c9                  EQU                          0x79c9
def_blits_0x79c9                  DB                           0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 56 0 0 0 61 63 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_blits_0x78c9                  EQU                          0x78c9
def_blits_0x78c9                  DB                           61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 56 63 61 0 61 61 63 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_blits_0x77c9                  EQU                          0x77c9
def_blits_0x77c9                  DB                           0 0 0 0 0 0 0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 63 56 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 247 
def_blits_0x76c9                  EQU                          0x76c9
def_blits_0x76c9                  DB                           0 0 0 0 0 0 61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 247 
def_blits_0x75c9                  EQU                          0x75c9
def_blits_0x75c9                  DB                           0 0 61 0 0 0 0 61 61 0 0 0 61 61 61 0 0 0 61 63 63 0 0 0 61 56 63 0 0 0 61 61 61 0 0 0 61 61 61 0 0 0 61 0 61 0 0 0 0 0 0 0 0 0 247 
def_blits_0x74c9                  EQU                          0x74c9
def_blits_0x74c9                  DB                           61 61 61 0 0 0 61 61 61 61 0 0 61 61 61 61 61 0 61 61 63 63 61 0 61 61 56 63 61 0 61 61 61 61 61 0 61 61 61 61 61 0 0 61 0 61 0 0 0 0 0 0 0 0 247 
def_blits_0x73c9                  EQU                          0x73c9
def_blits_0x73c9                  DB                           0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 56 0 0 0 11 63 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_blits_0x72c9                  EQU                          0x72c9
def_blits_0x72c9                  DB                           11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 56 63 11 0 11 11 63 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_blits_0x71c9                  EQU                          0x71c9
def_blits_0x71c9                  DB                           0 0 0 0 0 0 0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 63 56 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 247 
def_blits_0x70c9                  EQU                          0x70c9
def_blits_0x70c9                  DB                           0 0 0 0 0 0 11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 247 
def_blits_0x6fc9                  EQU                          0x6fc9
def_blits_0x6fc9                  DB                           0 0 11 0 0 0 0 11 11 0 0 0 11 11 11 0 0 0 11 63 63 0 0 0 11 56 63 0 0 0 11 11 11 0 0 0 11 11 11 0 0 0 11 0 11 0 0 0 0 0 0 0 0 0 247 
def_blits_0x6ec9                  EQU                          0x6ec9
def_blits_0x6ec9                  DB                           11 11 11 0 0 0 11 11 11 11 0 0 11 11 11 11 11 0 11 11 63 63 11 0 11 11 56 63 11 0 11 11 11 11 11 0 11 11 11 11 11 0 0 11 0 11 0 0 0 0 0 0 0 0 247 
def_blits_0x6dc9                  EQU                          0x6dc9
def_blits_0x6dc9                  DB                           0 0 0 0 0 0 0 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x6cc9                  EQU                          0x6cc9
def_blits_0x6cc9                  DB                           0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x6bc9                  EQU                          0x6bc9
def_blits_0x6bc9                  DB                           0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x6ac9                  EQU                          0x6ac9
def_blits_0x6ac9                  DB                           0 0 15 0 0 0 0 0 15 15 0 0 15 0 15 15 15 0 15 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x69c9                  EQU                          0x69c9
def_blits_0x69c9                  DB                           0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x68c9                  EQU                          0x68c9
def_blits_0x68c9                  DB                           15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x67c9                  EQU                          0x67c9
def_blits_0x67c9                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 15 15 0 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x66c9                  EQU                          0x66c9
def_blits_0x66c9                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x65c9                  EQU                          0x65c9
def_blits_0x65c9                  DB                           0 0 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x64c9                  EQU                          0x64c9
def_blits_0x64c9                  DB                           15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 0 15 15 15 15 0 0 0 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x63c9                  EQU                          0x63c9
def_blits_0x63c9                  DB                           0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x62c9                  EQU                          0x62c9
def_blits_0x62c9                  DB                           15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 0 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x61c9                  EQU                          0x61c9
def_blits_0x61c9                  DB                           0 0 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x60c9                  EQU                          0x60c9
def_blits_0x60c9                  DB                           15 15 15 0 0 0 15 15 15 15 0 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x5fc9                  EQU                          0x5fc9
def_blits_0x5fc9                  DB                           0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x5ec9                  EQU                          0x5ec9
def_blits_0x5ec9                  DB                           15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 15 0 0 0 15 15 15 0 0 0 15 15 15 0 0 15 15 15 15 0 15 15 15 15 0 0 15 15 15 0 0 0 0 0 0 0 0 0 247 
def_blits_0x5dc9                  EQU                          0x5dc9
def_blits_0x5dc9                  DB                           0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 0 0 0 0 0 0 247 
def_blits_0x5cc9                  EQU                          0x5cc9
def_blits_0x5cc9                  DB                           52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 0 0 0 0 0 0 247 
def_blits_0x5bc9                  EQU                          0x5bc9
def_blits_0x5bc9                  DB                           0 0 0 0 0 0 0 0 52 0 0 0 0 52 52 0 0 0 52 52 52 0 0 0 52 52 43 0 0 0 52 52 52 0 0 0 52 43 52 0 0 0 52 52 43 0 0 0 52 0 52 0 0 0 247 
def_blits_0x5ac9                  EQU                          0x5ac9
def_blits_0x5ac9                  DB                           0 0 0 0 0 0 52 52 52 0 0 0 52 52 52 52 0 0 52 52 52 52 52 0 52 52 43 52 52 0 52 52 52 52 52 0 43 52 43 52 52 0 52 43 52 43 52 0 0 52 0 52 0 0 247 
def_blits_0x7f11                  EQU                          0x7f11
def_blits_0x7f11                  DB                           0 0 0 0 0 0 63 63 0 63 63 0 63 56 0 56 63 0 253 
def_blits_0x7e11                  EQU                          0x7e11
def_blits_0x7e11                  DB                           63 63 0 63 63 0 56 63 0 56 63 0 0 0 0 0 0 0 253 
def_blits_0x59c9                  EQU                          0x59c9
def_blits_0x59c9                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_blits_0x58c9                  EQU                          0x58c9
def_blits_0x58c9                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 247 
def_blits_0x7da4                  EQU                          0x7da4
def_blits_0x7da4                  DB                           0 0 0 0 0 0 0 43 43 43 0 0 43 43 43 43 43 0 43 43 43 43 43 0 43 43 43 43 43 0 0 43 43 43 0 0 250 
def_blits_0x7ca4                  EQU                          0x7ca4
def_blits_0x7ca4                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 250 
def_blits_0x7ba4                  EQU                          0x7ba4
def_blits_0x7ba4                  DB                           0 0 0 0 0 0 0 15 15 15 0 0 0 0 15 15 15 0 0 0 0 15 15 0 0 0 15 15 15 0 0 15 15 15 0 0 250 
def_blits_0x7aa4                  EQU                          0x7aa4
def_blits_0x7aa4                  DB                           63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_blits_0x79a4                  EQU                          0x79a4
def_blits_0x79a4                  DB                           0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_blits_0x78a4                  EQU                          0x78a4
def_blits_0x78a4                  DB                           0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_blits_0x77a4                  EQU                          0x77a4
def_blits_0x77a4                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_blits_0x76a4                  EQU                          0x76a4
def_blits_0x76a4                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x75a4                  EQU                          0x75a4
def_blits_0x75a4                  DB                           0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_blits_0x74a4                  EQU                          0x74a4
def_blits_0x74a4                  DB                           63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x73a4                  EQU                          0x73a4
def_blits_0x73a4                  DB                           0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x72a4                  EQU                          0x72a4
def_blits_0x72a4                  DB                           63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_blits_0x71a4                  EQU                          0x71a4
def_blits_0x71a4                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x70a4                  EQU                          0x70a4
def_blits_0x70a4                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x7f0a                  EQU                          0x7f0a
def_blits_0x7f0a                  DB                           0 3 0 0 0 0 255 
def_blits_0x7f03                  EQU                          0x7f03
def_blits_0x7f03                  DB                           3 0 3 0 3 0 255 
def_blits_0x7e0a                  EQU                          0x7e0a
def_blits_0x7e0a                  DB                           0 59 0 0 0 0 255 
def_blits_0x7e03                  EQU                          0x7e03
def_blits_0x7e03                  DB                           59 0 59 0 59 0 255 
def_blits_0x6fc2                  EQU                          0x6fc2
def_blits_0x6fc2                  DB                           0 61 0 0 0 0 255 
def_blits_0x6fbb                  EQU                          0x6fbb
def_blits_0x6fbb                  DB                           61 0 61 0 61 0 255 
def_blits_0x6fb4                  EQU                          0x6fb4
def_blits_0x6fb4                  DB                           0 11 0 0 0 0 255 
def_blits_0x6fad                  EQU                          0x6fad
def_blits_0x6fad                  DB                           11 0 11 0 11 0 255 
def_blits_0x6fa6                  EQU                          0x6fa6
def_blits_0x6fa6                  DB                           0 52 0 0 0 0 255 
def_blits_0x6ec2                  EQU                          0x6ec2
def_blits_0x6ec2                  DB                           52 0 52 0 52 0 255 

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_lut_numericLabs                  EQU                          0x63a3
_lut_numericLabs                  DW                           253 254 247 251 0x0000
_lut_numericAddrs                 EQU                          0x62a5
_lut_numericAddrs                 DW                           0x15d9 0x15e9 0x15f9 0x16ac 
_lut_onAddrs_0x64a5               EQU                          0x64a5
_lut_onAddrs_0x64a5               DW                           0x0fa8 0x0fc4 0x0fec 0x10c2 
_blitLut_0x61a3                   EQU                          0x61a3
_blitLut_0x61a3                   DW                           0x7fc9 0x0000 0x7f92 0x0003 0x0000
_blitLut_0x60a3                   EQU                          0x60a3
_blitLut_0x60a3                   DW                           0x7f5b 0x0000 0x7f24 0x0003 0x0000
_blitLut_0x5fa3                   EQU                          0x5fa3
_blitLut_0x5fa3                   DW                           0x7ec9 0x0000 0x7e92 0x0003 0x0000
_blitLut_0x5ea3                   EQU                          0x5ea3
_blitLut_0x5ea3                   DW                           0x7ec9 0x0003 0x7e92 0x0000 0x0000
_blitLut_0x5da3                   EQU                          0x5da3
_blitLut_0x5da3                   DW                           0x7e5b 0x0000 0x7e24 0x0003 0x0000
_blitLut_0x5ca3                   EQU                          0x5ca3
_blitLut_0x5ca3                   DW                           0x7dc9 0x0000 0x7cc9 0x0003 0x0000
_blitLut_0x5ba3                   EQU                          0x5ba3
_blitLut_0x5ba3                   DW                           0x7bc9 0x0000 0x7ac9 0x0003 0x0000
_blitLut_0x5aa3                   EQU                          0x5aa3
_blitLut_0x5aa3                   DW                           0x7bc9 0x0003 0x7ac9 0x0000 0x0000
_blitLut_0x59a3                   EQU                          0x59a3
_blitLut_0x59a3                   DW                           0x79c9 0x0000 0x78c9 0x0003 0x0000
_blitLut_0x58a3                   EQU                          0x58a3
_blitLut_0x58a3                   DW                           0x77c9 0x0000 0x76c9 0x0003 0x0000
_blitLut_0x56a0                   EQU                          0x56a0
_blitLut_0x56a0                   DW                           0x75c9 0x0000 0x74c9 0x0003 0x0000
_blitLut_0x55a4                   EQU                          0x55a4
_blitLut_0x55a4                   DW                           0x75c9 0x0003 0x74c9 0x0000 0x0000
_blitLut_0x54a2                   EQU                          0x54a2
_blitLut_0x54a2                   DW                           0x73c9 0x0000 0x72c9 0x0003 0x0000
_blitLut_0x52ae                   EQU                          0x52ae
_blitLut_0x52ae                   DW                           0x71c9 0x0000 0x70c9 0x0003 0x0000
_blitLut_0x52a4                   EQU                          0x52a4
_blitLut_0x52a4                   DW                           0x6fc9 0x0000 0x6ec9 0x0003 0x0000
_blitLut_0x51f6                   EQU                          0x51f6
_blitLut_0x51f6                   DW                           0x6fc9 0x0003 0x6ec9 0x0000 0x0000
_blitLut_0x51ec                   EQU                          0x51ec
_blitLut_0x51ec                   DW                           0x6dc9 0x0000 0x6cc9 0x0003 0x0000
_blitLut_0x51e2                   EQU                          0x51e2
_blitLut_0x51e2                   DW                           0x6bc9 0x0000 0x6ac9 0x0003 0x0000
_blitLut_0x51d8                   EQU                          0x51d8
_blitLut_0x51d8                   DW                           0x69c9 0x0000 0x68c9 0x0003 0x0000
_blitLut_0x51ce                   EQU                          0x51ce
_blitLut_0x51ce                   DW                           0x67c9 0x0000 0x66c9 0x0003 0x0000
_blitLut_0x51c4                   EQU                          0x51c4
_blitLut_0x51c4                   DW                           0x6dc9 0x0800 0x6cc9 0x0803 0x0000
_blitLut_0x51ba                   EQU                          0x51ba
_blitLut_0x51ba                   DW                           0x6bc9 0x0800 0x6ac9 0x0803 0x0000
_blitLut_0x51b0                   EQU                          0x51b0
_blitLut_0x51b0                   DW                           0x69c9 0x0800 0x68c9 0x0803 0x0000
_blitLut_0x51a6                   EQU                          0x51a6
_blitLut_0x51a6                   DW                           0x67c9 0x0800 0x66c9 0x0803 0x0000
_blitLut_0x50f6                   EQU                          0x50f6
_blitLut_0x50f6                   DW                           0x65c9 0x0000 0x64c9 0x0003 0x0000
_blitLut_0x50ec                   EQU                          0x50ec
_blitLut_0x50ec                   DW                           0x63c9 0x0000 0x62c9 0x0003 0x0000
_blitLut_0x50e2                   EQU                          0x50e2
_blitLut_0x50e2                   DW                           0x61c9 0x0000 0x60c9 0x0003 0x0000
_blitLut_0x50d8                   EQU                          0x50d8
_blitLut_0x50d8                   DW                           0x5fc9 0x0000 0x5ec9 0x0003 0x0000
_blitLut_0x50ce                   EQU                          0x50ce
_blitLut_0x50ce                   DW                           0x65c9 0x0003 0x64c9 0x0000 0x0000
_blitLut_0x50c4                   EQU                          0x50c4
_blitLut_0x50c4                   DW                           0x63c9 0x0003 0x62c9 0x0000 0x0000
_blitLut_0x50ba                   EQU                          0x50ba
_blitLut_0x50ba                   DW                           0x61c9 0x0003 0x60c9 0x0000 0x0000
_blitLut_0x50b0                   EQU                          0x50b0
_blitLut_0x50b0                   DW                           0x5fc9 0x0003 0x5ec9 0x0000 0x0000
_blitLut_0x50a6                   EQU                          0x50a6
_blitLut_0x50a6                   DW                           0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_blitLut_0x4ff6                   EQU                          0x4ff6
_blitLut_0x4ff6                   DW                           0x5bc9 0x0000 0x5ac9 0x0003 0x0000
_blitLut_0x4fec                   EQU                          0x4fec
_blitLut_0x4fec                   DW                           0x5dc9 0x0000 0x5cc9 0x0003 0x0000
_blitLut_0x4fe2                   EQU                          0x4fe2
_blitLut_0x4fe2                   DW                           0x5dc9 0x0003 0x5cc9 0x0000 0x0000
_blitLut_0x65a0                   EQU                          0x65a0
_blitLut_0x65a0                   DW                           0x7f11 0x0200 0x0000
_blitLut_0x57a0                   EQU                          0x57a0
_blitLut_0x57a0                   DW                           0x7f11 0x0000 0x0000
_blitLut_0x53a2                   EQU                          0x53a2
_blitLut_0x53a2                   DW                           0x7e11 0x0000 0x0000
_blitLut_0x51a0                   EQU                          0x51a0
_blitLut_0x51a0                   DW                           0x7e11 0x0000 0x0000
_blitLut_0x4fd8                   EQU                          0x4fd8
_blitLut_0x4fd8                   DW                           0x59c9 0x0000 0x58c9 0x0006 0x0000
_blitLut_0x50a0                   EQU                          0x50a0
_blitLut_0x50a0                   DW                           0x7da4 0x0000 0x0000
_blitLut_0x4fd2                   EQU                          0x4fd2
_blitLut_0x4fd2                   DW                           0x7ca4 0x0000 0x0000
_blitLut_0x4fc8                   EQU                          0x4fc8
_blitLut_0x4fc8                   DW                           0x59c9 0x0000 0x58c9 0x0003 0x0000
_blitLut_0x4fc2                   EQU                          0x4fc2
_blitLut_0x4fc2                   DW                           0x7ba4 0x0000 0x0000
_blitLut_0x4fbc                   EQU                          0x4fbc
_blitLut_0x4fbc                   DW                           0x7aa4 0x0000 0x0000
_blitLut_0x4fb6                   EQU                          0x4fb6
_blitLut_0x4fb6                   DW                           0x79a4 0x0000 0x0000
_blitLut_0x4fb0                   EQU                          0x4fb0
_blitLut_0x4fb0                   DW                           0x78a4 0x0000 0x0000
_blitLut_0x4faa                   EQU                          0x4faa
_blitLut_0x4faa                   DW                           0x77a4 0x0000 0x0000
_blitLut_0x4fa4                   EQU                          0x4fa4
_blitLut_0x4fa4                   DW                           0x76a4 0x0000 0x0000
_blitLut_0x4efa                   EQU                          0x4efa
_blitLut_0x4efa                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x4ef4                   EQU                          0x4ef4
_blitLut_0x4ef4                   DW                           0x74a4 0x0000 0x0000
_blitLut_0x4eee                   EQU                          0x4eee
_blitLut_0x4eee                   DW                           0x73a4 0x0000 0x0000
_blitLut_0x4ee8                   EQU                          0x4ee8
_blitLut_0x4ee8                   DW                           0x72a4 0x0000 0x0000
_blitLut_0x4ee2                   EQU                          0x4ee2
_blitLut_0x4ee2                   DW                           0x71a4 0x0000 0x0000
_blitLut_0x4edc                   EQU                          0x4edc
_blitLut_0x4edc                   DW                           0x70a4 0x0000 0x0000
_blitLut_0x4ed2                   EQU                          0x4ed2
_blitLut_0x4ed2                   DW                           0x7f0a 0x0000 0x7f03 0x0003 0x0000
_blitLut_0x4ec8                   EQU                          0x4ec8
_blitLut_0x4ec8                   DW                           0x7e0a 0x0000 0x7e03 0x0003 0x0000
_blitLut_0x4ebe                   EQU                          0x4ebe
_blitLut_0x4ebe                   DW                           0x6fc2 0x0000 0x6fbb 0x0003 0x0000
_blitLut_0x4eb4                   EQU                          0x4eb4
_blitLut_0x4eb4                   DW                           0x6fb4 0x0000 0x6fad 0x0003 0x0000
_blitLut_0x4eaa                   EQU                          0x4eaa
_blitLut_0x4eaa                   DW                           0x6fa6 0x0000 0x6ec2 0x0003 0x0000
_blitsLut_                        EQU                          0x0686
_blitsLut_                        DW                           0x61a3 0x60a3 0x5fa3 0x5ea3 0x5da3 0x5ca3 0x5ba3 0x5aa3 0x59a3 0x58a3 0x56a0 0x55a4 0x54a2 0x52ae 0x52a4 0x51f6 0x51ec 0x51e2 0x51d8 0x51ce 0x51c4 0x51ba 0x51b0 0x51a6 0x50f6 0x50ec 0x50e2 0x50d8 0x50ce 0x50c4 0x50ba 0x50b0 0x50a6 0x4ff6 0x4fec 0x4fe2 0x65a0 0x57a0 0x53a2 0x51a0 0x4fd8 0x50a0 0x4fd2 0x4fc8 0x4fc2 0x4fbc 0x4fb6 0x4fb0 0x4faa 0x4fa4 0x4efa 0x4ef4 0x4eee 0x4ee8 0x4ee2 0x4edc 0x4ed2 0x4ec8 0x4ebe 0x4eb4 0x4eaa 

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  CALLI                        _initSystem                  ; gosub initSystem

                                  CALLI                        _drawMaze                    ; call drawMaze

_reset                            CALLI                        _resetLevel                  ; gosub resetLevel

_start                            CALLI                        _startLevel                  ; gosub startLevel

_init                             CALLI                        _initVars                    ; call initVars

_repeat_0x0000                    WaitVBlank                                                ; wait

                                  CMPI                         _gmode, 1
                                  JNE                          _else_0x0001                 ; if gmode = SCARED_MODE

                                  CALLI                        _drawGhosts                  ; gosub drawGhosts

                                  CALLI                        _drawPucMon                  ; call drawPucMon

                                  CALLI                        _endif_0x0002                ; else

_else_0x0001                      CALLI                        _drawPucMon                  ; call drawPucMon

                                  CALLI                        _drawGhosts                  ; gosub drawGhosts

_endif_0x0002                     LD                           _eatTicks
                                  JNE                          _endif_0x0003                ; if eatTicks.lo = 0

                                  LD                           _livesDots
                                  JNE                          _endif_0x0004                ; if livesDots.lo = 0

                                  CALLI                        _nextLevel                   ; goto nextLevel

_endif_0x0003                     XORBK                        _flags + 1, 1
                                  JNE                          _endif_0x0005                ; if flags.hi = 1

                                  MOVQB                        _flags + 1, 0                ; flags.hi = 0

                                  DEC                          _livesDots + 1               ; livesDots.hi = livesDots.hi - 1

                                  CALLI                        _drawDeath                   ; call drawDeath

                                  MOVQW                        0xc4, 0x00
                                  CALLI                        _drawDots                    ; call drawDots, 0

                                  LD                           _livesDots + 1
                                  JNE                          _endif_0x0006                ; if livesDots.hi = 0

                                  CALLI                        _reset                       ; goto reset

_endif_0x0006                     CALLI                        _init                        ; goto init

_endif_0x0005                     MOVQW                        blitId, 40
                                  MOVQB                        blitXY, 3
                                  MOVQB                        blitXY + 1, 61
                                  DrawBlit                                                  ; blit NoFlip, Tunnel, (1+ORIGIN_X),   (51+ORIGIN_Y)

                                  MOVQW                        blitId, 40
                                  MOVQB                        blitXY, 125
                                  MOVQB                        blitXY + 1, 61
                                  DrawBlit                                                  ; blit NoFlip, Tunnel, (123+ORIGIN_X), (51+ORIGIN_Y)

                                  CALLI                        _drawPills                   ; call drawPills

                                  CALLI                        _setGhostsMode               ; gosub setGhostsMode

                                  CALLI                        _moveGhosts                  ; call moveGhosts

                                  CALLI                        _handleInput                 ; gosub handleInput

                                  CALLI                        _movePucMon                  ; gosub movePucMon

                                  INC                          _timeTicks                   ; inc timeTicks.lo

                                  BRA                          _repeat_0x0000               ; &forever

_div5                             PUSH                                                      ; proc div5

                                  MOVWA                        _ci, mathShift
                                  Lsr6bit                      giga_vAC
                                  STW                          0xea
                                  SUBVW                        0xea, _ci                    ; ci = ci - (ci LSR 6)

                                  LDW                          _ci
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  STW                          _div5_i
                                  LSLW                         
                                  ADDW                         _div5_i
                                  STW                          0xe8
                                  LDW                          _ci
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         0xe8
                                  STW                          _ci                          ; i  = ci LSL 4 : ci = (i LSL 1) + i + (ci LSL 2)

                                  LD                           _ci + 1
                                  STW                          _ci                          ; ci = ci.hi

                                  MOVWA                        _cj, mathShift
                                  Lsr6bit                      giga_vAC
                                  STW                          0xea
                                  SUBVW                        0xea, _cj                    ; cj = cj - (cj LSR 6)

                                  LDW                          _cj
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  STW                          _div5_j
                                  LSLW                         
                                  ADDW                         _div5_j
                                  STW                          0xe8
                                  LDW                          _cj
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         0xe8
                                  STW                          _cj                          ; j  = cj LSL 4 : cj = (j LSL 1) + j + (cj LSL 2)

                                  LD                           _cj + 1
                                  STW                          _cj                          ; cj = cj.hi

                                  Return                                                    ; endproc

_mod5                             PUSH                         
                                  LD                           _mx + 1
                                  ADDBA                        _mx
                                  STW                          _mx
                                  STW                          mathShift
                                  Lsr4bit                      giga_vAC
                                  STW                          0xec
                                  CALLI                        _page_0x0300
_page_0x0300                      ANDBK                        _mx, 0x0f
                                  ADDW                         0xec
                                  STW                          _mx                          ; mx = mx.hi + mx.lo : mx = (mx LSR 4) + (mx AND &h000F)

                                  LDW                          _mx
                                  SUBI                         14
                                  JLE                          _elseif_0x0007               ; if mx > 14

                                  SUBVI                        _mx, 15                      ; mx = mx - 15

                                  CALLI                        _endif_0x0009
_elseif_0x0007                    LDW                          _mx
                                  SUBI                         9
                                  JLE                          _elseif_0x0008               ; elseif mx > 9

                                  SUBVI                        _mx, 10                      ; mx = mx - 10

                                  CALLI                        _endif_0x0009
_elseif_0x0008                    LDW                          _mx
                                  SUBI                         4
                                  JLE                          _endif_0x0009                ; elseif mx > 4

                                  SUBVI                        _mx, 5                       ; mx = mx - 5

_endif_0x0009                     LD                           _my + 1
                                  ADDBA                        _my
                                  STW                          _my
                                  STW                          mathShift
                                  Lsr4bit                      giga_vAC
                                  STW                          0xec
                                  ANDBK                        _my, 0x0f
                                  ADDW                         0xec
                                  STW                          _my                          ; my = my.hi + my.lo : my = (my LSR 4) + (my AND &h000F)

                                  LDW                          _my
                                  SUBI                         14
                                  JLE                          _elseif_0x000a               ; if my > 14

                                  SUBVI                        _my, 15                      ; my = my - 15

                                  CALLI                        _endif_0x000c
_elseif_0x000a                    LDW                          _my
                                  SUBI                         9
                                  JLE                          _elseif_0x000b               ; elseif my > 9

                                  SUBVI                        _my, 10                      ; my = my - 10

                                  CALLI                        _endif_0x000c
_elseif_0x000b                    LDW                          _my
                                  SUBI                         4
                                  JLE                          _endif_0x000c                ; elseif my > 4

                                  SUBVI                        _my, 5                       ; my = my - 5

_endif_0x000c                     Return                                                    ; return

_drawPucMon                       PUSH                                                      ; proc drawPucMon

                                  CMPI                         _mz, 240
                                  JNE                          _endif_0x000d                ; if mz = WALL

                                  MOVQW                        blitId, 26
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PucLt + 2, px, py

                                  Return                                                    ; return

_endif_0x000d                     LDW                          _px
                                  LSRV                         giga_vAC
                                  ANDI                         0x03
                                  STW                          _drawPucMon_xf               ; xf = (px LSR 1) AND 3

                                  LDW                          _py
                                  LSRV                         giga_vAC
                                  ANDI                         0x03
                                  STW                          _drawPucMon_yf               ; yf = (py LSR 1) AND 3

                                  CMPI                         _pxd, 1
                                  JNE                          _elseif_0x000e               ; if pxd = 1

                                  LDI                          28
                                  ADDW                         _drawPucMon_xf
                                  STW                          blitId
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, PucRt + xf, px, py

                                  CALLI                        _endif_0x0011
_elseif_0x000e                    LDNI                         1
                                  XORW                         _pxd
                                  JNE                          _elseif_0x000f               ; elseif pxd = -1

                                  LDI                          24
                                  ADDW                         _drawPucMon_xf
                                  STW                          blitId
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PucLt + xf, px, py

                                  CALLI                        _endif_0x0011
_elseif_0x000f                    CMPI                         _pyd, 1
                                  JNE                          _else_0x0010                 ; elseif pyd = 1

                                  LDI                          20
                                  ADDW                         _drawPucMon_yf
                                  STW                          blitId
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitY                                                 ; blit FlipY, PucDn + yf, px, py

                                  CALLI                        _endif_0x0011                ; else

_else_0x0010                      LDI                          16
                                  ADDW                         _drawPucMon_yf
                                  STW                          blitId
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PucUp + yf, px, py

_endif_0x0011                     ADDVW                        _pxd, _px                    ; px = px + pxd

                                  CALLI                        _page_0x0400
_page_0x0400                      ADDVW                        _pyd, _py                    ; py = py + pyd

                                  Return                                                    ; endproc

_drawGhosts                       PUSH                         
                                  MOVQW                        _gidx, 0                     ; for gidx=0 to NUM_GHOSTS-1

_next_0x0012                      CALLI                        _getGhostVars                ; gosub getGhostVars

                                  LD                           _livesDots
                                  TEQ                          giga_vAC
                                  ORBA                         _flags + 1
                                  JumpFalse                    _endif_0x0013                ; if ((flags.hi) OR (livesDots.lo = 0))

                                  MOVQW                        blitId, 43
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Erase12x9, gx, gy

                                  CALLI                        _drawNextGhost               ; goto drawNextGhost

_endif_0x0013                     ANDBK                        _flags, 0x01
                                  JumpFalse                    _elseif_0x0014               ; if (flags.lo AND 1)

                                  CALLI                        _drawEyesGhost               ; gosub drawEyesGhost

                                  CALLI                        _endif_0x001a
_elseif_0x0014                    CMPI                         _gmode, 1
                                  JNE                          _else_0x0015                 ; elseif gmode = SCARED_MODE

                                  MOVQW                        register14, 8
                                  LD                           _levelPain + 1
                                  STW                          register15
                                  LDW                          register14
                                  SUBW                         register15
                                  STW                          0xe8
                                  LD                           _timeTicks + 1
                                  SUBW                         0xe8
                                  JGE                          _else_0x0016                 ; if timeTicks.hi < (8-levelPain.hi)

                                  CALLI                        _drawScaredGhost             ; call drawScaredGhost

                                  CALLI                        _endif_0x0017                ; else

_else_0x0016                      LD                           _timeTicks
                                  LSRB                         giga_vAC
                                  LSRB                         giga_vAC
                                  LSRB                         giga_vAC
                                  ANDI                         0x01
                                  JumpFalse                    _else_0x0018                 ; if ((timeTicks.lo LSR 3) AND 1)

                                  CALLI                        _drawNormalGhost             ; call drawNormalGhost

                                  CALLI                        _endif_0x0019                ; else

_else_0x0018                      CALLI                        _drawScaredGhost             ; call drawScaredGhost

_endif_0x0017                     CALLI                        _endif_0x001a                ; else

_else_0x0015                      CALLI                        _drawNormalGhost             ; call drawNormalGhost

_drawNextGhost                    ForNextInc                   _gidx _next_0x0012 3         ; next gidx

                                  Return                                                    ; return

_drawNormalGhost                  PUSH                                                      ; proc drawNormalGhost

                                  LDW                          _gidx
                                  LSLW                         
                                  LSLW                         
                                  STW                          _drawNormalGhost_i           ; i = gidx LSL 2

                                  LDW                          _gx
                                  LSRV                         giga_vAC
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  STW                          _drawNormalGhost_xf          ; xf = (gx LSR 2) AND 1

                                  LDW                          _gy
                                  LSRV                         giga_vAC
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  STW                          _drawNormalGhost_yf          ; yf = (gy LSR 2) AND 1

                                  LDW                          _gy
                                  ADDI                         7
                                  STW                          _drawNormalGhost_yskirt      ; yskirt = gy + 7

                                  LDW                          _gxd
                                  JumpFalse                    _else_0x001b                 ; if (gxd)

                                  CMPI                         _gxd, 1
                                  JNE                          _else_0x001c                 ; if gxd = 1

                                  LDARRB                       _drawNormalGhost_i, 21692
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, peek(@gframes + 0 + i), gx, gy

                                  CALLI                        _endif_0x001d                ; else

_else_0x001c                      LDARRB                       _drawNormalGhost_i, 21693
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, peek(@gframes + 1 + i), gx, gy

_endif_0x001d                     LDW                          _drawNormalGhost_xf
                                  JumpFalse                    _if_0x001e
                                  LDARRB                       _gidx, 32160
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  LDW                          _drawNormalGhost_yskirt
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; if (xf) then blit NoFlip, peek(@gframes1 + gidx), gx, yskirt

_if_0x001e                        CALLI                        _endif_0x001f                ; else

_else_0x001b                      CMPI                         _gyd, 1
                                  JNE                          _else_0x0020                 ; if gyd = 1

                                  LDARRB                       _drawNormalGhost_i, 21694
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  CALLI                        _page_0x0500
_page_0x0500                      LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, peek(@gframes + 2 + i), gx, gy

                                  INC                          _drawNormalGhost_yskirt      ; inc yskirt.lo

                                  CALLI                        _endif_0x0021                ; else

_else_0x0020                      LDARRB                       _drawNormalGhost_i, 21695
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, peek(@gframes + 3 + i), gx, gy

_endif_0x0021                     LDW                          _drawNormalGhost_yf
                                  JumpFalse                    _if_0x0022
                                  LDARRB                       _gidx, 32160
                                  STW                          blitId
                                  MOVB                         _gx, blitXY
                                  LDW                          _drawNormalGhost_yskirt
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; if (yf) then blit NoFlip, peek(@gframes1 + gidx), gx, yskirt

_endif_0x001f                     Return                                                    ; endproc

_drawScaredGhost                  PUSH                                                      ; proc drawScaredGhost

                                  LDW                          _gx
                                  LSRV                         giga_vAC
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  STW                          _drawScaredGhost_xf          ; xf = (gx LSR 2) AND 1

                                  LDW                          _gy
                                  LSRV                         giga_vAC
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  STW                          _drawScaredGhost_yf          ; yf = (gy LSR 2) AND 1

                                  LDW                          _gy
                                  ADDI                         7
                                  STW                          _drawScaredGhost_yskirt      ; yskirt = gy + 7

                                  LDW                          _gxd
                                  JumpFalse                    _else_0x0023                 ; if (gxd)

                                  CMPI                         _gxd, 1
                                  JNE                          _else_0x0024                 ; if gxd = 1

                                  MOVQW                        blitId, 35
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX,  ScaredRt, gx, gy

                                  CALLI                        _endif_0x0025                ; else

_else_0x0024                      MOVQW                        blitId, 34
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, ScaredLt, gx, gy

_endif_0x0025                     LDW                          _drawScaredGhost_xf
                                  JumpFalse                    _if_0x0026
                                  MOVQW                        blitId, 60
                                  MOVB                         _gx, blitXY
                                  LDW                          _drawScaredGhost_yskirt
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; if (xf) then blit NoFlip, Scared_1, gx, yskirt

_if_0x0026                        CALLI                        _endif_0x0027                ; else

_else_0x0023                      CMPI                         _gyd, 1
                                  JNE                          _else_0x0028                 ; if gyd = 1

                                  MOVQW                        blitId, 33
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, ScaredDn, gx, gy

                                  INC                          _drawScaredGhost_yskirt      ; inc yskirt.lo

                                  CALLI                        _endif_0x0029                ; else

_else_0x0028                      MOVQW                        blitId, 32
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, ScaredUp, gx, gy

_endif_0x0029                     LDW                          _drawScaredGhost_yf
                                  JumpFalse                    _if_0x002a
                                  MOVQW                        blitId, 60
                                  MOVB                         _gx, blitXY
                                  LDW                          _drawScaredGhost_yskirt
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; if (yf) then blit NoFlip, Scared_1, gx, yskirt

_endif_0x0027                     Return                                                    ; endproc

_drawEyesGhost                    PUSH                         
                                  CMPI                         _gxd, 1
                                  JNE                          _elseif_0x002b               ; if gxd = 1

                                  MOVQW                        blitId, 39
                                  LDW                          _gx
                                  ADDI                         2
                                  ST                           blitXY
                                  LDW                          _gy
                                  ADDI                         11
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX,  EyesRt, gx+2, gy+3

                                  CALLI                        _endif_0x002e
_elseif_0x002b                    LDNI                         1
                                  XORW                         _gxd
                                  JNE                          _elseif_0x002c               ; elseif gxd = -1

                                  MOVQW                        blitId, 38
                                  CALLI                        _page_0x0600
_page_0x0600                      LDW                          _gx
                                  ADDI                         2
                                  ST                           blitXY
                                  LDW                          _gy
                                  ADDI                         11
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, EyesLt, gx+2, gy+3

                                  CALLI                        _endif_0x002e
_elseif_0x002c                    CMPI                         _gyd, 1
                                  JNE                          _else_0x002d                 ; elseif gyd = 1

                                  MOVQW                        blitId, 37
                                  LDW                          _gx
                                  ADDI                         2
                                  ST                           blitXY
                                  LDW                          _gy
                                  ADDI                         11
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, EyesDn, gx+2, gy+3

                                  CALLI                        _endif_0x002e                ; else

_else_0x002d                      MOVQW                        blitId, 36
                                  LDW                          _gx
                                  ADDI                         2
                                  ST                           blitXY
                                  LDW                          _gy
                                  ADDI                         11
                                  ST                           blitXY + 1
                                  DrawBlitY                                                 ; blit FlipY,  EyesUp, gx+2, gy+3

_endif_0x002e                     Return                                                    ; return

_drawPills                        PUSH                                                      ; proc drawPills

                                  ANDBK                        _timeTicks, 0x07
                                  STW                          _drawPills_i                 ; i = timeTicks.lo AND 7

                                  LDW                          _drawPills_i
                                  JNE                          _endif_0x002f                ; if i = 0

                                  LD                           _timeTicks
                                  LSRB                         giga_vAC
                                  LSRB                         giga_vAC
                                  LSRB                         giga_vAC
                                  ANDI                         0x01
                                  STW                          _drawPills_i                 ; i = (timeTicks.lo LSR 3) AND 1

                                  LDWI                         0x6cae
                                  PEEK                         
                                  XORI                         2
                                  JNE                          _if_0x0030
                                  LDI                          41
                                  ADDW                         _drawPills_i
                                  STW                          blitId
                                  MOVQB                        blitXY, 5
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; if peek(PILL_LT) = PILL then blit NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_if_0x0030                        LDWI                         0x6cc7
                                  PEEK                         
                                  XORI                         2
                                  JNE                          _if_0x0031
                                  LDI                          41
                                  ADDW                         _drawPills_i
                                  STW                          blitId
                                  MOVQB                        blitXY, 130
                                  CALLI                        _page_0x0800
_page_0x0800                      MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; if peek(PILL_RT) = PILL then blit NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (2*5)  + (ORIGIN_Y - 3)

_if_0x0031                        LDWI                         0x5cae
                                  PEEK                         
                                  XORI                         2
                                  JNE                          _if_0x0032
                                  LDI                          41
                                  ADDW                         _drawPills_i
                                  STW                          blitId
                                  MOVQB                        blitXY, 5
                                  MOVQB                        blitXY + 1, 97
                                  DrawBlit                                                  ; if peek(PILL_LB) = PILL then blit NoFlip, Pill + i, (1*5)  + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_if_0x0032                        LDWI                         0x5cc7
                                  PEEK                         
                                  XORI                         2
                                  JNE                          _if_0x0033
                                  LDI                          41
                                  ADDW                         _drawPills_i
                                  STW                          blitId
                                  MOVQB                        blitXY, 130
                                  MOVQB                        blitXY + 1, 97
                                  DrawBlit                                                  ; if peek(PILL_RB) = PILL then blit NoFlip, Pill + i, (26*5) + (ORIGIN_X-2), (18*5) + (ORIGIN_Y - 3)

_endif_0x002f                     Return                                                    ; endproc

_movePucMon                       PUSH                         
                                  CALLI                        _coordsPucMon                ; gosub coordsPucMon

                                  LDW                          _ci
                                  SUBW                         _pxd
                                  STW                          _puci                        ; puci = ci - pxd

                                  LDW                          _cj
                                  SUBW                         _pyd
                                  STW                          _pucj                        ; pucj = cj - pyd

                                  MOVQB                        _eatTicks + 1, 0             ; eatTicks.hi = 0

                                  MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  STW                          _mz                          ; mz = maze(cj, ci)

                                  ANDBK                        _mz, 0x0f
                                  XORI                         1
                                  JNE                          _elseif_0x0034               ; if (mz AND &h0F) = DOT

                                  MOVQB                        _eatTicks + 1, 1             ; eatTicks.hi = 1

                                  ANDBK                        _mz, 0xf0
                                  ORI                          0x03
                                  STW                          memValue
                                  MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDARRW                       memIndex0, 0x57b4
                                  ADDW                         memIndex1
                                  POKEA                        memValue                     ; maze(cj, ci) = (mz AND &hF0) OR RDOT

                                  LDWI                         26022
                                  STW                          bcdDstAddr
                                  LDI                          10
                                  BcdInt                                                    ; bcdint @pointsBCD, 10

                                  CALLI                        _drawScore                   ; call drawScore

                                  DEC                          _livesDots                   ; livesDots.lo = livesDots.lo - 1

                                  CALLI                        _endif_0x0037
_elseif_0x0034                    CMPI                         _mz, 2
                                  JNE                          _elseif_0x0035               ; elseif mz = PILL

                                  ANDBK                        _mz, 0xf0
                                  ORI                          0x04
                                  STW                          memValue
                                  MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDARRW                       memIndex0, 0x57b4
                                  ADDW                         memIndex1
                                  POKEA                        memValue                     ; maze(cj, ci) = (mz AND &hF0) OR RPILL

                                  MOVQW                        _gmode, 1                    ; gmode = SCARED_MODE

                                  MOVQW                        _timeTicks, 0                ; timeTicks = 0

                                  LDWI                         26022
                                  STW                          bcdDstAddr
                                  LDI                          50
                                  BcdInt                                                    ; bcdint @pointsBCD, 50

                                  CALLI                        _drawScore                   ; call drawScore

                                  DEC                          _livesDots                   ; livesDots.lo = livesDots.lo - 1

                                  CALLI                        _endif_0x0037
_elseif_0x0035                    LDW                          _mz
                                  SUBI                         224
                                  JLT                          _elseif_0x0036               ; elseif mz >= DOOR

                                  MOVWA                        _oxd, _pxd
                                  MOVWA                        _oyd, _pyd                   ; pxd = oxd : pyd = oyd

                                  CALLI                        _coordsPucMon                ; gosub coordsPucMon

                                  MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  STW                          _mz                          ; mz = maze(cj, ci)

                                  CALLI                        _endif_0x0037
_elseif_0x0036                    CMPI                         _mz, 160
                                  JNE                          _endif_0x0037                ; elseif mz = TUNNEL

                                  LDI                          131
                                  SUBW                         _px
                                  STW                          _px                          ; px = (129+ORIGIN_X) - px

_endif_0x0037                     LD                           _eatTicks + 1
                                  ORBA                         _eatTicks
                                  JumpFalse                    _endif_0x0038                ; if ((eatTicks.hi) OR (eatTicks.lo))

                                  CALLI                        _eatSound                    ; call eatSound

_endif_0x0038                     Return                                                    ; return

                                  CALLI                        _moveGhosts
_moveGhosts                       PUSH                                                      ; proc moveGhosts

                                  MOVQW                        _gidx, 0                     ; for gidx=0 to NUM_GHOSTS-1

_next_0x0039                      CALLI                        _getGhostVars                ; gosub getGhostVars

                                  MOVQW                        _slowed, 0                   ; slowed = 0

                                  LDW                          _gmode
                                  XORI                         1
                                  TEQ                          0xe8
                                  ANDBK                        _flags, 0x02
                                  ORW                          0xe8
                                  JumpFalse                    _endif_0x003a                ; if ((gmode = SCARED_MODE) OR (flags.lo AND 2))

                                  XORBK                        _timeTicks, 0xff
                                  ANDI                         0x01
                                  JumpFalse                    _endif_0x003b                ; if (timeTicks.lo XOR 255 AND 1)

                                  XORBK                        _flags, 0xff
                                  ANDI                         0x01
                                  JumpFalse                    _endif_0x003c                ; if (flags.lo XOR 255 AND 1)

                                  MOVQW                        _slowed, 1                   ; slowed = 1

                                  LDI                          0
                                  STW                          _gxd
                                  STW                          _gyd                         ; gxd = 0 : gyd = gxd

_endif_0x003a                     ADDVW                        _gxd, _gx                    ; gx = gx + gxd

                                  ADDVW                        _gyd, _gy                    ; gy = gy + gyd

                                  XORBK                        _flags, 0xff
                                  ANDI                         0x01
                                  JumpFalse                    _endif_0x003d                ; if flags.lo XOR 255 AND 1

                                  LDW                          _gx
                                  SUBW                         _px
                                  ABSW                         
                                  SUBI                         3
                                  JGT                          _endif_0x003e                ; if abs(gx - px) <= 3

                                  LDW                          _gy
                                  SUBW                         _py
                                  ABSW                         
                                  SUBI                         3
                                  JGT                          _endif_0x003f                ; if abs(gy - py) <= 3

                                  MOVQW                        blitId, 43
                                  MOVB                         _gx, blitXY
                                  LDW                          _gy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Erase12x9, gx, gy

                                  CMPI                         _gmode, 1
                                  JNE                          _else_0x0040                 ; if gmode = SCARED_MODE

                                  MOVQW                        blitId, 26
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PucLt + 2, px, py

                                  CALLI                        _deadSound                   ; call deadSound

                                  ORBI                         _flags, 0x01
                                  LDW                          _flags
                                  STARRB                       _gidx, 0x7ca0                ; flags.lo = flags.lo OR 1 : ghostsFlags(gidx) = flags.lo

                                  LDWI                         26022
                                  STW                          bcdDstAddr
                                  LDW                          _bonus
                                  BcdInt                       
                                  ADDVW                        _bonus, _bonus               ; bcdint @pointsBCD, bonus : bonus = bonus + bonus

                                  CALLI                        _drawScore                   ; call drawScore

                                  CALLI                        _endif_0x0041                ; else

_else_0x0040                      MOVQB                        _flags + 1, 1                ; flags.hi = 1

_endif_0x003d                     CMPI                         _gmode, 1
                                  JNE                          _endif_0x0042                ; if gmode = SCARED_MODE

                                  LD                           _timeTicks + 1
                                  JNE                          _endif_0x0043                ; if timeTicks.hi = 0

                                  XORBK                        _timeTicks, 1
                                  JNE                          _endif_0x0044                ; if timeTicks.lo = 1

                                  NEGW                         _gxd
                                  NEGW                         _gyd                         ; gxd = -gxd : gyd = -gyd

_endif_0x0042                     MOVWA                        _gx, _mx
                                  MOVWA                        _gy, _my
                                  CALLI                        _mod5                        ; mx = gx : my = gy : gosub mod5

                                  CMPI                         _mx, 3
                                  JEQ                          _if_0x0045
                                  CALLI                        _moveNextGhost               ; if mx <> 3 then goto moveNextGhost

_if_0x0045                        CMPI                         _my, 3
                                  JEQ                          _if_0x0046
                                  CALLI                        _moveNextGhost               ; if my <> 3 then goto moveNextGhost

_if_0x0046                        LDW                          _gx
                                  ADDW                         _gxd
                                  ADDW                         _gxd
                                  ADDW                         _gxd
                                  ADDI                         4
                                  STW                          _ci                          ; ci = gx + gxd + gxd + gxd + -(ORIGIN_X-6)

                                  LDW                          _gy
                                  ADDW                         _gyd
                                  ADDW                         _gyd
                                  ADDW                         _gyd
                                  ADDI                         4
                                  STW                          _cj                          ; cj = gy + gyd + gyd + gyd +  (ORIGIN_Y+2)

                                  CALLI                        _div5                        ; call div5

                                  LDW                          _ci
                                  SUBW                         _gxd
                                  SUBW                         _gxd
                                  STW                          _di                          ; di = ci - gxd - gxd

                                  LDW                          _cj
                                  SUBW                         _gyd
                                  SUBW                         _gyd
                                  CALLI                        _page_0x0aa0
_page_0x0aa0                      STW                          _dj                          ; dj = cj - gyd - gyd

                                  LDW                          _ci
                                  SUBW                         _gxd
                                  STW                          _gi                          ; gi = ci - gxd

                                  LDW                          _cj
                                  SUBW                         _gyd
                                  STW                          _gj                          ; gj = cj - gyd

                                  MOVWA                        _dj, memIndex0
                                  MOVWA                        _di, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  STW                          _mz                          ; mz = maze(dj, di)

                                  LDW                          _slowed
                                  JNE                          _if_0x0047
                                  CALLI                        _replaceDot                  ; if slowed = 0 then gosub replaceDot

_if_0x0047                        MOVWA                        _gj, memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         192
                                  JNE                          _endif_0x0048                ; if maze(gj, gi) = EXIT

                                  XORBK                        _flags, 0xff
                                  ANDI                         0x01
                                  JumpFalse                    _endif_0x0049                ; if (flags.lo XOR 255 AND 1)

                                  CMPI                         _gmode, 1
                                  JEQ                          _endif_0x004a                ; if gmode <> SCARED_MODE

                                  MOVQW                        _gxd, 0
                                  LDNI                         1
                                  STW                          _gyd                         ; gxd = 0 : gyd = -1

_endif_0x0048                     LDW                          _gidx
                                  LSLW                         
                                  STW                          register0
                                  LDWI                         _lut_onAddrs_0x64a5
                                  ADDW                         register0
                                  DEEK                         
                                  CALL                         giga_vAC                     ; on gidx gosub getBlinkyTarget, getPinkyTarget, getInkyTarget, getClydeTarget

                                  CMPI                         _gi, 13
                                  CALLI                        _page_0x0ba0
_page_0x0ba0                      JNE                          _endif_0x004b                ; if gi = 13

                                  CMPI                         _gj, 10
                                  JNE                          _endif_0x004c                ; if gj = 10

                                  ANDBI                        _flags, 0xfe
                                  LDW                          _flags
                                  STARRB                       _gidx, 0x7ca0                ; flags.lo = flags.lo AND &hFE : ghostsFlags(gidx) = flags.lo

_endif_0x004b                     ANDBK                        _flags, 0x01
                                  JumpFalse                    _endif_0x004d                ; if (flags.lo AND 1)

                                  MOVQW                        _ti, 12
                                  MOVQW                        _tj, 11                      ; ti = 12 : tj = 11

_endif_0x004d                     MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  STW                          _mz                          ; mz = maze(cj, ci)

                                  CMPI                         _mz, 240
                                  JNE                          _elseif_0x004e               ; if mz = WALL

                                  CALLI                        _getWallDir                  ; gosub getWallDir

                                  MOVWA                        _gdir, 0xc4
                                  CALLI                        _getGhostDir                 ; call getGhostDir, gdir

                                  CALLI                        _endif_0x0051
_elseif_0x004e                    CMPI                         _mz, 160
                                  JNE                          _elseif_0x004f               ; elseif mz = TUNNEL

                                  LDI                          131
                                  SUBW                         _gx
                                  STW                          _gx                          ; gx = (129+ORIGIN_X) - gx

                                  CALLI                        _endif_0x0051
_elseif_0x004f                    CMPI                         _mz, 144
                                  JNE                          _else_0x0050                 ; elseif mz = SLOW

                                  ORBI                         _flags, 0x02
                                  LDW                          _flags
                                  CALLI                        _page_0x0ca0
_page_0x0ca0                      STARRB                       _gidx, 0x7ca0                ; flags.lo = flags.lo OR 2 : ghostsFlags(gidx) = flags.lo

                                  CALLI                        _endif_0x0051                ; else

_else_0x0050                      ANDBK                        _flags, 0x02
                                  JumpFalse                    _endif_0x0052                ; if (flags.lo AND 2)

                                  ANDBI                        _flags, 0xfd
                                  LDW                          _flags
                                  STARRB                       _gidx, 0x7ca0                ; flags.lo = flags.lo AND &hFD : ghostsFlags(gidx) = flags.lo

_endif_0x0052                     MOVWA                        _gj, memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  ANDI                         0xf0
                                  STW                          _mz                          ; mz = maze(gj, gi) AND &hF0

                                  LDW                          _mz
                                  XORI                         208
                                  TEQ                          0xe8
                                  LDW                          _mz
                                  XORI                         224
                                  TEQ                          0xea
                                  LDW                          _mz
                                  XORI                         176
                                  TEQ                          giga_vAC
                                  ORW                          0xea
                                  STW                          0xec
                                  ANDBK                        _flags, 0x01
                                  ANDW                         0xec
                                  ORW                          0xe8
                                  JumpFalse                    _endif_0x0053                ; if ((mz = JUNC) OR (((mz = DOOR) OR (mz = ENTER)) AND (flags.lo AND 1)))

                                  CALLI                        _getJuncDir                  ; gosub getJuncDir

                                  MOVWA                        _gdir, 0xc4
                                  CALLI                        _getGhostDir                 ; call getGhostDir, gdir

_moveNextGhost                    LDW                          _slowed
                                  JNE                          _endif_0x0054                ; if slowed = 0

                                  CALLI                        _setGhostVars                ; gosub setGhostVars

                                  CALLI                        _endif_0x0054
_endif_0x0054                     ForNextInc                   _gidx _next_0x0039 3         ; next gidx

                                  CMPI                         _gmode, 1
                                  JNE                          _else_0x0055                 ; if gmode = SCARED_MODE

                                  CALLI                        _scaredSound                 ; call scaredSound

                                  CALLI                        _endif_0x0056                ; else

_else_0x0055                      CALLI                        _chaseSound                  ; call chaseSound

_endif_0x0056                     Return                                                    ; endproc

_getGhostVars                     PUSH                         
                                  ARRVW                        _gidx, 0x6ba4
                                  PEEK                         
                                  STW                          _gx
                                  ARRVW                        _gidx, 0x6aa4
                                  PEEK                         
                                  STW                          _gy                          ; gx = ghostsX(gidx).lo : gy = ghostsY(gidx).lo

                                  LDARRW                       _gidx, 0x69a4
                                  STW                          _gxd
                                  LDARRW                       _gidx, 0x68a4
                                  STW                          _gyd                         ; gxd = ghostsXd(gidx)  : gyd = ghostsYd(gidx)

                                  LDARRB                       _gidx, 0x7ca0
                                  ST                           _flags                       ; flags.lo = ghostsFlags(gidx)

                                  Return                                                    ; return

_setGhostVars                     PUSH                         
                                  LDW                          _gx
                                  STARRW                       _gidx, 0x6ba4
                                  LDW                          _gy
                                  STARRW                       _gidx, 0x6aa4                ; ghostsX(gidx) = gx : ghostsY(gidx) = gy

                                  LDW                          _gxd
                                  STARRW                       _gidx, 0x69a4
                                  LDW                          _gyd
                                  STARRW                       _gidx, 0x68a4                ; ghostsXd(gidx) = gxd : ghostsYd(gidx) = gyd

                                  Return                                                    ; return

_getGhostDir                      PUSH                                                      ; proc getGhostDir, dir

                                  LDW                          _getGhostDir_dir
                                  LSLW                         
                                  LSLW                         
                                  CALLI                        _page_0x0ea0
_page_0x0ea0                      STW                          _getGhostDir_dir             ; dir = dir LSL 2

                                  LDWI                         21708
                                  ADDW                         _getGhostDir_dir
                                  DEEKA                        _gxd                         ; gxd = deek(@GHOST_DIRS + dir + 0)

                                  LDWI                         21708
                                  ADDW                         _getGhostDir_dir
                                  ADDI                         2
                                  DEEKA                        _gyd                         ; gyd = deek(@GHOST_DIRS + dir + 2)

                                  Return                                                    ; endproc

_setGhostsMode                    PUSH                         
                                  ANDBK                        _timeTicks, 0x1f
                                  JumpFalse                    _if_0x0057
                                  Return                                                    ; if (timeTicks.lo AND &h1F) then return

_if_0x0057                        INC                          _timeTicks + 1               ; inc timeTicks.hi

                                  CMPI                         _gmode, 1
                                  JNE                          _endif_0x0058                ; if gmode = SCARED_MODE

                                  MOVQW                        register14, 10
                                  LD                           _levelPain + 1
                                  STW                          register15
                                  LDW                          register14
                                  SUBW                         register15
                                  STW                          0xe8
                                  LD                           _timeTicks + 1
                                  SUBW                         0xe8
                                  JLE                          _endif_0x0059                ; if timeTicks.hi > (10 - levelPain.hi)

                                  MOVQB                        _timeTicks + 1, 0            ; timeTicks.hi = 0

                                  MOVQW                        _bonus, 200                  ; bonus = 200

                                  MOVQW                        _gmode, 0                    ; gmode = CHASE_MODE

_endif_0x0059                     Return                                                    ; return

_endif_0x0058                     CMPI                         _timeTicks + 1, 30
                                  JLE                          _endif_0x005a                ; if timeTicks.hi > 30

                                  MOVQB                        _timeTicks + 1, 0            ; timeTicks.hi = 0

                                  MOVQW                        _gmode, 0                    ; gmode = CHASE_MODE

                                  Return                                                    ; return

_endif_0x005a                     LD                           _levelPain + 1
                                  ADDI                         20
                                  STW                          0xe8
                                  LD                           _timeTicks + 1
                                  SUBW                         0xe8
                                  CALLI                        _page_0x0fa0
_page_0x0fa0                      JLE                          _endif_0x005b                ; if timeTicks.hi > (levelPain.hi + 20)

                                  MOVQW                        _gmode, 2                    ; gmode = SCATTER_MODE

_endif_0x005b                     Return                                                    ; return

_getBlinkyTarget                  PUSH                         
                                  MOVWA                        _gi, _bi
                                  MOVWA                        _gj, _bj                     ; bi = gi : bj = gj

                                  LDW                          _gmode
                                  JNE                          _endif_0x005c                ; if gmode = CHASE_MODE

                                  MOVWA                        _puci, _ti
                                  MOVWA                        _pucj, _tj                   ; ti = puci : tj = pucj

                                  Return                                                    ; return

_endif_0x005c                     MOVQW                        _ti, 27
                                  MOVQW                        _tj, 0                       ; ti = 27 : tj = 0

                                  Return                                                    ; return

_getPinkyTarget                   PUSH                         
                                  LDW                          _gmode
                                  JNE                          _endif_0x005d                ; if gmode = CHASE_MODE

                                  LDW                          _puci
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  STW                          _ti                          ; ti = puci + pxd + pxd + pxd + pxd

                                  LDW                          _pucj
                                  ADDW                         _pyd
                                  ADDW                         _pyd
                                  ADDW                         _pyd
                                  ADDW                         _pyd
                                  STW                          _tj                          ; tj = pucj + pyd + pyd + pyd + pyd

                                  Return                                                    ; return

_endif_0x005d                     MOVQW                        _ti, 0
                                  MOVQW                        _tj, 0                       ; ti = 0 : tj = 0

                                  Return                                                    ; return

_getInkyTarget                    PUSH                         
                                  LDW                          _gmode
                                  JNE                          _endif_0x005e                ; if gmode = CHASE_MODE

                                  LDW                          _puci
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  STW                          _ti                          ; ti = puci + pxd + pxd

                                  LDW                          _pucj
                                  CALLI                        _page_0x10a0
_page_0x10a0                      ADDW                         _pyd
                                  ADDW                         _pyd
                                  STW                          _tj                          ; tj = pucj + pyd + pyd

                                  LDW                          _ti
                                  SUBW                         _bi
                                  STW                          _zi
                                  LDW                          _tj
                                  SUBW                         _bj
                                  STW                          _zj                          ; zi = ti - bi : zj = tj - bj

                                  ADDVW                        _zi, _ti                     ; ti = ti + zi

                                  ADDVW                        _zj, _tj                     ; tj = tj + zj

                                  Return                                                    ; return

_endif_0x005e                     MOVQW                        _ti, 27
                                  MOVQW                        _tj, 23                      ; ti = 27 : tj = 23

                                  Return                                                    ; return

_getClydeTarget                   PUSH                         
                                  LDW                          _gmode
                                  JNE                          _endif_0x005f                ; if gmode = CHASE_MODE

                                  LDW                          _puci
                                  SUBW                         _gi
                                  ABSW                         
                                  STW                          0xea
                                  LDW                          _pucj
                                  SUBW                         _gj
                                  ABSW                         
                                  ADDW                         0xea
                                  SUBI                         8
                                  JLE                          _endif_0x0060                ; if abs(puci - gi) + abs(pucj - gj) > 8

                                  MOVWA                        _puci, _ti
                                  MOVWA                        _pucj, _tj                   ; ti = puci : tj = pucj

                                  Return                                                    ; return

_endif_0x005f                     MOVQW                        _ti, 0
                                  MOVQW                        _tj, 23                      ; ti = 0 : tj = 23

                                  Return                                                    ; return

_getJuncDir                       PUSH                         
                                  LDW                          _gxd
                                  JumpFalse                    _else_0x0061                 ; if (gxd)

                                  LDW                          _tj
                                  SUBW                         _gj
                                  ABSW                         
                                  JumpFalse                    _endif_0x0062                ; if (abs(tj - gj))

                                  CALLI                        _page_0x11a0
_page_0x11a0                      LDW                          _gj
                                  SUBI                         1
                                  STW                          memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _endif_0x0063                ; if maze(gj - 1, gi) <> WALL

                                  MOVQW                        _gdir, 3
                                  LDW                          _tj
                                  SUBW                         _gj
                                  JGE                          _if_0x0064
                                  Return                                                    ; gdir = 3 : if tj < gj then return

_endif_0x0063                     LDW                          _gj
                                  ADDI                         1
                                  STW                          memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _endif_0x0065                ; if maze(gj + 1, gi) <> WALL

                                  MOVQW                        _gdir, 1
                                  LDW                          _tj
                                  SUBW                         _gj
                                  JLE                          _if_0x0066
                                  Return                                                    ; gdir = 1 : if tj > gj then return

_endif_0x0062                     CALLI                        _endif_0x0067                ; else

_else_0x0061                      LDW                          _ti
                                  SUBW                         _gi
                                  ABSW                         
                                  JumpFalse                    _endif_0x0068                ; if (abs(ti - gi))

                                  LDW                          _gi
                                  SUBI                         1
                                  STW                          0xe8
                                  MOVWA                        _gj, memIndex0
                                  MOVWA                        0xe8, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        _page_0x12a0
_page_0x12a0                      CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _endif_0x0069                ; if maze(gj, gi - 1) <> WALL

                                  MOVQW                        _gdir, 2
                                  LDW                          _ti
                                  SUBW                         _gi
                                  JGE                          _if_0x006a
                                  Return                                                    ; gdir = 2 : if ti < gi then return

_endif_0x0069                     LDW                          _gi
                                  ADDI                         1
                                  STW                          0xe8
                                  MOVWA                        _gj, memIndex0
                                  MOVWA                        0xe8, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _endif_0x006b                ; if maze(gj, gi + 1) <> WALL

                                  MOVQW                        _gdir, 0
                                  LDW                          _ti
                                  SUBW                         _gi
                                  JLE                          _if_0x006c
                                  Return                                                    ; gdir = 0 : if ti > gi then return

_endif_0x0067                     CMPI                         _gxd, 1
                                  JNE                          _elseif_0x006d               ; if gxd = 1

                                  MOVQW                        _gdir, 0                     ; gdir = 0

                                  CALLI                        _endif_0x0070
_elseif_0x006d                    LDNI                         1
                                  XORW                         _gxd
                                  JNE                          _elseif_0x006e               ; elseif gxd = -1

                                  MOVQW                        _gdir, 2                     ; gdir = 2

                                  CALLI                        _endif_0x0070
_elseif_0x006e                    CMPI                         _gyd, 1
                                  JNE                          _else_0x006f                 ; elseif gyd = 1

                                  MOVQW                        _gdir, 1                     ; gdir = 1

                                  CALLI                        _page_0x13a0
_page_0x13a0                      CALLI                        _endif_0x0070                ; else

_else_0x006f                      MOVQW                        _gdir, 3                     ; gdir = 3

_endif_0x0070                     Return                                                    ; return

_getWallDir                       PUSH                         
                                  LDW                          _gxd
                                  JumpFalse                    _else_0x0071                 ; if (gxd)

                                  LDW                          _gj
                                  SUBI                         1
                                  STW                          memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _endif_0x0072                ; if maze(gj - 1, gi) <> WALL

                                  MOVQW                        _gdir, 3
                                  LDW                          _tj
                                  SUBW                         _gj
                                  JGE                          _if_0x0073
                                  Return                                                    ; gdir = 3 : if tj < gj then return

_endif_0x0072                     LDW                          _gj
                                  ADDI                         1
                                  STW                          memIndex0
                                  MOVWA                        _gi, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _if_0x0074
                                  MOVQW                        _gdir, 1                     ; if maze(gj + 1, gi) <> WALL then gdir = 1

_if_0x0074                        CALLI                        _endif_0x0075                ; else

_else_0x0071                      LDW                          _gi
                                  SUBI                         1
                                  STW                          0xe8
                                  MOVWA                        _gj, memIndex0
                                  MOVWA                        0xe8, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  CALLI                        _page_0x14a0
_page_0x14a0                      XORI                         240
                                  JEQ                          _endif_0x0076                ; if maze(gj, gi - 1) <> WALL

                                  MOVQW                        _gdir, 2
                                  LDW                          _ti
                                  SUBW                         _gi
                                  JGE                          _if_0x0077
                                  Return                                                    ; gdir = 2 : if ti < gi then return

_endif_0x0076                     LDW                          _gi
                                  ADDI                         1
                                  STW                          0xe8
                                  MOVWA                        _gj, memIndex0
                                  MOVWA                        0xe8, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  PEEK                         
                                  XORI                         240
                                  JEQ                          _if_0x0078
                                  MOVQW                        _gdir, 0                     ; if maze(gj, gi + 1) <> WALL then gdir = 0

_endif_0x0075                     Return                                                    ; return

_replaceDot                       PUSH                         
                                  ANDBK                        _mz, 0x0f
                                  XORI                         1
                                  JNE                          _endif_0x0079                ; if (mz AND &h0F) = DOT

                                  LDW                          _di
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         _di
                                  ADDI                         2
                                  STW                          _di                          ; di = (di LSL 2) + di + ORIGIN_X

                                  LDW                          _dj
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         _dj
                                  ADDI                         2
                                  STW                          _dj                          ; dj = (dj LSL 2) + dj + ORIGIN_Y

                                  LDW                          _dj
                                  ADDI                         8
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         _di
                                  POKEI                        43                           ; poke ((dj + 8) LSL 8) + di, &h2B

_endif_0x0079                     Return                                                    ; return

_coordsPucMon                     PUSH                         
                                  CALLI                        _page_0x15a0
_page_0x15a0                      LDW                          _px
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  ADDW                         _pxd
                                  ADDI                         4
                                  STW                          _ci                          ; ci = px + pxd + pxd + pxd + -(ORIGIN_X-6)

                                  LDW                          _py
                                  ADDW                         _pyd
                                  ADDW                         _pyd
                                  ADDW                         _pyd
                                  ADDI                         4
                                  STW                          _cj                          ; cj = py + pyd + pyd + pyd +  (ORIGIN_Y+2)

                                  CALLI                        _div5                        ; call div5

                                  Return                                                    ; return

_handleInput                      PUSH                         
                                  MOVWA                        _pxd, _oxd
                                  MOVWA                        _pyd, _oyd                   ; oxd = pxd : oyd = pyd

                                  MOVWA                        _px, _mx
                                  MOVWA                        _py, _my
                                  CALLI                        _mod5                        ; mx = px : my = py : gosub mod5

                                  LD                           giga_buttonState
                                  STW                          numericLabel
                                  MOVQW                        defaultLabel, 0
                                  GosubNumeric                                              ; gosub get("BUTTON_STATE")

                                  Return                                                    ; return

_253                              PUSH                         
                                  CMPI                         _my, 3
                                  JNE                          _if_0x007a
                                  MOVQW                        _pyd, 0
                                  SUBI                         1
                                  STW                          _pxd                         ; if my = 3 then pyd = 0 : pxd = pyd-1

_if_0x007a                        Return                                                    ; return

_254                              PUSH                         
                                  CMPI                         _my, 3
                                  JNE                          _if_0x007b
                                  MOVQW                        _pyd, 0
                                  ADDI                         1
                                  STW                          _pxd                         ; if my = 3  then pyd = 0 : pxd = pyd+1

_if_0x007b                        Return                                                    ; return

_247                              PUSH                         
                                  CMPI                         _mx, 3
                                  CALLI                        _page_0x16a0
_page_0x16a0                      JNE                          _if_0x007c
                                  MOVQW                        _pxd, 0
                                  SUBI                         1
                                  STW                          _pyd                         ; if mx = 3 then pxd = 0 : pyd = pxd-1

_if_0x007c                        Return                                                    ; return

_251                              PUSH                         
                                  CMPI                         _mx, 3
                                  JNE                          _if_0x007d
                                  MOVQW                        _pxd, 0
                                  ADDI                         1
                                  STW                          _pyd                         ; if mx = 3 then pxd = 0 : pyd = pxd+1

_if_0x007d                        Return                                                    ; return

_drawScore                        PUSH                                                      ; proc drawScore

                                  LDWI                         26022
                                  STW                          bcdSrcAddr
                                  LDWI                         26278
                                  STW                          bcdDstAddr
                                  LDI                          7
                                  BcdAdd                                                    ; bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                                  MOVQW                        _drawScore_char, 114         ; char = SCORE_X+ORIGIN_X

                                  MOVQW                        _drawScore_i, 0              ; for i=0 to SCORE_LEN-1

_next_0x007e                      LDWI                         26284
                                  SUBW                         _drawScore_i
                                  PEEK                         
                                  ADDI                         46
                                  STW                          blitId
                                  MOVB                         _drawScore_char, blitXY
                                  MOVQB                        blitXY + 1, 75
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y+ORIGIN_Y

                                  ADDVI                        _drawScore_char, 6           ; char = char + 6

                                  ForNextInc                   _drawScore_i _next_0x007e 6  ; next i

                                  LDWI                         0x66ac
                                  STW                          bcdSrcAddr
                                  LDWI                         0x67ac
                                  STW                          bcdDstAddr
                                  LDI                          7
                                  CALLI                        _page_0x17a0
_page_0x17a0                      BcdCmp                       
                                  XORI                         1
                                  JNE                          _endif_0x007f                ; if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) = 1

                                  LDWI                         26278
                                  STW                          bcdSrcAddr
                                  LDWI                         26534
                                  STW                          bcdDstAddr
                                  LDI                          7
                                  BcdCpy                                                    ; bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                                  CALLI                        _drawHigh                    ; call drawHigh

_endif_0x007f                     Return                                                    ; endproc

_drawHigh                         PUSH                                                      ; proc drawHigh

                                  MOVQW                        _drawHigh_char, 114          ; char = HIGH_X+ORIGIN_X

                                  MOVQW                        _drawHigh_i, 0               ; for i=0 to SCORE_LEN-1

_next_0x0080                      LDWI                         26540
                                  SUBW                         _drawHigh_i
                                  PEEK                         
                                  ADDI                         46
                                  STW                          blitId
                                  MOVB                         _drawHigh_char, blitXY
                                  MOVQB                        blitXY + 1, 50
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y+ORIGIN_Y

                                  ADDVI                        _drawHigh_char, 6            ; char = char + 6

                                  ForNextInc                   _drawHigh_i _next_0x0080 6   ; next i

                                  Return                                                    ; endproc

_drawLevel                        PUSH                                                      ; proc drawLevel

                                  MOVQW                        blitId, 45
                                  MOVQB                        blitXY, 139
                                  MOVQB                        blitXY + 1, 63
                                  DrawBlit                                                  ; blit NoFlip, Level, LEVEL_X+ORIGIN_X, LEVEL_Y+ORIGIN_Y

                                  MOVQW                        _drawLevel_char, 145         ; char = LEVEL_X+ORIGIN_X + 6

                                  MOVQW                        _drawLevel_i, 0              ; for i=0 to LEVEL_LEN-4

_next_0x0081                      LDWI                         26530
                                  SUBW                         _drawLevel_i
                                  PEEK                         
                                  CALLI                        _page_0x18a0
_page_0x18a0                      ADDI                         46
                                  STW                          blitId
                                  MOVB                         _drawLevel_char, blitXY
                                  MOVQB                        blitXY + 1, 63
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-4 - i), char, LEVEL_Y+ORIGIN_Y

                                  ADDVI                        _drawLevel_char, 6           ; char = char + 6

                                  ForNextIncOne                _drawLevel_i _next_0x0081    ; next i

                                  Return                                                    ; endproc

_drawLives                        PUSH                                                      ; proc drawLives

                                  MOVQW                        _drawLives_i, 1              ; i = 1

                                  MOVQW                        _drawLives_puc, 139          ; puc = LIFE_X+ORIGIN_X

                                  CALLI                        _wcond_0x0082                ; while i <= livesDots.hi

_while_0x0083                     MOVQW                        blitId, 44
                                  MOVB                         _drawLives_puc, blitXY
                                  MOVQB                        blitXY + 1, 119
                                  DrawBlit                                                  ; blit NoFlip, Life, puc, LIFE_Y+ORIGIN_Y

                                  ADDVI                        _drawLives_puc, 6            ; puc = puc + 6

                                  INC                          _drawLives_i                 ; inc i.lo

_wcond_0x0082                     LDW                          _drawLives_i
                                  SUBBA                        _livesDots + 1
                                  TLE                          giga_vAC
                                  JumpTrue                     _while_0x0083                ; wend

                                  CALLI                        _wcond_0x0084                ; while i <= MAX_LIVES

_while_0x0085                     MOVQW                        blitId, 42
                                  MOVB                         _drawLives_puc, blitXY
                                  MOVQB                        blitXY + 1, 119
                                  DrawBlit                                                  ; blit NoFlip, Erase6x6, puc, LIFE_Y+ORIGIN_Y

                                  ADDVI                        _drawLives_puc, 6            ; puc = puc + 6

                                  INC                          _drawLives_i                 ; inc i.lo

_wcond_0x0084                     LDW                          _drawLives_i
                                  SUBI                         3
                                  TLE                          giga_vAC
                                  JumpTrue                     _while_0x0085                ; wend

                                  Return                                                    ; endproc

_eatSound                         PUSH                                                      ; proc eatSound

                                  CALLI                        _page_0x19a0
_page_0x19a0                      LDWI                         26273
                                  ADDBA                        _eatTicks
                                  PEEK                         
                                  MIDI                         
                                  STW                          _eatSound_n                  ; n = get("MIDI_NOTE", peek(@enotes + eatTicks.lo))

                                  MOVQB                        sndChannel + 1, 2
                                  MOVWA                        _eatSound_n, sndFrequency
                                  MOVQW                        sndVolume, 63
                                  MOVQW                        sndWaveType, 1
                                  SoundOnV                                                  ; sound on, 2, n, 63, 1

                                  INC                          _eatTicks                    ; inc eatTicks.lo

                                  CMPI                         _eatTicks, 4
                                  JLT                          _endif_0x0086                ; if eatTicks.lo >= 4

                                  MOVQB                        _eatTicks, 0                 ; eatTicks.lo = 0

                                  LDI                          0
                                  FREQI                        1                            ; sound off, 2

_endif_0x0086                     Return                                                    ; endproc

_scaredSound                      PUSH                                                      ; proc scaredSound

                                  MOVQB                        sndChannel + 1, 1
                                  MOVWA                        _scaredTicks, sndFrequency
                                  MOVQW                        sndVolume, 63
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 1, scaredTicks, 63, 0

                                  LDW                          _scaredTicks
                                  SUBWI                        650
                                  STW                          _scaredTicks                 ; scaredTicks = scaredTicks - 650

                                  LDWI                         5000
                                  SUBW                         _scaredTicks
                                  JLT                          _if_0x0087
                                  LDWI                         10000
                                  STW                          _scaredTicks                 ; if scaredTicks <= 5000 then scaredTicks = 10000

_if_0x0087                        MOVQB                        giga_soundTimer, 3           ; set SOUND_TIMER, 3

                                  Return                                                    ; endproc

_chaseSound                       PUSH                                                      ; proc chaseSound

                                  MOVQW                        register14, 212
                                  LD                           _livesDots
                                  STW                          register15
                                  CALLI                        _page_0x1aa0
_page_0x1aa0                      LDW                          register14
                                  SUBW                         register15
                                  STW                          mathShift
                                  Lsr4bit                      giga_vAC
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  STW                          _chaseSound_f                ; f = ((212 - livesDots.lo) LSR 4) LSL 8

                                  ANDBK                        _timeTicks, 0x0f
                                  ADDWI                        21676
                                  PEEK                         
                                  MIDI                         
                                  STW                          _chaseSound_n                ; n = get("MIDI_NOTE", peek(@gnotes + (timeTicks.lo AND 15)))

                                  MOVQB                        sndChannel + 1, 1
                                  LDW                          _chaseSound_n
                                  ADDW                         _chaseSound_f
                                  STW                          sndFrequency
                                  MOVQW                        sndVolume, 63
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 1, n + f, 63, 0

                                  MOVQB                        giga_soundTimer, 3           ; set SOUND_TIMER, 3

                                  Return                                                    ; endproc

_deadSound                        PUSH                                                      ; proc deadSound

                                  LDWI                         1000
                                  STW                          _deadSound_f                 ; f = 1000

                                  LDI                          0
                                  FREQI                        0                            ; sound off, 1

_repeat_0x0088                    MOVQW                        _deadSound_v, 1              ; for v=1 to 62 step 2

_next_0x0089                      MOVQB                        sndChannel + 1, 2
                                  MOVWA                        _deadSound_f, sndFrequency
                                  MOVWA                        _deadSound_v, sndVolume
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 2, f, v, 2

                                  MOVQB                        giga_soundTimer, 1           ; set SOUND_TIMER, 1

                                  ForNextFarAdd                _deadSound_v _next_0x0089 62 2                                                                                           ; next v

                                  CALLI                        _page_0x1ba0
_page_0x1ba0                      MOVQW                        _deadSound_v, 63             ; for v=63 downto 1 step 2

_next_0x008a                      MOVQB                        sndChannel + 1, 2
                                  MOVWA                        _deadSound_f, sndFrequency
                                  MOVWA                        _deadSound_v, sndVolume
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 2, f, v, 2

                                  MOVQB                        giga_soundTimer, 1           ; set SOUND_TIMER, 1

                                  ForNextFarSub                _deadSound_v _next_0x008a 1 2                                                                                            ; next v

                                  LDW                          _deadSound_f
                                  ADDWI                        400
                                  STW                          _deadSound_f                 ; f = f + 400

                                  LDWI                         10000
                                  SUBW                         _deadSound_f
                                  JGT                          _repeat_0x0088               ; until f >= 10000

                                  LDI                          0
                                  FREQI                        1                            ; sound off, 2

                                  Return                                                    ; endproc

_drawDeath                        PUSH                                                      ; proc drawDeath

                                  CALLI                        _drawLives                   ; call drawLives

                                  MOVQW                        _drawDeath_f, 0              ; f = 0

                                  LDI                          0
                                  FREQI                        0                            ; sound off, 1

                                  MOVQW                        _drawDeath_i, 0              ; for i=0 to 128

_next_0x008b                      ANDBK                        _drawDeath_i, 0x0f
                                  ADDWI                        21416
                                  PEEK                         
                                  MIDI                         
                                  STW                          _drawDeath_n                 ; n = get("MIDI_NOTE", peek(@dnotes + (i AND 15)))

                                  MOVQB                        sndChannel + 1, 2
                                  LDW                          _drawDeath_n
                                  SUBW                         _drawDeath_f
                                  STW                          sndFrequency
                                  LDW                          _drawDeath_i
                                  LSRV                         giga_vAC
                                  CALLI                        _page_0x1ca0
_page_0x1ca0                      LSRV                         giga_vAC
                                  STW                          0xec
                                  LDI                          63
                                  SUBW                         0xec
                                  STW                          sndVolume
                                  MOVQW                        sndWaveType, 3
                                  SoundOnV                                                  ; sound on, 2, n - f, 63 - (i LSR 2), 3

                                  MOVQB                        giga_soundTimer, 1           ; set SOUND_TIMER, 1

                                  MOVQW                        _drawDeath_j, 1
_next_0x008c                      ForNextInc                   _drawDeath_j _next_0x008c 250                                                                                            ; for j=1 to 250 : next j

                                  MOVWA                        _drawDeath_i, mathShift
                                  Lsr3bit                      giga_vAC
                                  ANDI                         0x01
                                  JNE                          _else_0x008d                 ; if ((i LSR 3) AND 1) = 0

                                  MOVQW                        blitId, 43
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Erase12x9, px, py

                                  CALLI                        _endif_0x008e                ; else

_else_0x008d                      MOVQW                        blitId, 26
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PucLt + 2, px, py

_endif_0x008e                     ANDBK                        _drawDeath_i, 0x07
                                  JNE                          _endif_0x008f                ; if (i AND 7) = 0

                                  ADDVI                        _drawDeath_f, 200            ; f = f + 200

_endif_0x008f                     ForNextInc                   _drawDeath_i _next_0x008b 128                                                                                            ; next i

                                  CALLI                        _page_0x1da0
_page_0x1da0                      LDI                          0
                                  FREQI                        1                            ; sound off, 2

                                  Return                                                    ; endproc

_drawMaze                         PUSH                                                      ; proc drawMaze

                                  MOVQB                        fgbgColour + 1, 48           ; set FG_COLOUR, &h30

                                  MOVQW                        _drawMaze_i, 0               ; for i=0 to (NUM_MAZE_PIECES*2 - 2) step 4

_next_0x0090                      LDWI                         21432
                                  ADDW                         _drawMaze_i
                                  DEEKA                        cursorXY
                                  LDWI                         21176
                                  ADDW                         _drawMaze_i
                                  DEEKA                        drawPoly_addr
                                  DrawPolyRel                                               ; set CURSOR_XY, deek(@MAZE_PIECES + i)     : polyR deek(@MAZE_ADDRS + i)

                                  LDWI                         21432
                                  ADDW                         _drawMaze_i
                                  ADDI                         2
                                  DEEKA                        cursorXY
                                  MOVQB                        drawPoly_mode, 0xB8
                                  SetPolyRelFlipX              
                                  LDWI                         21176
                                  ADDW                         _drawMaze_i
                                  ADDI                         2
                                  DEEKA                        drawPoly_addr
                                  DrawPolyRel                                               ; set CURSOR_XY, deek(@MAZE_PIECES + i + 2) : polyR deek(@MAZE_ADDRS + i + 2), FLIPX

                                  ForNextFarAdd                _drawMaze_i _next_0x0090 70 4                                                                                            ; next i

                                  MOVQB                        fgbgColour + 1, 0            ; set FG_COLOUR, 0

                                  Return                                                    ; endproc

_drawDots                         PUSH                                                      ; proc drawDots, redraw

                                  MOVQB                        fgbgColour + 1, 43           ; set FG_COLOUR, &h2B

                                  MOVQW                        _cj, 0                       ; for cj=0 to 23

_next_0x0091                      MOVQW                        _ci, 0                       ; for ci=0 to 27

_next_0x0092                      MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDWI                         0x57b4
                                  CALLI                        convert8Arr2d
                                  CALLI                        _page_0x1ea0
_page_0x1ea0                      PEEK                         
                                  STW                          _mz                          ; mz = maze(cj, ci)

                                  CMPI                         _drawDots_redraw, 1
                                  JNE                          _endif_0x0093                ; if redraw = 1

                                  ANDBK                        _mz, 0x0f
                                  XORI                         3
                                  JNE                          _elseif_0x0094               ; if (mz AND &h0F) = RDOT

                                  ANDBK                        _mz, 0xf0
                                  ORI                          0x01
                                  STW                          _mz                          ; mz = (mz AND &hF0) OR DOT

                                  CALLI                        _endif_0x0095
_elseif_0x0094                    ANDBK                        _mz, 0x0f
                                  XORI                         4
                                  JNE                          _endif_0x0095                ; elseif (mz AND &h0F) = RPILL

                                  ANDBK                        _mz, 0xf0
                                  ORI                          0x02
                                  STW                          _mz                          ; mz = (mz AND &hF0) OR PILL

_endif_0x0095                     MOVWA                        _mz, memValue
                                  MOVWA                        _cj, memIndex0
                                  MOVWA                        _ci, memIndex1
                                  LDARRW                       memIndex0, 0x57b4
                                  ADDW                         memIndex1
                                  POKEA                        memValue                     ; maze(cj, ci) = mz

_endif_0x0093                     ANDBK                        _mz, 0x0f
                                  XORI                         1
                                  JNE                          _endif_0x0096                ; if (mz AND &h0F) = DOT

                                  LDW                          _ci
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         _ci
                                  ADDI                         2
                                  ST                           drawPixel_xy
                                  LDW                          _cj
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         _cj
                                  ADDI                         2
                                  ST                           drawPixel_xy + 1
                                  CALLI                        _page_0x1fa0
_page_0x1fa0                      LDW                          drawPixel_xy
                                  STPX                         fgbgColour+1                 ; pset (ci LSL 2) + ci + ORIGIN_X, (cj LSL 2) + cj + ORIGIN_Y

_endif_0x0096                     ForNextInc                   _ci _next_0x0092 27          ; next ci

                                  ForNextInc                   _cj _next_0x0091 23          ; next cj

                                  Return                                                    ; endproc

_nextLevel                        XORBK                        _levelPain, 99
                                  JNE                          _if_0x0097
                                  LDWI                         257
                                  POKEI                        64                           ; if levelPain.lo = 99 then poke &h0101, &h40

_if_0x0097                        INC                          _levelPain                   ; inc levelPain.lo

                                  INC                          _levelPain + 1               ; inc levelPain.hi

                                  CALLI                        _start                       ; goto start

_initVars                         PUSH                                                      ; proc initVars

                                  ResetVars                    0x34                         ; clear vars, @timeTicks

                                  MOVQW                        _px, 65                      ; px = (63+ORIGIN_X)

                                  MOVQW                        _py, 88                      ; py = (86+ORIGIN_Y)

                                  LDNI                         1
                                  STW                          _pxd                         ; pxd = -1

                                  MOVQW                        _bonus, 200                  ; bonus = 200

                                  LDWI                         10000
                                  STW                          _scaredTicks                 ; scaredTicks = 10000

                                  Rand                         
                                  ANDI                         0x03
                                  STW                          _initVars_corner             ; corner = (rnd(0) AND 3)

                                  MOVQW                        _gidx, 0                     ; for gidx=0 to (NUM_GHOSTS - 1)

_next_0x0098                      LDW                          _gidx
                                  JNE                          _else_0x0099                 ; if gidx = 0

                                  LDW                          _gidx
                                  LSLW                         
                                  STW                          _initVars_i                  ; i = gidx LSL 1

                                  CALLI                        _endif_0x009a                ; else

_else_0x0099                      LDW                          _initVars_corner
                                  ADDW                         _gidx
                                  CALLI                        _page_0x20a0
_page_0x20a0                      ANDI                         0x03
                                  ADDI                         1
                                  LSLW                         
                                  STW                          _initVars_i                  ; i = (((corner + gidx) AND 3) + 1) LSL 1

_endif_0x009a                     LDWI                         28066
                                  ADDW                         _initVars_i
                                  DEEKA                        _gx                          ; gx = deek(@ghostsXr + i)

                                  LDWI                         27810
                                  ADDW                         _initVars_i
                                  DEEKA                        _gy                          ; gy = deek(@ghostsYr + i)

                                  LDNI                         1
                                  STW                          _gxd                         ; gxd = -1

                                  CALLI                        _setGhostVars                ; gosub setGhostVars

                                  ForNextInc                   _gidx _next_0x0098 3         ; next gidx

                                  Return                                                    ; endproc

_startLevel                       PUSH                         
                                  MOVQW                        blitId, 43
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Erase12x9, px, py

                                  MOVQB                        _livesDots, 212              ; livesDots.lo = 212

                                  LDWI                         26022
                                  STW                          bcdDstAddr
                                  LDI                          0
                                  BcdInt                                                    ; bcdint @pointsBCD, 0

                                  LDWI                         26529
                                  STW                          bcdDstAddr
                                  LD                           _levelPain
                                  BcdInt                                                    ; bcdint @levelBCD, levelPain.lo

                                  CMPI                         _levelPain + 1, 7
                                  JLE                          _if_0x009b
                                  MOVQB                        _levelPain + 1, 7            ; if levelPain.hi > 7 then levelPain.hi = 7

_if_0x009b                        MOVQW                        0xc4, 0x01
                                  CALLI                        _drawDots                    ; call drawDots, 1

                                  CALLI                        _page_0x21a0
_page_0x21a0                      CALLI                        _drawScore                   ; call drawScore

                                  CALLI                        _drawHigh                    ; call drawHigh

                                  CALLI                        _drawLives                   ; call drawLives

                                  CALLI                        _drawLevel                   ; call drawLevel

                                  LD                           _levelPain
                                  JNE                          _else_0x009c                 ; if levelPain.lo = 0

                                  MOVQB                        waveType + 1, 2
                                  LDWI                         12704
                                  PlayMusic                                                 ; play music, MUSIC_INTRO, 2

                                  CALLI                        _endif_0x009d                ; else

_else_0x009c                      MOVQW                        waitVBlankNum, 120
                                  WaitVBlanks                                               ; wait 120

_endif_0x009d                     Return                                                    ; return

_resetLevel                       PUSH                         
                                  MOVQW                        _levelPain, 0                ; levelPain = 0+0*256

                                  LDWI                         768
                                  STW                          _livesDots                   ; livesDots = 3*256

                                  LDWI                         26278
                                  STW                          bcdDstAddr
                                  LDI                          0
                                  BcdInt                                                    ; bcdint @scoreBCD, 0

                                  LDWI                         257
                                  POKEI                        0                            ; poke &h0101, 0

                                  Return                                                    ; return

_initSystem                       PUSH                         
                                  MOVQW                        _px, 65
                                  MOVQW                        _py, 88                      ; px = (63+ORIGIN_X) : py = (86+ORIGIN_Y)

                                  LDWI                         256
                                  POKEI                        10                           ; poke &h0100, &h0A

                                  LDWI                         258
                                  POKEI                        10                           ; poke &h0102, &h0A

                                  LDWI                         492
                                  POKEI                        125                          ; poke &h01EC, &h7D

                                  LDWI                         494
                                  CALLI                        _page_0x22a0
_page_0x22a0                      POKEI                        125                          ; poke &h01EE, &h7D

                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                                              ; mode 2

                                  MOVQW                        fgbgColour, 0                ; set FGBG_COLOUR, 0

                                  LDWI                         2560
                                  STW                          clrAddress
                                  MOVQW                        clrWidth, 160
                                  MOVQW                        clrLines, 116
                                  ClearRect                                                 ; cls &h0A00, 160, 116

                                  Return                                                    ; return

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x4ba0
convert8Arr2d                     EQU     0x64a0
resetVars                         EQU     0x47ef
lsr3bit                           EQU     0x4ea0
lsr4bit                           EQU     0x47a9
lsr6bit                           EQU     0x46f5
gosubNumericLabel                 EQU     0x4acf
scanlineMode                      EQU     0x46eb
waitVBlank                        EQU     0x4da0
waitVBlanks                       EQU     0x47d4
resetVideoFlags                   EQU     0x48a0
initClearFuncs                    EQU     0x47e1
clearRect                         EQU     0x48d0
drawLineSlow                      EQU     0x4dac
drawLineSlowLoop                  EQU     0x49a0
drawPolyRel                       EQU     0x4bc9
setPolyRelFlipX                   EQU     0x4aa0
setPolyRelFlipY                   EQU     0x47a3
drawBlit_                         EQU     0x48ba
drawBlit                          EQU     0x47c9
drawBlitX                         EQU     0x47be
drawBlitY                         EQU     0x47b3
resetAudio                        EQU     0x4aa6
resetMusic                        EQU     0x46db
playMusic                         EQU     0x4cc7
soundOnV                          EQU     0x48a8
bcdAdd                            EQU     0x49d7
bcdInt                            EQU     0x4ca1
bcdDigits                         EQU     0x48e6
bcdCmp                            EQU     0x49b7
bcdCpy                            EQU     0x46e1



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET


swpSrcAddr          EQU     register0
swpDstAddr          EQU     register1
swpTmpData          EQU     register2
swapCount           EQU     register3
swpTmpAddr          EQU     register8
cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        
regsAddr            EQU     giga_sysArg6                        


convert8Arr2d       DEEKR   memIndex0
                    ADDW    memIndex1
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVars           LDI     giga_One
                    SUBW    varAddress
                    STW     varCount
                    LSRB    varCount                            
                    LDI     0
                    
resetV_loop         DOKEV+  varAddress
                    DBNE    varCount, resetV_loop
                    RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


lsr3bit             LDWI    SYS_LSRW3_52
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     52
                    RET


lsr4bit             LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET


lsr6bit             LDWI    SYS_LSRW6_48
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     48
                    RET


                    
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        DEEKV   lutIndex
                    BNE     gosubNL_cont                        
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                        
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    ADDBI   lutIndex, 2
                    BRA     gosubNL_loop                        
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                            
                    POP
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_jiffiesTick
                    XORW    frameCountPrev
                    BEQ     waitVBlank
                    LD      giga_jiffiesTick
                    STW     frameCountPrev
                    RET


waitVBlanks         DECWA   waitVBlankNum
                    BGE     waitVB_vblank
                    RET
    
waitVB_vblank       PUSH
                    CALLI   waitVBlank
                    POP
                    BRA     waitVBlanks


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearRect           PUSH
                    CALLI   initClearFuncs
                    MOVB    clrAddress + 1, giga_sysArg3
                    
clearR_loop         MOVB    clrWidth, giga_sysArg0
                    MOVB    clrAddress, giga_sysArg2
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clrLines, clearR_loop
                    POP
                    RET




drawLineSlow        PUSH
                    MOVQW   drawLine_u, 1                   
                    LDW     drawLine_x2
                    SUBW    drawLine_x1                     
                    BGE     drawLS_dxp
                    NEGW    drawLine_u                      
                    NEGW    giga_vAC                        
                    
drawLS_dxp          STW     drawLine_dx
                    LDWI    256
                    STW     drawLine_v                      
                    LDW     drawLine_y2
                    SUBW    drawLine_y1                     
                    BGE     drawLS_dyp
                    NEGW    drawLine_v                      
                    NEGW    giga_vAC                        
                    
drawLS_dyp          STW     drawLine_dy
                    
                    MOVB    drawLine_x1, drawLine_addr
                    MOVB    drawLine_y1, drawLine_addr + 1
                    ADDBI   drawLine_addr + 1, 8
                    LDW     drawLine_dx
                    SUBW    drawLine_dy
                    BGE     drawLS_noswap
                    XCHGW   drawLine_dx, drawLine_dy
                    XCHGW   drawLine_u, drawLine_v
                    
drawLS_noswap       LDI     0
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    MOVB    drawLine_dx, drawLine_cnt
                    INC     drawLine_cnt
                    LSLV    drawLine_dx
                    LSLV    drawLine_dy
                    LDW     drawLine_addr
                    CALLI   drawLineSlowLoop


drawLineSlowLoop    POKEA   fgbgColour + 1 
                    ADDVW   drawLine_dy, drawLine_ddx
                    BLE     drawLLS_xy
                    SUBW    drawLine_dx
                    STW     drawLine_ddx
                    ADDVW   drawLine_v, drawLine_addr

drawLLS_xy          ADDVW   drawLine_u, drawLine_addr
                    DBNE    drawLine_cnt, drawLineSlowLoop

                    POP
                    RET



drawPolyRel         PUSH

drawPR_loop         LD      cursorXY
                    STW     drawLine_x1
                    LD      cursorXY + 1
                    STW     drawLine_y1
                    DEEKV+  drawPoly_addr
                    STW     drawLine_x2
                    SUBI    255
                    BEQ     drawPR_exit
                    LDW     drawLine_x1
drawPR_x2           ADDW    drawLine_x2                         
                    STW     drawLine_x2
                    ST      cursorXY
                    DEEKV+  drawPoly_addr
                    STW     drawLine_y2
                    LDW     drawLine_y1
drawPR_y2           ADDW    drawLine_y2                         
                    STW     drawLine_y2
                    ST      cursorXY + 1
                    CALLI   drawLineSlow
                    BRA     drawPR_loop
                    
drawPR_exit         MOVQB   drawPoly_mode, 0x99                 
                    CALLI   setPolyRelFlipX
                    CALLI   setPolyRelFlipY                     
                    POP
                    RET


setPolyRelFlipX     LDWI    drawPR_x2
                    POKEA   drawPoly_mode
                    RET


setPolyRelFlipY     LDWI    drawPR_y2
                    POKEA   drawPoly_mode
                    RET




blitId              EQU     register0
blitXY              EQU     register1
blitAddrs           EQU     register2

    
drawBlit_           ARRVW   blitId, _blitsLut_
                    DEEKA   blitAddrs                     
                    
drawB_loop          DEEKV+  blitAddrs
                    BEQ     drawB_exit
                    STW     giga_sysArg0
                    DEEKV+  blitAddrs
                    ADDW    blitXY
                    SYS     64
                    BRA     drawB_loop
                    
drawB_exit          RET


drawBlit            PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET


drawBlitX           PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET


drawBlitY           PUSH
                    LDWI    SYS_Sprite6y_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET



midiId              EQU     register0
audioAddr           EQU     register1
waveType            EQU     register2
chnCount            EQU     register3
midiNote            EQU     register4                           
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


resetAudio          LDI     0
                    FREQI   0                                   
                    FREQI   1                                   
                    FREQI   2                                   
                    FREQI   3                                   
                    OSCZ    0                                   
                    OSCZ    1                                   
                    OSCZ    2                                   
                    OSCZ    3                                   
                    LD      waveType + 1
                    MODI   0                                    
                    MODI   1                                    
                    MODI   2                                    
                    MODI   3                                    
                    RET


resetMusic          PUSH
                    CALLI   resetAudio
                    POP
                    RET


playMusic           PUSH
                    
playN_process       PEEKV+  musicStream                         
                    ST      musicCommand
                    ANDI    0xF0
                    XORI    0x90                                
                    BNE     playN_endnote
                    PEEKV+  musicStream                         
                    MIDI                                        
                    FREQM   musicCommand
                    BRA     playN_process
                    
playN_endnote       XORI    0x10                                
                    BNE     playN_segment
                    FREQM   musicCommand         			    
                    BRA     playN_process

playN_segment       XORI    0x50                                
                    BNE     playN_delay
                    DEEKV   musicStream                         
                    STW     musicStream                         
                    BNE     playN_process                       
                    POP
                    RET

playN_delay         LD      musicCommand
                    ST      giga_soundTimer                     
                    STW     waitVBlankNum
                    CALLI   waitVBlanks
                    BRA     playN_process


soundOnV            LSRB    sndFrequency                        
                    LDW     sndFrequency                        
                    FREQA   sndChannel + 1                      
                    LD      sndVolume
                    VOLA    sndChannel + 1
                    LD      sndWaveType
                    MODA    sndChannel + 1
                    RET



intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11                          
bcdCarry            EQU     register12
bcdBorrow           EQU     register12                          
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


bcdAdd              ST      bcdLength
                    MOVQW   bcdCarry, 0
                    
bcdA_loop           PEEKV   bcdDstAddr                          
                    STW     bcdDstData
                    PEEKV+  bcdSrcAddr                          
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                                  
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKEV+  bcdDstAddr                          
                    DBNE    bcdLength, bcdA_loop
                    RET



                    
bcdInt              STW     bcdValue
                    PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          
                    MOVQW   bcdDigit, 0
                    LDWI    10000
                    CALLI   bcdDigits
                    LDWI    1000
                    CALLI   bcdDigits
                    LDI     100
                    CALLI   bcdDigits
                    LDI     10
                    CALLI   bcdDigits                           
                    POKEA   bcdValue
                    POP
                    RET


bcdDigits           STW     bcdMult
                    LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            
                    BRA     bcdD_index
    
bcdD_cont           LDW     bcdDstAddr
                    POKEA   bcdDigit                            
                    DECWA   bcdDstAddr
                    MOVQB   bcdDigit, 0                         
                    RET                                         


bcdCmp              ST      bcdLength

bcdCmp_loop         PEEKV   bcdDstAddr                          
                    STW     bcdDstData
                    PEEKV   bcdSrcAddr                          
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    DECW    bcdDstAddr
                    DECW    bcdSrcAddr
                    DBNE    bcdLength, bcdCmp_loop              
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDNI    1
                    RET                    


bcdCpy              ST      bcdLength

bcdCpy_loop         PEEKV+  bcdSrcAddr
                    POKEV+  bcdDstAddr
                    DBNE    bcdLength, bcdCpy_loop              
                    RET

