_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_reset                            EQU                          0x0221
_start                            EQU                          0x0224
_init                             EQU                          0x0227
_playerBullet                     EQU                          0x0318
_psmashBarrier                    EQU                          0x05af
_checkPlayerBullet                EQU                          0x12c3
_ismashBarrier                    EQU                          0x13b6
_disableShootSound                EQU                          0x1cf5
_repeat_0x0000                    EQU                          0x022a
_if_0x0001                        EQU                          0x025b
_if_0x0002                        EQU                          0x0262
_drawPlayerBullet                 EQU                          0x0264
_if_0x0003                        EQU                          0x026c
_if_0x0004                        EQU                          0x0273
_endif_0x0006                     EQU                          0x02a1
_endif_0x0005                     EQU                          0x02a3
_drawPlayer                       EQU                          0x02ae
_else_0x0007                      EQU                          0x02c8
_endif_0x0008                     EQU                          0x02d7
_handleInput                      EQU                          0x02d9
_if_0x0009                        EQU                          0x02ec
_if_0x000a                        EQU                          0x0302
_endif_0x000c                     EQU                          0x0313
_endif_0x000b                     EQU                          0x0313
_if_0x000d                        EQU                          0x0320
_else_0x000e                      EQU                          0x034a
_endif_0x000f                     EQU                          0x0360
_movePlayer                       EQU                          0x0362
_endif_0x0012                     EQU                          0x037c
_else_0x0011                      EQU                          0x037f
_endif_0x0014                     EQU                          0x038b
_endif_0x0013                     EQU                          0x038b
_endif_0x0010                     EQU                          0x038b
_drawInvaders                     EQU                          0x038d
_if_0x0015                        EQU                          0x0395
_if_0x0016                        EQU                          0x039c
_endif_0x0017                     EQU                          0x03c2
_endif_0x001a                     EQU                          0x03db
_endif_0x0019                     EQU                          0x03db
_else_0x0018                      EQU                          0x04aa
_endif_0x001b                     EQU                          0x04cc
_endif_0x001c                     EQU                          0x04e2
_elseif_0x001d                    EQU                          0x04f0
_endif_0x001f                     EQU                          0x0585
_endif_0x001e                     EQU                          0x0585
_if_0x0020                        EQU                          0x0594
_else_0x0021                      EQU                          0x05a4
_endif_0x0022                     EQU                          0x05aa
_drawBarriers                     EQU                          0x05d8
_next_0x0023                      EQU                          0x05e2
_checkInvaders                    EQU                          0x0602
_endif_0x0025                     EQU                          0x0626
_endif_0x0024                     EQU                          0x08a0
_if_0x0026                        EQU                          0x08a7
_if_0x0027                        EQU                          0x08ba
_if_0x0028                        EQU                          0x08c7
_if_0x0029                        EQU                          0x08d6
_if_0x002a                        EQU                          0x08eb
_if_0x002b                        EQU                          0x08f2
_if_0x002c                        EQU                          0x09af
_if_0x002d                        EQU                          0x09da
_if_0x002e                        EQU                          0x0abd
_else_0x002f                      EQU                          0x0ba3
_endif_0x0030                     EQU                          0x0bb2
_endif_0x0031                     EQU                          0x0bd8
_playerExplode                    EQU                          0x0bdc
_next_0x0032                      EQU                          0x0be0
_if_0x0033                        EQU                          0x0bf1
_next_0x0034                      EQU                          0x0cb1
_if_0x0035                        EQU                          0x0da6
_drawInvaderBullets               EQU                          0x0dca
_if_0x0036                        EQU                          0x0dd3
_next_0x0037                      EQU                          0x0dd6
_elseif_0x0039                    EQU                          0x0eac
_endif_0x003b                     EQU                          0x0ecf
_endif_0x003a                     EQU                          0x0ed5
_else_0x0038                      EQU                          0x0ed8
_endif_0x003c                     EQU                          0x0ede
_checkNextLevel                   EQU                          0x0eee
_endif_0x0040                     EQU                          0x0fb7
_endif_0x003f                     EQU                          0x0fba
_endif_0x003e                     EQU                          0x0fba
_endif_0x003d                     EQU                          0x0fba
_getNextInvaderShot               EQU                          0x0fbc
_if_0x0041                        EQU                          0x0fc4
_endif_0x0042                     EQU                          0x0fd7
_endif_0x0044                     EQU                          0x10c3
_elseif_0x0043                    EQU                          0x10c6
_endif_0x0045                     EQU                          0x10f5
_checkInvaderBullets              EQU                          0x10f7
_endif_0x0047                     EQU                          0x11cc
_endif_0x0046                     EQU                          0x11ce
_if_0x0048                        EQU                          0x11d5
_if_0x0049                        EQU                          0x11dc
_next_0x004b                      EQU                          0x11eb
_endif_0x004d                     EQU                          0x12b9
_endif_0x004c                     EQU                          0x12b9
_endif_0x004a                     EQU                          0x12c1
_elseif_0x004e                    EQU                          0x12d4
_endif_0x004f                     EQU                          0x12e1
_eraseInvaderBullet               EQU                          0x12e3
_erasePlayerBullet                EQU                          0x12fa
_eraseInvaderEdge                 EQU                          0x13df
_gameOver                         EQU                          0x14a4
_playerDied                       EQU                          0x14ad
_if_0x0050                        EQU                          0x14be
_updateScore                      EQU                          0x14c0
_if_0x0051                        EQU                          0x14c8
_updateTime                       EQU                          0x14e1
_endif_0x0052                     EQU                          0x14f0
_updateSaucer                     EQU                          0x14f2
_if_0x0053                        EQU                          0x14fb
_endif_0x0054                     EQU                          0x15cb
_if_0x0055                        EQU                          0x15d4
_if_0x0057                        EQU                          0x15fa
_endif_0x0056                     EQU                          0x15fa
_else_0x005a                      EQU                          0x16c3
_endif_0x005b                     EQU                          0x16cf
_endif_0x0059                     EQU                          0x16cf
_elseif_0x005c                    EQU                          0x16f7
_endif_0x005d                     EQU                          0x17b2
_endif_0x0058                     EQU                          0x17b2
_if_0x005e                        EQU                          0x17b9
_if_0x005f                        EQU                          0x17da
_endif_0x0061                     EQU                          0x18c7
_else_0x0060                      EQU                          0x18ca
_endif_0x0063                     EQU                          0x19ac
_endif_0x0062                     EQU                          0x19ac
_updateAudio                      EQU                          0x19ae
_elseif_0x0064                    EQU                          0x19e5
_endif_0x0065                     EQU                          0x19fb
_else_0x0066                      EQU                          0x1aad
_endif_0x0067                     EQU                          0x1aaf
_endif_0x0069                     EQU                          0x1aef
_endif_0x0068                     EQU                          0x1aef
_if_0x006b                        EQU                          0x1bbf
_endif_0x006c                     EQU                          0x1bcd
_endif_0x006f                     EQU                          0x1cb0
_endif_0x006e                     EQU                          0x1cb0
_endif_0x006d                     EQU                          0x1cb0
_endif_0x006a                     EQU                          0x1cb0
_if_0x0071                        EQU                          0x1cde
_endif_0x0072                     EQU                          0x1cf3
_endif_0x0070                     EQU                          0x1cf3
_drawScore                        EQU                          0x1daa
_next_0x0073                      EQU                          0x1dc0
_endif_0x0074                     EQU                          0x1ea8
_drawHigh                         EQU                          0x1eaa
_next_0x0075                      EQU                          0x1eb1
_drawLevel                        EQU                          0x1ed1
_next_0x0076                      EQU                          0x1ee4
_drawSaucerScore                  EQU                          0x1fa9
_next_0x0077                      EQU                          0x1fb0
_drawLives                        EQU                          0x1fd3
_while_0x0079                     EQU                          0x1fdd
_wcond_0x0078                     EQU                          0x1fee
_while_0x007b                     EQU                          0x1ffa
_wcond_0x007a                     EQU                          0x20ae
_initInvaders                     EQU                          0x20b9
_next_0x007c                      EQU                          0x20c5
_next_0x007d                      EQU                          0x20c8
_else_0x007e                      EQU                          0x20d5
_endif_0x007f                     EQU                          0x20e6
_else_0x0080                      EQU                          0x20f4
_endif_0x0081                     EQU                          0x21a8
_next_0x0082                      EQU                          0x23af
_initVars                         EQU                          0x23c7
_startLevel                       EQU                          0x23d0
_if_0x0083                        EQU                          0x24ab
_else_0x0084                      EQU                          0x24d5
_endif_0x0085                     EQU                          0x24d8
_resetLevel                       EQU                          0x24da
_initSystem                       EQU                          0x25a0
_easterEgg                        EQU                          0x25ac
_next_0x0086                      EQU                          0x25bd
_uneasterEgg                      EQU                          0x25cd
_next_0x0087                      EQU                          0x25de
_page_0x0300                      EQU                          0x0300
_page_0x04a0                      EQU                          0x04a0
_page_0x0578                      EQU                          0x0578
_page_0x0600                      EQU                          0x0600
_page_0x09a0                      EQU                          0x09a0
_page_0x0aa0                      EQU                          0x0aa0
_page_0x0ba0                      EQU                          0x0ba0
_page_0x0ca0                      EQU                          0x0ca0
_page_0x0da0                      EQU                          0x0da0
_page_0x0ea0                      EQU                          0x0ea0
_page_0x0fa0                      EQU                          0x0fa0
_page_0x10a0                      EQU                          0x10a0
_page_0x11a0                      EQU                          0x11a0
_page_0x12a0                      EQU                          0x12a0
_page_0x13a0                      EQU                          0x13a0
_page_0x14a0                      EQU                          0x14a0
_page_0x15a0                      EQU                          0x15a0
_page_0x16a0                      EQU                          0x16a0
_page_0x17a0                      EQU                          0x17a0
_page_0x18a0                      EQU                          0x18a0
_page_0x19a0                      EQU                          0x19a0
_page_0x1aa0                      EQU                          0x1aa0
_page_0x1ba0                      EQU                          0x1ba0
_page_0x1ca0                      EQU                          0x1ca0
_page_0x1da0                      EQU                          0x1da0
_page_0x1ea0                      EQU                          0x1ea0
_page_0x1fa0                      EQU                          0x1fa0
_page_0x20a0                      EQU                          0x20a0
_page_0x21a0                      EQU                          0x21a0
_page_0x22a0                      EQU                          0x22a0
_page_0x23a0                      EQU                          0x23a0
_page_0x24a0                      EQU                          0x24a0

; Constants
_PBL_SIZ                          EQU                          0x0020
_PBF_LUT                          EQU                          0x7fa0
_PBV_LUT                          EQU                          0x7fe0
_SCF_SIZ                          EQU                          0x000c
_SCF_LUT                          EQU                          0x7ea0
_IEF_SIZ                          EQU                          0x0003
_IEF_LUT                          EQU                          0x7ec0
_PEF_LUT                          EQU                          0x7da0
_PEF_SIZ                          EQU                          0x0020
_Barrier                          EQU                          0x0000
_Saucer                           EQU                          0x0001
_Player                           EQU                          0x0003
_InvBigLt                         EQU                          0x0005
_InvBigRt                         EQU                          0x0007
_InvMedLt                         EQU                          0x0009
_InvMedRt                         EQU                          0x000b
_InvSmlLt                         EQU                          0x000d
_InvSmlRt                         EQU                          0x000f
_InvBlk                           EQU                          0x0011
_IExplode                         EQU                          0x0012
_PExplode                         EQU                          0x0014
_BExplode                         EQU                          0x0016
_BulBlk                           EQU                          0x0017
_PLife                            EQU                          0x0018
_PBlk                             EQU                          0x0019
_Digit                            EQU                          0x001a
_Level                            EQU                          0x0024
_SExplode                         EQU                          0x0025
_SauBlk                           EQU                          0x0027
_DigitS                           EQU                          0x0028
_SaucerStripLt                    EQU                          0x0032
_SaucerStripRt                    EQU                          0x0035
_LIFE_Y                           EQU                          0x0004
_LIFE_X                           EQU                          0x0088
_HIGH_Y                           EQU                          0x0001
_HIGH_X                           EQU                          0x0061
_SCORE_Y                          EQU                          0x0001
_SCORE_X                          EQU                          0x001f
_SCORE_LEN                        EQU                          0x0006
_LEVEL_Y                          EQU                          0x0001
_LEVEL_X                          EQU                          0x0002
_LEVEL_LEN                        EQU                          0x0005
_SAUCER_LEN                       EQU                          0x0005
_ILIST_END                        EQU                          0x0080
_INVADERS_J                       EQU                          0x0005
_INVADERS_I                       EQU                          0x000a
_INVADERS_H                       EQU                          0x0008
_INVADERS_Y                       EQU                          0x000a
_INVADERS_X                       EQU                          0x000c
_SAUCER_DELAY                     EQU                          0x001c
_SAUCER_YPOS                      EQU                          0x0009
_SAUCER_XSTART                    EQU                          0x0000
_SAUCER_XEND                      EQU                          0x008d
_DIVX                             EQU                          0x0400
_DIVY                             EQU                          0x0500
_IORIGIN_Y                        EQU                          0x0038
_IORIGIN_X                        EQU                          0x0001
_INV_SML                          EQU                          0x0000
_INV_MED                          EQU                          0x0000
_INV_BIG                          EQU                          0x0000
_MAX_LIVES                        EQU                          0x0003
_NUM_BARRIERS                     EQU                          0x0003
_BARRIER_Y                        EQU                          0x005a
_BARRIER_X                        EQU                          0x0014
_BARRIER_OFFSET                   EQU                          0x0030
_PLAYER_Y                         EQU                          0x0072
_PLAYER_X                         EQU                          0x0001
_PLAYER_XEND                      EQU                          0x0093
_LEVEL_X6                         EQU                          0x0018
_IEXPLODE_DELAY                   EQU                          0x000a
_BEXPLODE_DELAY                   EQU                          0x0008
_SEXPLODE_DELAY                   EQU                          0x000f
_NUM_ITYPES                       EQU                          0x0003
_NUM_SSCORES                      EQU                          0x0010
_INVADER_DEAD                     EQU                          0x8000
_NUM_IBULLETS                     EQU                          0x0003

; Global Variables
_livesLevel                       EQU                          0x0030
_delayLevel                       EQU                          0x0032
_px                               EQU                          0x0034
_py                               EQU                          0x0036
_ixorigin                         EQU                          0x0038
_iyorigin                         EQU                          0x003a
_ii                               EQU                          0x003c
_jj                               EQU                          0x003e
_xflip                            EQU                          0x0040
_iflip                            EQU                          0x0042
_icurrent                         EQU                          0x0044
_ishoot                           EQU                          0x0046
_sevol                            EQU                          0x0048
_timeTicks                        EQU                          0x004a
_pflip                            EQU                          0x004c
_iscore                           EQU                          0x004e
_imarch                           EQU                          0x0050
_endgame                          EQU                          0x0052
_pbxy                             EQU                          0x0054
_pbullet                          EQU                          0x0056
_ipbcount                         EQU                          0x0058
_ibindex                          EQU                          0x005a
_iexplode                         EQU                          0x005c
_itimer                           EQU                          0x005e
_bexplode                         EQU                          0x0060
_btimer                           EQU                          0x0062
_saucerxy                         EQU                          0x0064
_satimer                          EQU                          0x0066
_sefreq                           EQU                          0x0068
_stimer                           EQU                          0x006a
_sexplode                         EQU                          0x006c
_audmarch                         EQU                          0x006e
_audshoot                         EQU                          0x0070
_aviexplode                       EQU                          0x0072
_oldbutton                        EQU                          0x0074

; Local Variables
_handleInput_button               EQU                          0x00c4
_drawInvaders_x                   EQU                          0x00c4
_drawInvaders_y                   EQU                          0x00c6
_drawInvaders_invader             EQU                          0x00c8
_drawBarriers_i                   EQU                          0x00c4
_drawBarriers_x                   EQU                          0x00c6
_drawBarriers_y                   EQU                          0x00c8
_checkInvaders_i                  EQU                          0x00c4
_checkInvaders_j                  EQU                          0x00c6
_checkInvaders_x                  EQU                          0x00c8
_checkInvaders_y                  EQU                          0x00ca
_checkInvaders_iaddr              EQU                          0x00cc
_checkInvaders_iprev              EQU                          0x00ce
_checkInvaders_inext              EQU                          0x00d0
_checkInvaders_invader            EQU                          0x00d2
_playerExplode_bxy                EQU                          0x00c4
_playerExplode_t                  EQU                          0x00c6
_playerExplode_f                  EQU                          0x00c8
_playerExplode_v                  EQU                          0x00ca
_playerExplode_i                  EQU                          0x00cc
_drawInvaderBullets_bxy           EQU                          0x00c4
_getNextInvaderShot_bxy           EQU                          0x00c4
_getNextInvaderShot_i             EQU                          0x00c6
_getNextInvaderShot_j             EQU                          0x00c8
_getNextInvaderShot_xy            EQU                          0x00ca
_checkInvaderBullets_bxy          EQU                          0x00c4
_eraseInvaderBullet_xy            EQU                          0x00c4
_eraseInvaderEdge_x               EQU                          0x00c4
_eraseInvaderEdge_y               EQU                          0x00c6
_updateSaucer_xy                  EQU                          0x00c4
_updateSaucer_odd                 EQU                          0x00c6
_updateSaucer_spoints             EQU                          0x00c8
_updateSaucer_i                   EQU                          0x00ca
_updateSaucer_sy                  EQU                          0x00cc
_updateAudio_t                    EQU                          0x00c4
_updateAudio_n                    EQU                          0x00c6
_updateAudio_v                    EQU                          0x00c8
_updateAudio_i                    EQU                          0x00ca
_drawScore_i                      EQU                          0x00c4
_drawScore_char                   EQU                          0x00c6
_drawHigh_i                       EQU                          0x00c4
_drawHigh_char                    EQU                          0x00c6
_drawLevel_i                      EQU                          0x00c4
_drawLevel_char                   EQU                          0x00c6
_drawSaucerScore_xy               EQU                          0x00c4
_drawSaucerScore_i                EQU                          0x00c6
_drawSaucerScore_char             EQU                          0x00c8
_drawLives_i                      EQU                          0x00c4
_drawLives_plife                  EQU                          0x00c6
_initInvaders_i                   EQU                          0x00c4
_initInvaders_j                   EQU                          0x00c6
_initInvaders_index               EQU                          0x00c8
_initInvaders_iprev               EQU                          0x00ca
_initInvaders_inext               EQU                          0x00cc
_initInvaders_invader             EQU                          0x00ce
_easterEgg_vtable                 EQU                          0x00c4
_easterEgg_vaddr                  EQU                          0x00c6
_uneasterEgg_vtable               EQU                          0x00c4
_uneasterEgg_vaddr                EQU                          0x00c6

; Arrays
_highBCD                          EQU                          0x7de0
_highBCD                          DB                           0x00 0x00 0x00 0x00 0x00 0x00 
_scoreBCD                         EQU                          0x71bd
_scoreBCD                         DB                           0x00 0x00 0x00 0x00 0x00 0x00 
_pointsBCD                        EQU                          0x71b7
_pointsBCD                        DB                           0x00 0x00 0x00 0x00 0x00 0x00 
_levelBCD                         EQU                          0x7ca0
_levelBCD                         DB                           0x00 0x00 0x00 0x00 0x00 
_saucerBCD                        EQU                          0x7ba0
_saucerBCD                        DB                           0x00 0x00 0x00 0x00 0x00 
_invaders                         EQU                          0x70a4
_invaders                         DW                           0x71a2 0x70ae 0x6fae 0x6eae 0x6dae 
_invaders_0x71a2                  EQU                          0x71a2
_invaders_0x71a2                  DW                           0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0100 0x0180 
_invaders_0x70ae                  EQU                          0x70ae
_invaders_0x70ae                  DW                           0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 
_invaders_0x6fae                  EQU                          0x6fae
_invaders_0x6fae                  DW                           0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 0x0200 
_invaders_0x6eae                  EQU                          0x6eae
_invaders_0x6eae                  DW                           0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 
_invaders_0x6dae                  EQU                          0x6dae
_invaders_0x6dae                  DW                           0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 0x0300 
_saucerx                          EQU                          0x7ec8
_saucerx                          DB                           0x00 0x8d 
_iypos                            EQU                          0x7aa0
_iypos                            DB                           0x28 0x1e 0x14 0x0a 0x00 
_ixpos                            EQU                          0x6fa4
_ixpos                            DB                           0x00 0x0c 0x18 0x24 0x30 0x3c 0x48 0x54 0x60 0x6c 
_istruct                          EQU                          0x062c
_istruct                          DW                           0x6ea6 0x6da6 0x6cba 0x6cb2 0x6caa 0x6ca2 0x6bba 0x6bb2 0x6baa 0x6ba2 0x6aba 0x6ab2 0x6aaa 0x6aa2 0x69ba 0x69b2 0x69aa 0x69a2 0x68ba 0x68b2 0x68aa 0x68a2 0x67ba 0x67b2 0x67aa 0x67a2 0x66ba 0x66b2 0x66aa 0x66a2 0x65ae 0x65a6 0x64a8 0x64a0 0x63a8 0x63a0 0x62ae 0x62a6 0x61ae 0x61a6 0x60ae 0x60a6 0x5fae 0x5fa6 0x5eae 0x5ea6 0x5da2 0x5ca2 0x5ba2 0x5aa2 
_istruct_0x6ea6                   EQU                          0x6ea6
_istruct_0x6da6                   EQU                          0x6da6
_istruct_0x6cba                   EQU                          0x6cba
_istruct_0x6cb2                   EQU                          0x6cb2
_istruct_0x6caa                   EQU                          0x6caa
_istruct_0x6ca2                   EQU                          0x6ca2
_istruct_0x6bba                   EQU                          0x6bba
_istruct_0x6bb2                   EQU                          0x6bb2
_istruct_0x6baa                   EQU                          0x6baa
_istruct_0x6ba2                   EQU                          0x6ba2
_istruct_0x6aba                   EQU                          0x6aba
_istruct_0x6ab2                   EQU                          0x6ab2
_istruct_0x6aaa                   EQU                          0x6aaa
_istruct_0x6aa2                   EQU                          0x6aa2
_istruct_0x69ba                   EQU                          0x69ba
_istruct_0x69b2                   EQU                          0x69b2
_istruct_0x69aa                   EQU                          0x69aa
_istruct_0x69a2                   EQU                          0x69a2
_istruct_0x68ba                   EQU                          0x68ba
_istruct_0x68b2                   EQU                          0x68b2
_istruct_0x68aa                   EQU                          0x68aa
_istruct_0x68a2                   EQU                          0x68a2
_istruct_0x67ba                   EQU                          0x67ba
_istruct_0x67b2                   EQU                          0x67b2
_istruct_0x67aa                   EQU                          0x67aa
_istruct_0x67a2                   EQU                          0x67a2
_istruct_0x66ba                   EQU                          0x66ba
_istruct_0x66b2                   EQU                          0x66b2
_istruct_0x66aa                   EQU                          0x66aa
_istruct_0x66a2                   EQU                          0x66a2
_istruct_0x65ae                   EQU                          0x65ae
_istruct_0x65a6                   EQU                          0x65a6
_istruct_0x64a8                   EQU                          0x64a8
_istruct_0x64a0                   EQU                          0x64a0
_istruct_0x63a8                   EQU                          0x63a8
_istruct_0x63a0                   EQU                          0x63a0
_istruct_0x62ae                   EQU                          0x62ae
_istruct_0x62a6                   EQU                          0x62a6
_istruct_0x61ae                   EQU                          0x61ae
_istruct_0x61a6                   EQU                          0x61a6
_istruct_0x60ae                   EQU                          0x60ae
_istruct_0x60a6                   EQU                          0x60a6
_istruct_0x5fae                   EQU                          0x5fae
_istruct_0x5fa6                   EQU                          0x5fa6
_istruct_0x5eae                   EQU                          0x5eae
_istruct_0x5ea6                   EQU                          0x5ea6
_istruct_0x5da2                   EQU                          0x5da2
_istruct_0x5ca2                   EQU                          0x5ca2
_istruct_0x5ba2                   EQU                          0x5ba2
_istruct_0x5aa2                   EQU                          0x5aa2
_iaddress                         EQU                          0x59a2
_iaddress                         DW                           0x59c0 0x59ac 0x58ec 0x58d8 0x58c4 
_iaddress_0x59c0                  EQU                          0x59c0
_iaddress_0x59ac                  EQU                          0x59ac
_iaddress_0x58ec                  EQU                          0x58ec
_iaddress_0x58d8                  EQU                          0x58d8
_iaddress_0x58c4                  EQU                          0x58c4
_irblits                          EQU                          0x79a2
_irblits                          DB                           0x0f 0x0b 0x07 
_ilblits                          EQU                          0x78a0
_ilblits                          DB                           0x0d 0x09 0x05 
_iscores                          EQU                          0x75a1
_iscores                          DB                           0x1e 0x14 0x0a 
_sscores                          EQU                          0x58a4
_sscores                          DW                           0x0064 0x0032 0x0032 0x0064 0x0096 0x0064 0x0064 0x0032 0x012c 0x0064 0x0064 0x0064 0x0032 0x0096 0x0064 0x0032 
_ibxy                             EQU                          0x6ea0
_ibxy                             DW                           0x0000 0x0000 0x0000 
_inotes                           EQU                          0x74a0
_inotes                           DB                           0x28 0x26 0x24 0x22 

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x7fe0                  EQU                          0x7fe0
def_bytes_0x7fe0                  DB                           32 32 32 32 32 31 31 30 30 29 27 26 25 23 21 19 17 15 13 11 9 8 6 5 4 3 2 2 1 1 1 0 
def_bytes_0x0400                  EQU                          0x0400
def_bytes_0x0400                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 
def_bytes_0x0500                  EQU                          0x0500
def_bytes_0x0500                  DB                           0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 

; Define Words
def_words_0x7fa0                  EQU                          0x7fa0
def_words_0x7fa0                  DW                           20000 19463 18974 18529 18124 17755 17419 17113 16834 16581 16350 16139 15948 15774 15615 15470 15339 15219 15110 15011 14920 14838 14763 14695 14632 14576 14524 14477 14435 14396 14360 14328 
def_words_0x7ea0                  EQU                          0x7ea0
def_words_0x7ea0                  DW                           3000 3300 3600 3900 4200 4500 3000 3300 3600 3900 4200 4500 
def_words_0x7ec0                  EQU                          0x7ec0
def_words_0x7ec0                  DW                           0 2361 3793 
def_words_0x7da0                  EQU                          0x7da0
def_words_0x7da0                  DW                           188 253 150 66 178 84 28 150 122 263 113 188 281 131 66 178 234 216 281 216 122 253 188 113 56 19 38 169 216 75 47 159 

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits
def_blits_0x7ca5                  EQU                          0x7ca5
def_blits_0x7ca5                  DB                           0 0 0 0 12 12 0 0 0 12 12 12 0 0 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_blits_0x7ef9                  EQU                          0x7ef9
def_blits_0x7ef9                  DB                           12 12 12 12 12 12 255 
def_blits_0x7ba5                  EQU                          0x7ba5
def_blits_0x7ba5                  DB                           12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 0 0 0 0 0 255 
def_blits_0x7ef2                  EQU                          0x7ef2
def_blits_0x7ef2                  DB                           0 0 0 0 0 0 255 
def_blits_0x7aa5                  EQU                          0x7aa5
def_blits_0x7aa5                  DB                           12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 0 0 0 0 12 12 0 0 0 0 0 12 255 
def_blits_0x7eeb                  EQU                          0x7eeb
def_blits_0x7eeb                  DB                           0 0 0 0 0 0 255 
def_blits_0x79a5                  EQU                          0x79a5
def_blits_0x79a5                  DB                           12 12 0 0 0 0 12 12 12 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 255 
def_blits_0x7ee4                  EQU                          0x7ee4
def_blits_0x7ee4                  DB                           12 12 12 12 12 12 255 
def_blits_0x78d5                  EQU                          0x78d5
def_blits_0x78d5                  DB                           0 0 0 0 0 3 0 0 0 3 3 3 0 0 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 0 3 3 3 0 0 0 0 3 0 0 249 
def_blits_0x78aa                  EQU                          0x78aa
def_blits_0x78aa                  DB                           3 3 3 3 3 0 3 3 3 3 3 3 3 3 3 3 3 3 0 3 3 0 3 3 3 3 3 3 3 3 0 3 3 0 0 3 0 0 0 0 0 0 249 
def_blits_0x77d5                  EQU                          0x77d5
def_blits_0x77d5                  DB                           0 0 0 0 0 0 3 0 0 0 0 0 3 3 0 0 0 0 0 3 3 0 0 0 3 3 3 3 0 0 3 3 0 0 0 0 3 0 0 0 0 0 249 
def_blits_0x77b0                  EQU                          0x77b0
def_blits_0x77b0                  DB                           0 0 0 0 0 12 0 0 0 0 12 12 0 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 250 
def_blits_0x76db                  EQU                          0x76db
def_blits_0x76db                  DB                           0 0 0 0 0 0 12 0 0 0 0 0 12 12 12 12 0 0 12 12 12 12 12 0 12 12 12 12 12 0 12 12 12 12 12 0 250 
def_blits_0x75c3                  EQU                          0x75c3
def_blits_0x75c3                  DB                           0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 0 63 63 63 0 0 63 63 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x74c3                  EQU                          0x74c3
def_blits_0x74c3                  DB                           63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x73c3                  EQU                          0x73c3
def_blits_0x73c3                  DB                           0 0 0 63 63 63 0 63 63 63 63 63 63 63 63 63 63 63 63 63 0 0 63 63 63 63 63 63 63 63 0 0 63 63 63 63 0 63 63 0 0 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x72c3                  EQU                          0x72c3
def_blits_0x72c3                  DB                           63 0 0 0 0 0 63 63 63 0 0 0 63 63 63 63 0 0 0 0 63 63 0 0 63 63 63 63 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x71c3                  EQU                          0x71c3
def_blits_0x71c3                  DB                           0 0 63 0 0 0 63 0 0 63 0 0 63 0 63 63 63 63 63 63 63 0 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x70c3                  EQU                          0x70c3
def_blits_0x70c3                  DB                           0 63 0 0 0 0 63 0 0 63 0 0 63 63 0 63 0 0 0 63 63 63 0 0 63 63 63 63 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6fc3                  EQU                          0x6fc3
def_blits_0x6fc3                  DB                           0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 63 63 63 0 63 63 0 63 63 63 63 63 63 63 63 63 0 63 63 63 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6ec3                  EQU                          0x6ec3
def_blits_0x6ec3                  DB                           0 63 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 63 0 0 63 63 0 63 0 0 0 63 0 63 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6dc3                  EQU                          0x6dc3
def_blits_0x6dc3                  DB                           0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 0 63 0 0 0 0 63 0 63 63 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6cc3                  EQU                          0x6cc3
def_blits_0x6cc3                  DB                           0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6bc3                  EQU                          0x6bc3
def_blits_0x6bc3                  DB                           0 0 0 0 63 63 0 0 0 63 63 63 0 0 63 63 63 63 0 63 63 0 63 63 0 63 63 63 63 63 0 0 63 0 63 63 0 63 0 0 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x6ac3                  EQU                          0x6ac3
def_blits_0x6ac3                  DB                           0 0 0 0 0 0 63 0 0 0 0 0 63 63 0 0 0 0 0 63 63 0 0 0 63 63 63 0 0 0 0 63 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x69c3                  EQU                          0x69c3
def_blits_0x69c3                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x68c3                  EQU                          0x68c3
def_blits_0x68c3                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 246 
def_blits_0x67c3                  EQU                          0x67c3
def_blits_0x67c3                  DB                           0 0 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 63 0 0 63 63 0 0 0 0 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 246 
def_blits_0x66c3                  EQU                          0x66c3
def_blits_0x66c3                  DB                           0 0 63 0 0 0 0 63 0 0 63 0 63 0 0 63 0 0 0 0 63 0 0 0 0 0 0 0 63 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 63 0 0 0 63 0 0 0 0 0 0 0 0 0 246 
def_blits_0x76b6                  EQU                          0x76b6
def_blits_0x76b6                  DB                           0 0 0 12 0 0 0 0 0 0 0 12 0 12 0 12 0 0 0 0 0 0 12 12 12 0 12 12 12 12 0 12 12 12 12 12 250 
def_blits_0x65db                  EQU                          0x65db
def_blits_0x65db                  DB                           0 0 0 0 0 0 0 0 12 0 0 0 0 0 0 12 0 0 12 0 12 0 0 0 12 12 12 0 0 0 12 12 12 12 0 12 250 
def_blits_0x65b6                  EQU                          0x65b6
def_blits_0x65b6                  DB                           0 0 12 0 0 12 12 0 0 12 0 0 0 0 12 0 0 12 12 0 0 0 12 0 0 0 12 12 0 12 0 12 0 12 12 0 250 
def_blits_0x64db                  EQU                          0x64db
def_blits_0x64db                  DB                           0 0 12 0 0 0 0 12 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 12 0 0 0 12 12 12 0 12 0 0 250 
def_blits_0x64b0                  EQU                          0x64b0
def_blits_0x64b0                  DB                           63 0 0 0 0 63 0 63 0 0 63 0 0 0 63 63 0 0 63 63 0 0 63 63 0 0 63 63 0 0 0 63 0 0 63 0 63 0 0 0 0 63 249 
def_blits_0x63d5                  EQU                          0x63d5
def_blits_0x63d5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_blits_0x7ed1                  EQU                          0x7ed1
def_blits_0x7ed1                  DB                           0 0 12 12 0 0 12 12 12 12 12 12 12 12 12 12 12 12 253 
def_blits_0x7ded                  EQU                          0x7ded
def_blits_0x7ded                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 
def_blits_0x63b0                  EQU                          0x63b0
def_blits_0x63b0                  DB                           0 63 63 63 0 0 63 63 0 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 63 0 0 63 63 0 0 63 63 63 0 0 250 
def_blits_0x62db                  EQU                          0x62db
def_blits_0x62db                  DB                           0 0 63 0 0 0 0 63 63 0 0 0 63 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 63 63 63 63 63 0 250 
def_blits_0x62b6                  EQU                          0x62b6
def_blits_0x62b6                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_blits_0x61db                  EQU                          0x61db
def_blits_0x61db                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 0 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x61b6                  EQU                          0x61b6
def_blits_0x61b6                  DB                           0 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 0 0 63 63 63 63 63 0 0 0 0 63 0 0 0 0 0 63 0 0 250 
def_blits_0x60db                  EQU                          0x60db
def_blits_0x60db                  DB                           63 63 63 63 63 0 63 0 0 0 0 0 0 63 63 63 0 0 0 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x60b6                  EQU                          0x60b6
def_blits_0x60b6                  DB                           0 63 63 63 0 0 63 0 0 0 0 0 63 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x5fdb                  EQU                          0x5fdb
def_blits_0x5fdb                  DB                           63 63 63 63 63 0 63 0 0 0 63 0 0 0 0 63 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 250 
def_blits_0x5fb6                  EQU                          0x5fb6
def_blits_0x5fb6                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x5edb                  EQU                          0x5edb
def_blits_0x5edb                  DB                           0 63 63 63 0 0 63 0 0 0 63 0 63 0 0 0 63 0 0 63 63 63 63 0 0 0 0 0 63 0 0 63 63 63 0 0 250 
def_blits_0x5eb6                  EQU                          0x5eb6
def_blits_0x5eb6                  DB                           63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 0 0 0 0 0 63 63 63 63 63 0 250 
def_blits_0x5dd5                  EQU                          0x5dd5
def_blits_0x5dd5                  DB                           0 0 0 0 0 19 0 19 0 19 19 19 0 0 19 19 0 19 0 19 19 0 19 19 0 19 0 19 0 19 19 0 0 19 19 0 0 0 0 19 0 0 249 
def_blits_0x5daa                  EQU                          0x5daa
def_blits_0x5daa                  DB                           0 19 0 19 0 0 19 19 19 19 0 19 19 0 19 19 19 0 0 19 19 0 19 19 19 19 19 19 19 0 19 0 19 19 0 19 0 0 0 0 0 0 249 
def_blits_0x5cd5                  EQU                          0x5cd5
def_blits_0x5cd5                  DB                           19 0 0 0 0 0 19 0 19 0 0 0 19 19 0 0 0 0 0 19 19 0 0 0 19 19 19 0 0 0 19 0 0 19 0 0 19 0 0 0 0 0 249 
def_blits_0x5caa                  EQU                          0x5caa
def_blits_0x5caa                  DB                           19 0 0 0 19 0 0 19 0 19 19 19 0 0 19 19 0 0 19 19 19 0 19 0 0 19 0 19 0 19 19 0 0 19 19 0 19 0 19 19 0 0 249 
def_blits_0x5bd5                  EQU                          0x5bd5
def_blits_0x5bd5                  DB                           19 19 0 19 0 19 0 19 19 19 19 19 19 0 19 0 0 0 0 19 0 0 0 19 0 0 19 0 0 0 19 19 0 19 0 19 19 0 19 0 19 0 249 
def_blits_0x5baa                  EQU                          0x5baa
def_blits_0x5baa                  DB                           19 19 0 0 19 0 0 0 19 0 0 0 19 19 0 0 0 0 0 19 19 0 19 0 19 19 19 0 0 0 19 0 0 19 0 0 0 19 0 0 19 0 249 
def_blits_0x5ad5                  EQU                          0x5ad5
def_blits_0x5ad5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_blits_0x5aaa                  EQU                          0x5aaa
def_blits_0x5aaa                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_blits_0x59d5                  EQU                          0x59d5
def_blits_0x59d5                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 
def_blits_0x75a4                  EQU                          0x75a4
def_blits_0x75a4                  DB                           23 23 23 0 0 0 23 0 23 0 0 0 23 0 23 0 0 0 23 0 23 0 0 0 23 23 23 0 0 0 251 
def_blits_0x74a4                  EQU                          0x74a4
def_blits_0x74a4                  DB                           0 23 0 0 0 0 23 23 0 0 0 0 0 23 0 0 0 0 0 23 0 0 0 0 23 23 23 0 0 0 251 
def_blits_0x73a4                  EQU                          0x73a4
def_blits_0x73a4                  DB                           23 23 23 0 0 0 0 0 23 0 0 0 0 23 23 0 0 0 0 0 23 0 0 0 23 23 23 0 0 0 251 
def_blits_0x72a4                  EQU                          0x72a4
def_blits_0x72a4                  DB                           23 23 23 0 0 0 23 0 0 0 0 0 23 23 23 0 0 0 0 0 23 0 0 0 23 23 23 0 0 0 251 
def_blits_0x7eca                  EQU                          0x7eca
def_blits_0x7eca                  DB                           0 3 3 0 3 3 255 
def_blits_0x7eb9                  EQU                          0x7eb9
def_blits_0x7eb9                  DB                           0 3 3 0 3 3 255 
def_blits_0x7de6                  EQU                          0x7de6
def_blits_0x7de6                  DB                           0 3 3 0 0 0 255 
def_blits_0x78a3                  EQU                          0x78a3
def_blits_0x78a3                  DB                           0 0 3 3 0 3 255 
def_blits_0x77a9                  EQU                          0x77a9
def_blits_0x77a9                  DB                           3 0 3 3 0 3 255 
def_blits_0x77a2                  EQU                          0x77a2
def_blits_0x77a2                  DB                           3 0 3 0 0 0 255 
def_blits_0x76af                  EQU                          0x76af
def_blits_0x76af                  DB                           0 3 0 3 3 0 255 
def_blits_0x76a8                  EQU                          0x76a8
def_blits_0x76a8                  DB                           3 3 0 3 3 0 255 
def_blits_0x76a1                  EQU                          0x76a1
def_blits_0x76a1                  DB                           3 3 0 0 0 0 255 

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_blitLut_0x57de                   EQU                          0x57de
_blitLut_0x57de                   DW                           0x7ca5 0x0000 0x7ef9 0x0f00 0x7ba5 0x0006 0x7ef2 0x0f06 0x7aa5 0x000c 0x7eeb 0x0f0c 0x79a5 0x0012 0x7ee4 0x0f12 0x0000
_blitLut_0x57d0                   EQU                          0x57d0
_blitLut_0x57d0                   DW                           0x78d5 0x0000 0x78aa 0x0006 0x77d5 0x000c 0x0000
_blitLut_0x57c2                   EQU                          0x57c2
_blitLut_0x57c2                   DW                           0x78d5 0x000c 0x78aa 0x0006 0x77d5 0x0000 0x0000
_blitLut_0x57b8                   EQU                          0x57b8
_blitLut_0x57b8                   DW                           0x77b0 0x0000 0x76db 0x0006 0x0000
_blitLut_0x57ae                   EQU                          0x57ae
_blitLut_0x57ae                   DW                           0x77b0 0x0006 0x76db 0x0000 0x0000
_blitLut_0x57a4                   EQU                          0x57a4
_blitLut_0x57a4                   DW                           0x75c3 0x0000 0x74c3 0x0006 0x0000
_blitLut_0x56f6                   EQU                          0x56f6
_blitLut_0x56f6                   DW                           0x73c3 0x0000 0x72c3 0x0006 0x0000
_blitLut_0x56ec                   EQU                          0x56ec
_blitLut_0x56ec                   DW                           0x75c3 0x0006 0x74c3 0x0000 0x0000
_blitLut_0x56e2                   EQU                          0x56e2
_blitLut_0x56e2                   DW                           0x73c3 0x0006 0x72c3 0x0000 0x0000
_blitLut_0x56d8                   EQU                          0x56d8
_blitLut_0x56d8                   DW                           0x71c3 0x0000 0x70c3 0x0006 0x0000
_blitLut_0x56ce                   EQU                          0x56ce
_blitLut_0x56ce                   DW                           0x6fc3 0x0000 0x6ec3 0x0006 0x0000
_blitLut_0x56c4                   EQU                          0x56c4
_blitLut_0x56c4                   DW                           0x71c3 0x0006 0x70c3 0x0000 0x0000
_blitLut_0x56ba                   EQU                          0x56ba
_blitLut_0x56ba                   DW                           0x6fc3 0x0006 0x6ec3 0x0000 0x0000
_blitLut_0x56b0                   EQU                          0x56b0
_blitLut_0x56b0                   DW                           0x6dc3 0x0000 0x6cc3 0x0006 0x0000
_blitLut_0x56a6                   EQU                          0x56a6
_blitLut_0x56a6                   DW                           0x6bc3 0x0000 0x6ac3 0x0006 0x0000
_blitLut_0x55f6                   EQU                          0x55f6
_blitLut_0x55f6                   DW                           0x6dc3 0x0006 0x6cc3 0x0000 0x0000
_blitLut_0x55ec                   EQU                          0x55ec
_blitLut_0x55ec                   DW                           0x6bc3 0x0006 0x6ac3 0x0000 0x0000
_blitLut_0x55e2                   EQU                          0x55e2
_blitLut_0x55e2                   DW                           0x69c3 0x0000 0x68c3 0x0006 0x0000
_blitLut_0x55d8                   EQU                          0x55d8
_blitLut_0x55d8                   DW                           0x67c3 0x0000 0x66c3 0x0006 0x0000
_blitLut_0x55ce                   EQU                          0x55ce
_blitLut_0x55ce                   DW                           0x67c3 0x0006 0x66c3 0x0000 0x0000
_blitLut_0x55c4                   EQU                          0x55c4
_blitLut_0x55c4                   DW                           0x76b6 0x0000 0x65db 0x0006 0x0000
_blitLut_0x55ba                   EQU                          0x55ba
_blitLut_0x55ba                   DW                           0x65b6 0x0000 0x64db 0x0006 0x0000
_blitLut_0x6da0                   EQU                          0x6da0
_blitLut_0x6da0                   DW                           0x64b0 0x0000 0x0000
_blitLut_0x65a0                   EQU                          0x65a0
_blitLut_0x65a0                   DW                           0x63d5 0x0000 0x0000
_blitLut_0x62a0                   EQU                          0x62a0
_blitLut_0x62a0                   DW                           0x7ed1 0x0000 0x0000
_blitLut_0x61a0                   EQU                          0x61a0
_blitLut_0x61a0                   DW                           0x7ded 0x0000 0x0000
_blitLut_0x60a0                   EQU                          0x60a0
_blitLut_0x60a0                   DW                           0x63b0 0x0000 0x0000
_blitLut_0x5fa0                   EQU                          0x5fa0
_blitLut_0x5fa0                   DW                           0x62db 0x0000 0x0000
_blitLut_0x5ea0                   EQU                          0x5ea0
_blitLut_0x5ea0                   DW                           0x62b6 0x0000 0x0000
_blitLut_0x56a0                   EQU                          0x56a0
_blitLut_0x56a0                   DW                           0x61db 0x0000 0x0000
_blitLut_0x55b4                   EQU                          0x55b4
_blitLut_0x55b4                   DW                           0x61b6 0x0000 0x0000
_blitLut_0x55ae                   EQU                          0x55ae
_blitLut_0x55ae                   DW                           0x60db 0x0000 0x0000
_blitLut_0x55a8                   EQU                          0x55a8
_blitLut_0x55a8                   DW                           0x60b6 0x0000 0x0000
_blitLut_0x55a2                   EQU                          0x55a2
_blitLut_0x55a2                   DW                           0x5fdb 0x0000 0x0000
_blitLut_0x54fa                   EQU                          0x54fa
_blitLut_0x54fa                   DW                           0x5fb6 0x0000 0x0000
_blitLut_0x54f4                   EQU                          0x54f4
_blitLut_0x54f4                   DW                           0x5edb 0x0000 0x0000
_blitLut_0x54ee                   EQU                          0x54ee
_blitLut_0x54ee                   DW                           0x5eb6 0x0000 0x0000
_blitLut_0x54e0                   EQU                          0x54e0
_blitLut_0x54e0                   DW                           0x5dd5 0x0000 0x5daa 0x0006 0x5cd5 0x000c 0x0000
_blitLut_0x54d2                   EQU                          0x54d2
_blitLut_0x54d2                   DW                           0x5caa 0x0000 0x5bd5 0x0006 0x5baa 0x000c 0x0000
_blitLut_0x54c4                   EQU                          0x54c4
_blitLut_0x54c4                   DW                           0x5ad5 0x0000 0x5aaa 0x0006 0x59d5 0x000c 0x0000
_blitLut_0x54be                   EQU                          0x54be
_blitLut_0x54be                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x54b8                   EQU                          0x54b8
_blitLut_0x54b8                   DW                           0x74a4 0x0000 0x0000
_blitLut_0x54b2                   EQU                          0x54b2
_blitLut_0x54b2                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x54ac                   EQU                          0x54ac
_blitLut_0x54ac                   DW                           0x73a4 0x0000 0x0000
_blitLut_0x54a6                   EQU                          0x54a6
_blitLut_0x54a6                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x54a0                   EQU                          0x54a0
_blitLut_0x54a0                   DW                           0x72a4 0x0000 0x0000
_blitLut_0x53fa                   EQU                          0x53fa
_blitLut_0x53fa                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x53f4                   EQU                          0x53f4
_blitLut_0x53f4                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x53ee                   EQU                          0x53ee
_blitLut_0x53ee                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x53e8                   EQU                          0x53e8
_blitLut_0x53e8                   DW                           0x75a4 0x0000 0x0000
_blitLut_0x53da                   EQU                          0x53da
_blitLut_0x53da                   DW                           0x7eca 0x0000 0x7eb9 0x0006 0x7de6 0x000c 0x0000
_blitLut_0x53cc                   EQU                          0x53cc
_blitLut_0x53cc                   DW                           0x78a3 0x0000 0x77a9 0x0006 0x77a2 0x000c 0x0000
_blitLut_0x53be                   EQU                          0x53be
_blitLut_0x53be                   DW                           0x76af 0x0000 0x76a8 0x0006 0x76a1 0x000c 0x0000
_blitLut_0x53b0                   EQU                          0x53b0
_blitLut_0x53b0                   DW                           0x7eca 0x000c 0x7eb9 0x0006 0x7de6 0x0000 0x0000
_blitLut_0x53a2                   EQU                          0x53a2
_blitLut_0x53a2                   DW                           0x78a3 0x000c 0x77a9 0x0006 0x77a2 0x0000 0x0000
_blitLut_0x52f2                   EQU                          0x52f2
_blitLut_0x52f2                   DW                           0x76af 0x000c 0x76a8 0x0006 0x76a1 0x0000 0x0000
_blitsLut_                        EQU                          0x0690
_blitsLut_                        DW                           0x57de 0x57d0 0x57c2 0x57b8 0x57ae 0x57a4 0x56f6 0x56ec 0x56e2 0x56d8 0x56ce 0x56c4 0x56ba 0x56b0 0x56a6 0x55f6 0x55ec 0x55e2 0x55d8 0x55ce 0x55c4 0x55ba 0x6da0 0x65a0 0x62a0 0x61a0 0x60a0 0x5fa0 0x5ea0 0x56a0 0x55b4 0x55ae 0x55a8 0x55a2 0x54fa 0x54f4 0x54ee 0x54e0 0x54d2 0x54c4 0x54be 0x54b8 0x54b2 0x54ac 0x54a6 0x54a0 0x53fa 0x53f4 0x53ee 0x53e8 0x53da 0x53cc 0x53be 0x53b0 0x53a2 0x52f2 

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  CALLI                        _initSystem                  ; call initSystem

_reset                            CALLI                        _resetLevel                  ; call resetLevel

_start                            CALLI                        _startLevel                  ; call startLevel

_init                             CALLI                        _initVars                    ; call initVars

_repeat_0x0000                    WaitVBlank                                                ; wait

                                  CALLI                        _handleInput                 ; call handleInput

                                  CALLI                        _drawPlayerBullet            ; call drawPlayerBullet

                                  CALLI                        _drawPlayer                  ; call drawPlayer

                                  CALLI                        _movePlayer                  ; call movePlayer

                                  CALLI                        _checkInvaders               ; call checkInvaders

                                  CALLI                        _checkNextLevel              ; call checkNextLevel

                                  CALLI                        _drawInvaderBullets          ; call drawInvaderBullets

                                  CALLI                        _checkInvaderBullets         ; call checkInvaderBullets

                                  CALLI                        _drawInvaders                ; call drawInvaders

                                  CALLI                        _updateSaucer                ; call updateSaucer

                                  CALLI                        _updateScore                 ; call updateScore

                                  CALLI                        _updateAudio                 ; call updateAudio

                                  CALLI                        _updateTime                  ; call updateTime

                                  LD                           _endgame
                                  JumpFalse                    _if_0x0001
                                  BRA                          _start                       ; if (endgame.lo) then goto &start

_if_0x0001                        LD                           _endgame + 1
                                  JumpFalse                    _if_0x0002
                                  BRA                          _reset                       ; if (endgame.hi) then goto &reset

_if_0x0002                        BRA                          _repeat_0x0000               ; &forever

_drawPlayerBullet                 PUSH                                                      ; proc drawPlayerBullet

                                  LDW                          _iexplode
                                  JumpFalse                    _if_0x0003
                                  Return                                                    ; if (iexplode) then return

_if_0x0003                        LD                           _pbullet + 1
                                  JNE                          _if_0x0004
                                  Return                                                    ; if pbullet.hi = 0 then return

_if_0x0004                        LDWI                         SYS_VDrawBits_134            ; LDWI    SYS_VDrawBits_134
                                  STW                          giga_sysFn                   ; STW     giga_sysFn

                                  CALLI                        _checkPlayerBullet           ; gosub checkPlayerBullet

                                  LDWI                         0x3F00                       ; LDWI    0x3F00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LDW                          _pbxy                        ; LDW     _pbxy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4

                                  LD                           _pbullet
                                  JumpFalse                    _endif_0x0005                ; if (pbullet.lo)

                                  LDI                          0xF8                         ; LDI     0xF8
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  SUBBI                        _pbxy + 1, 2                 ; pbxy.hi = pbxy.hi - 2

                                  CMPI                         _pbxy + 1, 14
                                  JGE                          _endif_0x0006                ; if pbxy.hi < 14

                                  MOVQW                        _pbullet, 0                  ; pbullet = 0

                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

_endif_0x0006                     Return                                                    ; return

_endif_0x0005                     LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  MOVQW                        _pbullet, 0                  ; pbullet = 0

                                  Return                                                    ; endproc

_drawPlayer                       PUSH                                                      ; proc drawPlayer

                                  XORBK                        _pflip, 1
                                  JNE                          _else_0x0007                 ; if pflip.lo = 1

                                  MOVQW                        blitId, 4
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX,  Player + 1, px, py

                                  CALLI                        _endif_0x0008                ; else

_else_0x0007                      MOVQW                        blitId, 3
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Player + 0, px, py

_endif_0x0008                     Return                                                    ; endproc

_handleInput                      PUSH                                                      ; proc handleInput

                                  XORBK                        giga_buttonState, 0xff
                                  STW                          _handleInput_button          ; button = get("BUTTON_STATE") XOR 255

                                  ANDBK                        _handleInput_button, 0x01
                                  JumpFalse                    _if_0x0009
                                  LDWI                         257
                                  STW                          _pflip                       ; if (button AND &h01) then pflip = &h0101

_if_0x0009                        ANDBK                        _handleInput_button, 0x02
                                  JumpFalse                    _if_0x000a
                                  LDWI                         256
                                  CALLI                        _page_0x0300
_page_0x0300                      STW                          _pflip                       ; if (button AND &h02) then pflip = &h0100

_if_0x000a                        ANDBK                        _oldbutton, 0x80
                                  JNE                          _endif_0x000b                ; if (oldbutton AND &h80) = 0

                                  ANDBK                        _handleInput_button, 0x80
                                  JumpFalse                    _endif_0x000c                ; if (button AND &h80)

                                  CALLI                        _playerBullet                ; gosub playerBullet

_endif_0x000b                     MOVWA                        _handleInput_button, _oldbutton                                                                                          ; oldbutton = button

                                  Return                                                    ; endproc

_playerBullet                     PUSH                         
                                  LD                           _pbullet + 1
                                  JumpFalse                    _if_0x000d
                                  Return                                                    ; if (pbullet.hi) then return

_if_0x000d                        INC                          _ipbcount                    ; inc ipbcount.lo

                                  LDWI                         256
                                  STW                          _audshoot                    ; audshoot = &h0100

                                  LDWI                         257
                                  STW                          _pbullet                     ; pbullet = &h0101

                                  LD                           _pflip
                                  JumpFalse                    _else_0x000e                 ; if (pflip.lo)

                                  LDW                          _px
                                  ADDI                         6
                                  STW                          0xe8
                                  LDW                          _py
                                  SUBI                         5
                                  ADDI                         8
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         0xe8
                                  STW                          _pbxy                        ; pbxy = (px + 6) + ((py - 5 + 8) LSL 8)

                                  CALLI                        _endif_0x000f                ; else

_else_0x000e                      LDW                          _px
                                  ADDI                         5
                                  STW                          0xe8
                                  LDW                          _py
                                  SUBI                         5
                                  ADDI                         8
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         0xe8
                                  STW                          _pbxy                        ; pbxy = (px + 5) + ((py - 5 + 8) LSL 8)

_endif_0x000f                     Return                                                    ; return

_movePlayer                       PUSH                                                      ; proc movePlayer

                                  LD                           _pflip + 1
                                  JumpFalse                    _endif_0x0010                ; if (pflip.hi)

                                  MOVQB                        _pflip + 1, 0                ; pflip.hi = 0

                                  LD                           _pflip
                                  JumpFalse                    _else_0x0011                 ; if (pflip.lo)

                                  INC                          _px                          ; inc px.lo

                                  LDW                          _px
                                  SUBI                         147
                                  JLE                          _endif_0x0012                ; if px > PLAYER_XEND

                                  MOVQW                        _px, 147                     ; px = PLAYER_XEND

_endif_0x0012                     CALLI                        _endif_0x0013                ; else

_else_0x0011                      DECW                         _px                          ; dec px

                                  LDW                          _px
                                  SUBI                         1
                                  JGE                          _endif_0x0014                ; if px < PLAYER_X

                                  MOVQW                        _px, 1                       ; px = PLAYER_X

_endif_0x0010                     Return                                                    ; endproc

_drawInvaders                     PUSH                                                      ; proc drawInvaders

                                  LDW                          _iexplode
                                  JumpFalse                    _if_0x0015
                                  Return                                                    ; if (iexplode) then return

_if_0x0015                        LDW                          _icurrent
                                  JNE                          _if_0x0016
                                  Return                                                    ; if icurrent = 0 then return

_if_0x0016                        DEEKV                        _icurrent
                                  STW                          _drawInvaders_invader        ; invader = deek(icurrent)

                                  LDW                          _icurrent
                                  ADDI                         2
                                  PEEK                         
                                  ADDW                         _ixorigin
                                  STW                          _drawInvaders_x              ; x = ixorigin + peek(icurrent + 2)

                                  LDW                          _icurrent
                                  ADDI                         3
                                  PEEK                         
                                  STW                          0xea
                                  LDW                          _iyorigin
                                  SUBW                         0xea
                                  STW                          _drawInvaders_y              ; y = iyorigin - peek(icurrent + 3)

                                  LDW                          _drawInvaders_y
                                  SUBI                         107
                                  JLT                          _endif_0x0017                ; if y >= PLAYER_Y - 7

                                  CALLI                        _gameOver                    ; call gameOver

                                  Return                                                    ; return

_endif_0x0017                     LDW                          _xflip
                                  JLE                          _else_0x0018                 ; if xflip > 0

                                  CMPI                         _xflip, 3
                                  JNE                          _endif_0x0019                ; if xflip = 3

                                  LDW                          _drawInvaders_x
                                  JLE                          _endif_0x001a                ; if x > 0

                                  MOVWA                        _drawInvaders_x, 0xc4
                                  MOVWA                        _drawInvaders_y, 0xc6
                                  CALLI                        _eraseInvaderEdge            ; call eraseInvaderEdge, x, y

_endif_0x0019                     LD                           _drawInvaders_invader + 1
                                  SUBI                         1
                                  STW                          memIndex0
                                  LDARRB                       memIndex0, 0x79a2
                                  STW                          0xea
                                  LDW                          _drawInvaders_x
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  ADDW                         0xea
                                  STW                          blitId
                                  MOVB                         _drawInvaders_x, blitXY
                                  LDW                          _drawInvaders_y
                                  CALLI                        _page_0x04a0
_page_0x04a0                      ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, irblits(invader.hi - 1) + ((x LSR 1) AND 1), x, y

                                  CALLI                        _endif_0x001b                ; else

_else_0x0018                      LD                           _drawInvaders_invader + 1
                                  SUBI                         1
                                  STW                          memIndex0
                                  LDARRB                       memIndex0, 0x78a0
                                  STW                          0xea
                                  LDW                          _drawInvaders_x
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  ADDW                         0xea
                                  STW                          blitId
                                  MOVB                         _drawInvaders_x, blitXY
                                  LDW                          _drawInvaders_y
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, ilblits(invader.hi - 1) + ((x LSR 1) AND 1), x, y

_endif_0x001b                     LDW                          _imarch
                                  JumpFalse                    _endif_0x001c                ; if (imarch)

                                  MOVQW                        blitId, 17
                                  MOVB                         _drawInvaders_x, blitXY
                                  LDW                          _drawInvaders_y
                                  SUBI                         10
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x001c                     LDW                          _drawInvaders_x
                                  SUBI                         147
                                  JLT                          _elseif_0x001d               ; if x >= PLAYER_XEND

                                  LDNI                         2
                                  STW                          _iflip                       ; iflip = -2

                                  CALLI                        _endif_0x001e
_elseif_0x001d                    LDW                          _drawInvaders_x
                                  SUBI                         1
                                  JGT                          _endif_0x001e                ; elseif x <= 1

                                  CALLI                        _page_0x0578
_page_0x0578                      MOVQW                        _iflip, 2                    ; iflip = 2

                                  XORBK                        _ipbcount + 1, 49
                                  JNE                          _endif_0x001f                ; if ipbcount.hi = (INVADERS_J * INVADERS_I) - 1

                                  MOVQW                        _iflip, 3                    ; iflip = 3

_endif_0x001e                     LDW                          _icurrent
                                  ADDI                         6
                                  DEEKA                        _icurrent                    ; icurrent = deek(icurrent + 6)

                                  ANDBK                        _drawInvaders_invader, 0x80
                                  JNE                          _if_0x0020
                                  Return                                                    ; if (invader.lo AND ILIST_END) = 0 then return

_if_0x0020                        LDW                          _iflip
                                  XORW                         _xflip
                                  JEQ                          _else_0x0021                 ; if iflip <> xflip

                                  MOVQW                        _imarch, 1                   ; imarch = 1

                                  ADDVI                        _iyorigin, 8                 ; iyorigin = iyorigin + INVADERS_H

                                  CALLI                        _endif_0x0022                ; else

_else_0x0021                      MOVQW                        _imarch, 0                   ; imarch = 0

                                  ADDVW                        _iflip, _ixorigin            ; ixorigin = ixorigin + iflip

_endif_0x0022                     MOVWA                        _iflip, _xflip               ; xflip = iflip

                                  Return                                                    ; endproc

_psmashBarrier                    PUSH                                                      ; asm

                                  LDWI                         0x0C00                       ; LDWI    0x0C00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LDWI                         0xFEFF                       ; LDWI    0xFEFF
                                  ADDW                         _pbxy                        ; ADDW    _pbxy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LD                           giga_rand0                   ; LD      giga_rand0
                                  ANDI                         0xC0                         ; ANDI    0xC0
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134
                                  INC                          giga_sysArg4                 ; INC     giga_sysArg4
                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134
                                  INC                          giga_sysArg4                 ; INC     giga_sysArg4
                                  LD                           giga_rand2                   ; LD      giga_rand2
                                  ANDI                         0xC0                         ; ANDI    0xC0
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  Return                                                    ; return

_drawBarriers                     PUSH                                                      ; proc drawBarriers

                                  MOVQW                        _drawBarriers_x, 20
                                  MOVQW                        _drawBarriers_y, 90          ; x = BARRIER_X : y = BARRIER_Y

                                  MOVQW                        _drawBarriers_i, 0           ; for i=0 to NUM_BARRIERS - 1

_next_0x0023                      MOVQW                        blitId, 0
                                  MOVB                         _drawBarriers_x, blitXY
                                  LDW                          _drawBarriers_y
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Barrier, x, y

                                  ADDVI                        _drawBarriers_x, 48          ; x = x + BARRIER_OFFSET

                                  ForNextInc                   _drawBarriers_i _next_0x0023 2                                                                                           ; next i

                                  CALLI                        _page_0x0600
_page_0x0600                      Return                                                    ; endproc

_checkInvaders                    PUSH                                                      ; proc checkInvaders

                                  LDW                          _iexplode
                                  JumpFalse                    _endif_0x0024                ; if (iexplode)

                                  INC                          _itimer                      ; inc itimer.lo

                                  XORBK                        _itimer, 10
                                  JNE                          _endif_0x0025                ; if itimer.lo = IEXPLODE_DELAY

                                  MOVQW                        blitId, 17
                                  MOVB                         _iexplode, blitXY
                                  LD                           _iexplode + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, InvBlk, iexplode.lo, iexplode.hi

                                  LDI                          0
                                  ST                           _itimer
                                  STW                          _iexplode                    ; itimer.lo = 0 : iexplode = itimer.lo

_endif_0x0025                     Return                                                    ; return

                                  CALLI                        _endif_0x0024
_endif_0x0024                     LD                           _pbullet + 1
                                  JNE                          _if_0x0026
                                  Return                                                    ; if pbullet.hi = 0 then return

_if_0x0026                        LD                           _pbxy + 1
                                  SUBI                         11
                                  STW                          0xe8
                                  LDW                          _iyorigin
                                  SUBW                         0xe8
                                  STW                          _checkInvaders_y             ; y = iyorigin - (pbxy.hi - (8 + 3))

                                  LDW                          _checkInvaders_y
                                  JGE                          _if_0x0027
                                  Return                                                    ; if y < 0 then return

_if_0x0027                        LD                           _pbxy
                                  SUBW                         _ixorigin
                                  STW                          _checkInvaders_x             ; x = pbxy.lo - ixorigin

                                  LDW                          _checkInvaders_x
                                  JGE                          _if_0x0028
                                  Return                                                    ; if x < 0 then return

_if_0x0028                        LDARRB                       _checkInvaders_x, 1024
                                  STW                          _checkInvaders_i             ; i = peek(DIVX + x)

                                  LDW                          _checkInvaders_i
                                  SUBI                         10
                                  JLT                          _if_0x0029
                                  Return                                                    ; if i >= INVADERS_I then return

_if_0x0029                        LDARRB                       _checkInvaders_y, 1280
                                  STW                          0xea
                                  LDI                          4
                                  SUBW                         0xea
                                  STW                          _checkInvaders_j             ; j = (INVADERS_J - 1) - peek(DIVY + y)

                                  LDW                          _checkInvaders_j
                                  SUBI                         5
                                  JLT                          _if_0x002a
                                  Return                                                    ; if j >= INVADERS_J then return

_if_0x002a                        LDW                          _checkInvaders_j
                                  JGE                          _if_0x002b
                                  Return                                                    ; if j < 0 then return

_if_0x002b                        MOVWA                        _checkInvaders_j, memIndex0
                                  MOVWA                        _checkInvaders_i, memIndex1
                                  LDWI                         0x59a2
                                  CALLI                        _page_0x09a0
_page_0x09a0                      CALLI                        convert16Arr2d
                                  DEEK                         
                                  STW                          _checkInvaders_iaddr
                                  DEEKA                        _checkInvaders_invader       ; iaddr = iaddress(j, i) : invader = deek(iaddr)

                                  LD                           _checkInvaders_invader + 1
                                  JNE                          _if_0x002c
                                  Return                                                    ; if invader.hi = 0 then return

_if_0x002c                        LDW                          _checkInvaders_iaddr
                                  ADDI                         1
                                  POKEI                        0                            ; poke iaddr + 1, 0

                                  MOVQB                        _pbullet, 0                  ; pbullet.lo = 0

                                  LDW                          _checkInvaders_iaddr
                                  ADDI                         4
                                  DEEKA                        _checkInvaders_iprev         ; iprev = deek(iaddr + 4)

                                  LDW                          _checkInvaders_iaddr
                                  ADDI                         6
                                  DEEKA                        _checkInvaders_inext         ; inext = deek(iaddr + 6)

                                  LDW                          _checkInvaders_iprev
                                  ADDI                         6
                                  DOKEA                        _checkInvaders_inext         ; doke iprev + 6, inext

                                  LDW                          _checkInvaders_inext
                                  ADDI                         4
                                  DOKEA                        _checkInvaders_iprev         ; doke inext + 4, iprev

                                  LDW                          _icurrent
                                  XORW                         _checkInvaders_iaddr
                                  JNE                          _if_0x002d
                                  MOVWA                        _checkInvaders_inext, _icurrent                                                                                          ; if icurrent = iaddr then icurrent = inext

_if_0x002d                        MOVWA                        _checkInvaders_j, memIndex0
                                  MOVWA                        _checkInvaders_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  ADDI                         1
                                  PEEK                         
                                  STW                          _iscore                      ; iscore = invaders(j, i).hi

                                  MOVWA                        _checkInvaders_j, memIndex0
                                  MOVWA                        _checkInvaders_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  DEEK                         
                                  ORWI                         0x8000
                                  CALLI                        _page_0x0aa0
_page_0x0aa0                      STW                          memValue
                                  MOVWA                        _checkInvaders_j, memIndex0
                                  MOVWA                        _checkInvaders_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; invaders(j, i) = invaders(j, i) OR INVADER_DEAD

                                  ANDBK                        _checkInvaders_invader, 0x80
                                  JumpFalse                    _if_0x002e
                                  PEEKV                        _checkInvaders_iprev
                                  ORI                          0x80
                                  POKE                         _checkInvaders_iprev         ; if (invader.lo AND ILIST_END) then poke iprev, peek(iprev) OR ILIST_END

_if_0x002e                        CALLI                        _erasePlayerBullet           ; call erasePlayerBullet

                                  LDW                          _checkInvaders_i
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  STW                          0xea
                                  LDW                          _checkInvaders_i
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         0xea
                                  ADDW                         _ixorigin
                                  STW                          _checkInvaders_x             ; x = ixorigin + ((i LSL 3) + (i LSL 2))

                                  LDI                          4
                                  SUBW                         _checkInvaders_j
                                  STW                          _checkInvaders_j             ; j = (INVADERS_J - 1) - j

                                  LDW                          _checkInvaders_j
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  ADDW                         _checkInvaders_j
                                  ADDW                         _checkInvaders_j
                                  STW                          0xea
                                  LDW                          _iyorigin
                                  SUBW                         0xea
                                  STW                          _checkInvaders_y             ; y = iyorigin - ((j LSL 3) + j + j)

                                  LDW                          _xflip
                                  JLE                          _else_0x002f                 ; if xflip > 0

                                  MOVQW                        blitId, 18
                                  MOVB                         _checkInvaders_x, blitXY
                                  LDW                          _checkInvaders_y
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, IExplode, x, y

                                  CALLI                        _page_0x0ba0
_page_0x0ba0                      CALLI                        _endif_0x0030                ; else

_else_0x002f                      MOVQW                        blitId, 19
                                  MOVB                         _checkInvaders_x, blitXY
                                  LDW                          _checkInvaders_y
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, IExplode + 1, x, y

_endif_0x0030                     MOVQW                        _itimer, 0
                                  MOVB                         _checkInvaders_y, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         _checkInvaders_x
                                  STW                          _iexplode                    ; itimer = 0 : iexplode = x + (y LSL 8)

                                  CALLI                        _disableShootSound           ; gosub disableShootSound

                                  LDW                          _imarch
                                  JumpFalse                    _endif_0x0031                ; if (imarch)

                                  MOVQW                        blitId, 17
                                  MOVB                         _checkInvaders_x, blitXY
                                  LDW                          _checkInvaders_y
                                  SUBI                         10
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, InvBlk, x, y - INVADERS_Y

_endif_0x0031                     INC                          _ipbcount + 1                ; inc ipbcount.hi

                                  Return                                                    ; endproc

_playerExplode                    PUSH                                                      ; proc playerExplode

                                  MOVQW                        _ibindex, 0                  ; for ibindex=0 to NUM_IBULLETS - 1

_next_0x0032                      LDARRW                       _ibindex, 0x6ea0
                                  STW                          _playerExplode_bxy           ; bxy = ibxy(ibindex)

                                  LDW                          _playerExplode_bxy
                                  JumpFalse                    _if_0x0033
                                  MOVWA                        _playerExplode_bxy, 0xc4
                                  CALLI                        _eraseInvaderBullet          ; if (bxy) then call eraseInvaderBullet, bxy

_if_0x0033                        LDI                          0
                                  STARRW                       _ibindex, 0x6ea0             ; ibxy(ibindex) = 0

                                  CALLI                        _page_0x0ca0
_page_0x0ca0                      ForNextInc                   _ibindex _next_0x0032 2      ; next ibindex

                                  LDI                          0
                                  STW                          _playerExplode_t
                                  STW                          _playerExplode_f             ; t = 0 : f = t

                                  MOVQW                        _playerExplode_v, 63         ; for v=63 downto 0

_next_0x0034                      LDW                          _playerExplode_t
                                  LSLW                         
                                  ADDWI                        32160
                                  DEEKA                        _playerExplode_f             ; f = deek(PEF_LUT + (t LSL 1))

                                  MOVQB                        sndChannel + 1, 1
                                  MOVWA                        _playerExplode_f, sndFrequency
                                  MOVWA                        _playerExplode_v, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 1, f, v, 0

                                  MOVQB                        sndChannel + 1, 2
                                  MOVWA                        _playerExplode_f, sndFrequency
                                  MOVWA                        _playerExplode_v, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 2, f, v, 0

                                  MOVQB                        sndChannel + 1, 3
                                  MOVWA                        _playerExplode_f, sndFrequency
                                  MOVWA                        _playerExplode_v, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 3, f, v, 0

                                  MOVQB                        sndChannel + 1, 4
                                  MOVWA                        _playerExplode_f, sndFrequency
                                  MOVWA                        _playerExplode_v, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 4, f, v, 0

                                  INC                          _playerExplode_t             ; inc t.lo

                                  CMPI                         _playerExplode_t, 32
                                  CALLI                        _page_0x0da0
_page_0x0da0                      JNE                          _if_0x0035
                                  MOVQW                        _playerExplode_t, 0          ; if t = PEF_SIZ then t = 0

_if_0x0035                        LDW                          _playerExplode_v
                                  LSRV                         giga_vAC
                                  LSRV                         giga_vAC
                                  ANDI                         0x01
                                  ADDI                         20
                                  STW                          blitId
                                  MOVB                         _px, blitXY
                                  LDW                          _py
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, PExplode + ((v LSR 2) AND 1), px, py

                                  WaitVBlank                                                ; wait

                                  ForNextDJGE                  _playerExplode_v _next_0x0034                                                                                            ; next v

                                  SoundAllOff                                               ; sound off

                                  Return                                                    ; endproc

_drawInvaderBullets               PUSH                                                      ; proc drawInvaderBullets

                                  CMPI                         _timeTicks + 1, 3
                                  JGE                          _if_0x0036
                                  Return                                                    ; if timeTicks.hi < 3 then return

_if_0x0036                        MOVQW                        _ibindex, 0                  ; for ibindex=0 to NUM_IBULLETS - 1

_next_0x0037                      LDARRW                       _ibindex, 0x6ea0
                                  STW                          _drawInvaderBullets_bxy      ; bxy = ibxy(ibindex)

                                  LDW                          _drawInvaderBullets_bxy
                                  JumpFalse                    _else_0x0038                 ; if (bxy)

                                  LDWI                         SYS_VDrawBits_134            ; LDWI    SYS_VDrawBits_134
                                  STW                          giga_sysFn                   ; STW     giga_sysFn
                                  LDWI                         0x3F00                       ; LDWI    0x3F00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0

                                  LDW                          _drawInvaderBullets_bxy      ; LDW     _drawInvaderBullets_bxy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LDI                          0x1F                         ; LDI     0x1F
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  INC                          _drawInvaderBullets_bxy + 1  ; inc bxy.hi

                                  CMPI                         _drawInvaderBullets_bxy + 1, 121
                                  JLT                          _elseif_0x0039               ; if bxy.hi >= 121

                                  CALLI                        _page_0x0ea0
_page_0x0ea0                      LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  MOVQW                        _drawInvaderBullets_bxy, 0   ; bxy = 0

                                  CALLI                        _endif_0x003a
_elseif_0x0039                    LDW                          _drawInvaderBullets_bxy
                                  ADDWI                        1792
                                  PEEK                         
                                  XORI                         12
                                  JNE                          _endif_0x003a                ; elseif peek(bxy + &h0700) = &h0C

                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  CMPI                         _drawInvaderBullets_bxy + 1, 114
                                  JLE                          _endif_0x003b                ; if bxy.hi > PLAYER_Y

                                  LDI                          0
                                  STARRW                       _ibindex, 0x6ea0             ; ibxy(ibindex) = 0

                                  CALLI                        _playerDied                  ; call playerDied

                                  Return                                                    ; return

_endif_0x003b                     CALLI                        _ismashBarrier               ; gosub ismashBarrier

                                  MOVQW                        _drawInvaderBullets_bxy, 0   ; bxy = 0

_endif_0x003a                     CALLI                        _endif_0x003c                ; else

_else_0x0038                      MOVWA                        _drawInvaderBullets_bxy, 0xc4
                                  CALLI                        _getNextInvaderShot          ; call getNextInvaderShot, bxy

_endif_0x003c                     LDW                          _drawInvaderBullets_bxy
                                  STARRW                       _ibindex, 0x6ea0             ; ibxy(ibindex) = bxy

                                  ForNextInc                   _ibindex _next_0x0037 2      ; next ibindex

                                  Return                                                    ; endproc

_checkNextLevel                   PUSH                                                      ; proc checkNextLevel

                                  XORBK                        _ipbcount + 1, 50
                                  JNE                          _endif_0x003d                ; if ipbcount.hi = (INVADERS_J * INVADERS_I)

                                  LDI                          0
                                  STW                          _icurrent
                                  STW                          _ishoot                      ; icurrent = 0 : ishoot = icurrent

                                  CALLI                        _page_0x0fa0
_page_0x0fa0                      LDW                          _iexplode
                                  JNE                          _endif_0x003e                ; if iexplode = 0

                                  LDW                          _aviexplode
                                  JNE                          _endif_0x003f                ; if aviexplode = 0

                                  MOVQB                        _endgame, 1                  ; endgame.lo = 1

                                  INC                          _delayLevel                  ; inc delayLevel.lo

                                  CMPI                         _delayLevel + 1, 1
                                  JLE                          _endif_0x0040                ; if delayLevel.hi > 1

                                  LSRB                         _delayLevel + 1              ; delayLevel.hi = delayLevel.hi LSR 1

_endif_0x0040                     ADDBI                        _livesLevel, 4               ; livesLevel.lo = livesLevel.lo + (INVADERS_H/2)

_endif_0x003d                     Return                                                    ; endproc

_getNextInvaderShot               PUSH                                                      ; proc getNextInvaderShot, bxy

                                  LDW                          _ishoot
                                  JNE                          _if_0x0041
                                  Return                                                    ; if ishoot = 0 then return

_if_0x0041                        LDW                          _ishoot
                                  ADDI                         6
                                  DEEKA                        _ishoot                      ; ishoot = deek(ishoot + 6)

                                  Rand                         
                                  ANDBA                        _delayLevel + 1
                                  JumpFalse                    _endif_0x0042                ; if (rnd(0) AND delayLevel.hi)

                                  MOVQW                        _getNextInvaderShot_bxy, 0   ; bxy = 0

                                  Return                                                    ; return

_endif_0x0042                     PEEKV                        _ishoot
                                  ANDI                         0x0f
                                  STW                          _getNextInvaderShot_i        ; i = peek(ishoot) AND &h0F

                                  PEEKV                        _ishoot
                                  STW                          mathShift
                                  Lsr4bit                      giga_vAC
                                  ANDI                         0x07
                                  STW                          _getNextInvaderShot_j        ; j = (peek(ishoot) LSR 4) AND &h07

                                  LDW                          _ishoot
                                  ADDI                         2
                                  DEEKA                        _getNextInvaderShot_xy       ; xy = deek(ishoot + 2)

                                  CMPI                         _getNextInvaderShot_j, 4
                                  JNE                          _elseif_0x0043               ; if j = 4

                                  MOVWA                        _getNextInvaderShot_j, memIndex0
                                  MOVWA                        _getNextInvaderShot_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        _page_0x10a0
_page_0x10a0                      CALLI                        convert16Arr2d
                                  DEEK                         
                                  ANDWI                        0x8000
                                  JNE                          _endif_0x0044                ; if (invaders(j, i) AND INVADER_DEAD) = 0

                                  LDW                          _ixorigin
                                  ADDBA                        _getNextInvaderShot_xy
                                  ADDI                         5
                                  STW                          0xe8
                                  LDW                          _iyorigin
                                  SUBBA                        _getNextInvaderShot_xy + 1
                                  ADDI                         14
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         0xe8
                                  STW                          _getNextInvaderShot_bxy      ; bxy = ixorigin + xy.lo + 5 + ((iyorigin - xy.hi + 14) LSL 8)

_endif_0x0044                     CALLI                        _endif_0x0045
_elseif_0x0043                    LDW                          _getNextInvaderShot_j
                                  ADDI                         1
                                  STW                          memIndex0
                                  MOVWA                        _getNextInvaderShot_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  DEEK                         
                                  ANDWI                        0x8000
                                  JumpFalse                    _endif_0x0045                ; elseif (invaders(j+1, i) AND INVADER_DEAD)

                                  LDW                          _ixorigin
                                  ADDBA                        _getNextInvaderShot_xy
                                  ADDI                         5
                                  STW                          0xe8
                                  LDW                          _iyorigin
                                  SUBBA                        _getNextInvaderShot_xy + 1
                                  ADDI                         14
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         0xe8
                                  STW                          _getNextInvaderShot_bxy      ; bxy = ixorigin + xy.lo + 5 + ((iyorigin - xy.hi + 14) LSL 8)

_endif_0x0045                     Return                                                    ; endproc

_checkInvaderBullets              PUSH                                                      ; proc checkInvaderBullets

                                  LDW                          _bexplode
                                  JumpFalse                    _endif_0x0046                ; if (bexplode)

                                  CALLI                        _page_0x11a0
_page_0x11a0                      MOVQW                        blitId, 22
                                  MOVB                         _bexplode, blitXY
                                  LD                           _bexplode + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, BExplode, bexplode.lo, bexplode.hi

                                  INC                          _btimer                      ; inc btimer.lo

                                  CMPI                         _btimer, 8
                                  JNE                          _endif_0x0047                ; if btimer = BEXPLODE_DELAY

                                  MOVQW                        blitId, 23
                                  MOVB                         _bexplode, blitXY
                                  LD                           _bexplode + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, BulBlk, bexplode.lo, bexplode.hi

                                  LDI                          0
                                  STW                          _btimer
                                  STW                          _bexplode                    ; btimer = 0 : bexplode = btimer

_endif_0x0047                     Return                                                    ; return

_endif_0x0046                     LDW                          _iexplode
                                  JumpFalse                    _if_0x0048
                                  Return                                                    ; if (iexplode) then return

_if_0x0048                        LD                           _pbullet + 1
                                  JNE                          _if_0x0049
                                  Return                                                    ; if pbullet.hi = 0 then return

_if_0x0049                        LDW                          _pbxy
                                  SUBWI                        256
                                  PEEK                         
                                  XORI                         63
                                  JNE                          _endif_0x004a                ; if peek(pbxy - &h0100) = &h3F

                                  MOVQW                        _ibindex, 0                  ; for ibindex=0 to NUM_IBULLETS - 1

_next_0x004b                      LDARRW                       _ibindex, 0x6ea0
                                  STW                          _checkInvaderBullets_bxy     ; bxy = ibxy(ibindex)

                                  LDW                          _checkInvaderBullets_bxy
                                  JumpFalse                    _endif_0x004c                ; if (bxy)

                                  LD                           _checkInvaderBullets_bxy
                                  XORBA                        _pbxy
                                  CALLI                        _page_0x12a0
_page_0x12a0                      JNE                          _endif_0x004d                ; if bxy.lo = pbxy.lo

                                  MOVWA                        _checkInvaderBullets_bxy, 0xc4
                                  CALLI                        _eraseInvaderBullet          ; call eraseInvaderBullet, bxy

                                  LDI                          0
                                  STARRW                       _ibindex, 0x6ea0             ; ibxy(ibindex) = 0

                                  LDW                          _pbxy
                                  SUBWI                        2819
                                  STW                          _bexplode                    ; bexplode = pbxy - (3 + 11*256)

                                  Return                                                    ; return

_endif_0x004c                     ForNextInc                   _ibindex _next_0x004b 2      ; next ibindex

_endif_0x004a                     Return                                                    ; endproc

_checkPlayerBullet                PUSH                         
                                  PEEKV                        _pbxy
                                  XORI                         12
                                  JNE                          _elseif_0x004e               ; if peek(pbxy) = &h0C

                                  MOVQB                        _pbullet, 0                  ; pbullet.lo = 0

                                  CALLI                        _psmashBarrier               ; gosub psmashBarrier

                                  CALLI                        _endif_0x004f
_elseif_0x004e                    PEEKV                        _pbxy
                                  XORI                         3
                                  JNE                          _endif_0x004f                ; elseif peek(pbxy) = &h03

                                  MOVQB                        _pbullet, 0                  ; pbullet.lo = 0

                                  MOVQW                        _sexplode, 1                 ; sexplode = 1

_endif_0x004f                     Return                                                    ; return

_eraseInvaderBullet               PUSH                                                      ; proc eraseInvaderBullet, xy

                                  LDWI                         SYS_VDrawBits_134            ; LDWI    SYS_VDrawBits_134
                                  STW                          giga_sysFn                   ; STW     giga_sysFn
                                  LDWI                         0x3F00                       ; LDWI    0x3F00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LDW                          _eraseInvaderBullet_xy       ; LDW     _eraseInvaderBullet_xy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  Return                                                    ; endproc

_erasePlayerBullet                PUSH                                                      ; proc erasePlayerBullet

                                  CALLI                        _page_0x13a0
_page_0x13a0                      LDWI                         SYS_VDrawBits_134            ; LDWI    SYS_VDrawBits_134
                                  STW                          giga_sysFn                   ; STW     giga_sysFn
                                  LDWI                         0x3F00                       ; LDWI    0x3F00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LDW                          _pbxy                        ; LDW     _pbxy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  Return                                                    ; endproc

_ismashBarrier                    PUSH                                                      ; asm

                                  LDWI                         0x0C00                       ; LDWI    0x0C00
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LDWI                         0x02FF                       ; LDWI    0x02FF
                                  ADDW                         _drawInvaderBullets_bxy      ; ADDW    _drawInvaderBullets_bxy
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LD                           giga_rand0                   ; LD      giga_rand0
                                  ANDI                         0x03                         ; ANDI    0x03
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134
                                  INC                          giga_sysArg4                 ; INC     giga_sysArg4
                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134
                                  INC                          giga_sysArg4                 ; INC     giga_sysArg4
                                  LD                           giga_rand2                   ; LD      giga_rand2
                                  ANDI                         0x03                         ; ANDI    0x03
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  SYS                          134                          ; SYS     134

                                  Return                                                    ; return

_eraseInvaderEdge                 PUSH                                                      ; proc eraseInvaderEdge, x, y

                                  LDWI                         SYS_VDrawBits_134            ; LDWI    SYS_VDrawBits_134
                                  STW                          giga_sysFn                   ; STW     giga_sysFn
                                  LDI                          0                            ; LDWI    0x0000
                                  STW                          giga_sysArg0                 ; STW     giga_sysArg0
                                  LD                           _eraseInvaderEdge_x          ; LD      _eraseInvaderEdge_x
                                  SUBI                         1                            ; SUBI    1
                                  ST                           register0                    ; ST      register0
                                  LD                           _eraseInvaderEdge_y          ; LD      _eraseInvaderEdge_y
                                  ADDI                         8                            ; ADDI    8
                                  ST                           register0+1                  ; ST      register0 + 1
                                  LDW                          register0                    ; LDW     register0
                                  STW                          giga_sysArg4                 ; STW     giga_sysArg4
                                  LDI                          0x00                         ; LDI     0x00
                                  ST                           giga_sysArg2                 ; ST      giga_sysArg2
                                  CALLI                        _page_0x14a0
_page_0x14a0                      SYS                          134                          ; SYS     134

                                  Return                                                    ; endproc

_gameOver                         PUSH                                                      ; proc gameOver

                                  MOVQB                        _endgame + 1, 1              ; endgame.hi = 1

                                  CALLI                        _playerExplode               ; call playerExplode

                                  Return                                                    ; endproc

_playerDied                       PUSH                                                      ; proc playerDied

                                  DEC                          _livesLevel + 1              ; livesLevel.hi = livesLevel.hi - 1

                                  CALLI                        _drawLives                   ; call drawLives

                                  CALLI                        _playerExplode               ; call playerExplode

                                  LD                           _livesLevel + 1
                                  JNE                          _if_0x0050
                                  MOVQB                        _endgame + 1, 1              ; if livesLevel.hi = 0 then endgame.hi = 1

_if_0x0050                        Return                                                    ; endproc

_updateScore                      PUSH                                                      ; proc updateScore

                                  LDW                          _iscore
                                  JNE                          _if_0x0051
                                  Return                                                    ; if iscore = 0 then return

_if_0x0051                        LDWI                         29111
                                  STW                          bcdDstAddr
                                  LDW                          _iscore
                                  SUBI                         1
                                  ADDWI                        30113
                                  PEEK                         
                                  BcdInt                                                    ; bcdint @pointsBCD, peek(@iscores + (iscore - 1))

                                  CALLI                        _drawScore                   ; call drawScore

                                  MOVQW                        _iscore, 0                   ; iscore = 0

                                  Return                                                    ; endproc

_updateTime                       PUSH                                                      ; proc updateTime

                                  INC                          _timeTicks                   ; inc timeTicks.lo

                                  XORBK                        _timeTicks, 60
                                  JNE                          _endif_0x0052                ; if timeTicks.lo = 60

                                  MOVQB                        _timeTicks, 0                ; timeTicks.lo = 0

                                  INC                          _timeTicks + 1               ; inc timeTicks.hi

_endif_0x0052                     Return                                                    ; endproc

_updateSaucer                     PUSH                                                      ; proc updateSaucer

                                  CMPI                         _iyorigin, 56
                                  JNE                          _if_0x0053
                                  Return                                                    ; if iyorigin = IORIGIN_Y then return

_if_0x0053                        LDW                          _sexplode
                                  CALLI                        _page_0x15a0
_page_0x15a0                      JumpFalse                    _endif_0x0054                ; if (sexplode)

                                  MOVQB                        _pbullet, 0                  ; pbullet.lo = 0

                                  MOVB                         _saucerxy, _stimer           ; stimer.lo = saucerxy.lo

                                  ANDBK                        _ipbcount, 0x0f
                                  ARRW                         0x58a4
                                  DEEKA                        _updateSaucer_spoints        ; spoints = sscores(ipbcount.lo AND (NUM_SSCORES - 1))

                                  LDWI                         29111
                                  STW                          bcdDstAddr
                                  LDW                          _updateSaucer_spoints
                                  BcdInt                                                    ; bcdint @pointsBCD, spoints

                                  LDWI                         31648
                                  STW                          bcdDstAddr
                                  LDW                          _updateSaucer_spoints
                                  BcdInt                                                    ; bcdint @saucerBCD, spoints

                                  CALLI                        _drawScore                   ; call drawScore

                                  Return                                                    ; return

_endif_0x0054                     ANDBK                        _timeTicks, 0x01
                                  JumpFalse                    _if_0x0055
                                  Return                                                    ; if (timeTicks.lo AND 1) then return

_if_0x0055                        CMPI                         _timeTicks + 1, 28
                                  JLT                          _endif_0x0056                ; if timeTicks.hi >= SAUCER_DELAY

                                  MOVQB                        _timeTicks + 1, 3            ; timeTicks.hi = 3

                                  ANDBK                        _ipbcount, 0x01
                                  STW                          _updateSaucer_odd            ; odd = ipbcount.lo AND 1

                                  LDARRB                       _updateSaucer_odd, 0x7ec8
                                  ADDWI                        2304
                                  STW                          _saucerxy                    ; saucerxy = (SAUCER_YPOS*256) + saucerx(odd)

                                  LDW                          _updateSaucer_odd
                                  JumpFalse                    _if_0x0057
                                  LDW                          _saucerxy
                                  ORWI                         0x8000
                                  STW                          _saucerxy                    ; if (odd) then saucerxy = saucerxy OR &h8000

_endif_0x0056                     LDW                          _stimer
                                  CALLI                        _page_0x16a0
_page_0x16a0                      JumpFalse                    _endif_0x0058                ; if (stimer)

                                  CMPI                         _stimer + 1, 15
                                  JGE                          _endif_0x0059                ; if stimer.hi < SEXPLODE_DELAY

                                  LD                           _timeTicks
                                  LSRB                         giga_vAC
                                  LSRB                         giga_vAC
                                  ANDI                         0x01
                                  JumpFalse                    _else_0x005a                 ; if ((timeTicks.lo LSR 2) AND 1)

                                  MOVQW                        blitId, 37
                                  MOVB                         _stimer, blitXY
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SExplode + 0, stimer.lo, SAUCER_YPOS

                                  CALLI                        _endif_0x005b                ; else

_else_0x005a                      MOVQW                        blitId, 38
                                  MOVB                         _stimer, blitXY
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SExplode + 1, stimer.lo, SAUCER_YPOS

_endif_0x0059                     INC                          _stimer + 1                  ; inc stimer.hi

                                  XORBK                        _stimer + 1, 15
                                  JNE                          _elseif_0x005c               ; if stimer.hi = SEXPLODE_DELAY

                                  LD                           _stimer
                                  ADDI                         3
                                  ADDWI                        2560
                                  STW                          _updateSaucer_xy             ; xy = stimer.lo + 3 + (256*(SAUCER_YPOS + 1))

                                  MOVQW                        blitId, 39
                                  MOVB                         _stimer, blitXY
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SauBlk, stimer.lo, SAUCER_YPOS

                                  MOVWA                        _updateSaucer_xy, 0xc4
                                  CALLI                        _drawSaucerScore             ; call drawSaucerScore, xy

                                  CALLI                        _endif_0x005d
_elseif_0x005c                    XORBK                        _stimer + 1, 45
                                  CALLI                        _page_0x17a0
_page_0x17a0                      JNE                          _endif_0x005d                ; elseif stimer.hi = (SEXPLODE_DELAY + SEXPLODE_DELAY + SEXPLODE_DELAY)

                                  MOVQW                        blitId, 39
                                  MOVB                         _stimer, blitXY
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SauBlk, stimer.lo, SAUCER_YPOS

                                  MOVQW                        _stimer, 0                   ; stimer = 0

_endif_0x0058                     LDW                          _saucerxy
                                  JNE                          _if_0x005e
                                  Return                                                    ; if saucerxy = 0 then return

_if_0x005e                        LDW                          _saucerxy
                                  ANDWI                        0x7fff
                                  STW                          _updateSaucer_xy             ; xy = saucerxy AND &h7FFF

                                  LDW                          _saucerxy
                                  ANDWI                        0x8000
                                  STW                          _updateSaucer_odd            ; odd = saucerxy AND &h8000

                                  LD                           _saucerxy
                                  LSRB                         giga_vAC
                                  ANDI                         0x03
                                  STW                          _updateSaucer_i              ; i = (saucerxy.lo LSR 1) AND 3

                                  CMPI                         _updateSaucer_i, 3
                                  JNE                          _if_0x005f
                                  MOVQW                        _updateSaucer_i, 0           ; if i = 3 then i = 0

_if_0x005f                        LD                           _updateSaucer_xy + 1
                                  ADDI                         3
                                  STW                          _updateSaucer_sy             ; sy = xy.hi + 3

                                  LDW                          _updateSaucer_odd
                                  JumpFalse                    _else_0x0060                 ; if (odd)

                                  MOVQW                        blitId, 1
                                  MOVB                         _updateSaucer_xy, blitXY
                                  LD                           _updateSaucer_xy + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, Saucer + 0, xy.lo, xy.hi

                                  LDI                          2
                                  SUBW                         _updateSaucer_i
                                  ADDI                         50
                                  STW                          blitId
                                  CALLI                        _page_0x18a0
_page_0x18a0                      MOVB                         _updateSaucer_xy, blitXY
                                  LDW                          _updateSaucer_sy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, SaucerStripLt + (2 - i), xy.lo, sy

                                  DEC                          _saucerxy                    ; saucerxy.lo = saucerxy.lo - 1

                                  LD                           _saucerxy
                                  JNE                          _endif_0x0061                ; if saucerxy.lo = SAUCER_XSTART

                                  MOVQW                        _saucerxy, 0                 ; saucerxy = 0

                                  LDI                          0
                                  FREQI                        3                            ; sound off, 4

                                  MOVQW                        blitId, 39
                                  MOVQB                        blitXY, 0
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SauBlk, SAUCER_XSTART, SAUCER_YPOS

_endif_0x0061                     CALLI                        _endif_0x0062                ; else

_else_0x0060                      MOVQW                        blitId, 2
                                  MOVB                         _updateSaucer_xy, blitXY
                                  LD                           _updateSaucer_xy + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, Saucer + 1, xy.lo, xy.hi

                                  LDI                          53
                                  ADDW                         _updateSaucer_i
                                  STW                          blitId
                                  MOVB                         _updateSaucer_xy, blitXY
                                  LDW                          _updateSaucer_sy
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlitX                                                 ; blit FlipX, SaucerStripRt + i, xy.lo, sy

                                  INC                          _saucerxy                    ; inc saucerxy.lo

                                  CMPI                         _saucerxy, 141
                                  JLE                          _endif_0x0063                ; if saucerxy.lo > SAUCER_XEND

                                  MOVQW                        _saucerxy, 0                 ; saucerxy = 0

                                  LDI                          0
                                  FREQI                        3                            ; sound off, 4

                                  CALLI                        _page_0x19a0
_page_0x19a0                      MOVQW                        blitId, 39
                                  MOVQB                        blitXY, 141
                                  MOVQB                        blitXY + 1, 17
                                  DrawBlit                                                  ; blit NoFlip, SauBlk, SAUCER_XEND, SAUCER_YPOS

_endif_0x0062                     Return                                                    ; endproc

_updateAudio                      PUSH                                                      ; proc updateAudio

                                  MOVQB                        giga_soundTimer, 255         ; set SOUND_TIMER, 255

                                  MOVQW                        register14, 49
                                  LD                           _ipbcount + 1
                                  STW                          register15
                                  LDW                          register14
                                  SUBW                         register15
                                  ADDI                         3
                                  STW                          _updateAudio_i               ; i = (INVADERS_J * INVADERS_I - 1) - ipbcount.hi + 3

                                  LD                           _audmarch
                                  JNE                          _elseif_0x0064               ; if audmarch.lo = 0

                                  ANDBK                        _audmarch + 1, 0x03
                                  ADDWI                        29856
                                  PEEK                         
                                  MIDI                         
                                  STW                          _updateAudio_n               ; n = get("MIDI_NOTE", peek(@inotes + (audmarch.hi AND 3)))

                                  MOVQB                        sndChannel + 1, 1
                                  MOVWA                        _updateAudio_n, sndFrequency
                                  MOVQW                        sndVolume, 63
                                  MOVQW                        sndWaveType, 3
                                  SoundOnV                                                  ; sound on, 1, n, 63, 3

                                  CALLI                        _endif_0x0065
_elseif_0x0064                    LDW                          _updateAudio_i
                                  SUBI                         1
                                  STW                          intSrcA
                                  LDI                          4
                                  IntMin                       
                                  XORBA                        _audmarch
                                  JNE                          _endif_0x0065                ; elseif audmarch.lo = min(i - 1, 4)

                                  LDI                          0
                                  FREQI                        0                            ; sound off, 1

_endif_0x0065                     LD                           _audmarch
                                  CALLI                        _page_0x1aa0
_page_0x1aa0                      SUBW                         _updateAudio_i
                                  JLT                          _else_0x0066                 ; if audmarch.lo >= i

                                  MOVQB                        _audmarch, 0                 ; audmarch.lo = 0

                                  INC                          _audmarch + 1                ; inc audmarch.hi

                                  CALLI                        _endif_0x0067                ; else

_else_0x0066                      INC                          _audmarch                    ; inc audmarch.lo

_endif_0x0067                     LD                           _audshoot + 1
                                  JumpFalse                    _endif_0x0068                ; if (audshoot.hi)

                                  LD                           _audshoot
                                  LSLW                         
                                  ADDWI                        32672
                                  DEEKA                        _updateAudio_n               ; n = deek(PBF_LUT + (audshoot.lo LSL 1))

                                  LDWI                         32736
                                  ADDBA                        _audshoot
                                  PEEK                         
                                  STW                          _updateAudio_v               ; v = peek(PBV_LUT + audshoot.lo)

                                  MOVQB                        sndChannel + 1, 2
                                  MOVWA                        _updateAudio_n, sndFrequency
                                  MOVWA                        _updateAudio_v, sndVolume
                                  MOVQW                        sndWaveType, 3
                                  SoundOnV                                                  ; sound on, 2, n, v, 3

                                  MOVQB                        sndChannel + 1, 3
                                  MOVWA                        _updateAudio_n, sndFrequency
                                  MOVWA                        _updateAudio_v, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 3, n, v, 0

                                  INC                          _audshoot                    ; inc audshoot.lo

                                  XORBK                        _audshoot, 32
                                  JNE                          _endif_0x0069                ; if audshoot.lo = PBL_SIZ

                                  CALLI                        _disableShootSound           ; gosub disableShootSound

_endif_0x0068                     LDW                          _saucerxy
                                  ORW                          _sefreq
                                  JumpFalse                    _endif_0x006a                ; if (saucerxy OR sefreq)

                                  LDW                          _satimer
                                  LSLW                         
                                  ADDWI                        32416
                                  CALLI                        _page_0x1ba0
_page_0x1ba0                      DEEK                         
                                  SUBW                         _sefreq
                                  STW                          _updateAudio_n               ; n = deek(SCF_LUT + (satimer LSL 1)) - sefreq

                                  MOVQB                        sndChannel + 1, 4
                                  MOVWA                        _updateAudio_n, sndFrequency
                                  MOVQW                        sndVolume, 32
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 4, n, 32, 2

                                  INC                          _satimer                     ; inc satimer.lo

                                  CMPI                         _satimer, 12
                                  JNE                          _if_0x006b
                                  MOVQW                        _satimer, 0                  ; if satimer = SCF_SIZ then satimer = 0

_if_0x006b                        LDW                          _sexplode
                                  JumpFalse                    _endif_0x006c                ; if (sexplode)

                                  MOVQW                        _sefreq, 1                   ; sefreq = 1

                                  LDI                          0
                                  STW                          _sexplode
                                  STW                          _saucerxy                    ; sexplode = 0 : saucerxy = sexplode

_endif_0x006c                     LDW                          _sefreq
                                  JumpFalse                    _endif_0x006d                ; if (sefreq)

                                  MOVQB                        sndChannel + 1, 3
                                  MOVWA                        _updateAudio_n, mathShift
                                  Lsr4bit                      giga_vAC
                                  STW                          sndFrequency
                                  MOVWA                        _sevol, sndVolume
                                  MOVQW                        sndWaveType, 0
                                  SoundOnV                                                  ; sound on, 3, n LSR 4, sevol, 0

                                  LDW                          _satimer
                                  JNE                          _endif_0x006e                ; if satimer = 0

                                  LDW                          _sefreq
                                  ADDWI                        600
                                  STW                          _sefreq                      ; sefreq = sefreq + 600

                                  SUBVI                        _sevol, 15                   ; sevol = sevol - 15

                                  LDW                          _sevol
                                  JGT                          _endif_0x006f                ; if sevol <= 0

                                  CALLI                        _page_0x1ca0
_page_0x1ca0                      MOVQW                        _sevol, 60                   ; sevol = 60

                                  MOVQW                        _sefreq, 0                   ; sefreq = 0

                                  LDI                          0
                                  FREQI                        2                            ; sound off, 3

                                  LDI                          0
                                  FREQI                        3                            ; sound off, 4

_endif_0x006a                     LDW                          _iexplode
                                  ORW                          _aviexplode
                                  JumpFalse                    _endif_0x0070                ; if (iexplode OR aviexplode)

                                  LDI                          63
                                  SUBW                         _aviexplode
                                  STW                          _updateAudio_v               ; v = 63 - aviexplode

                                  MOVQB                        sndChannel + 1, 2
                                  LD                           _itimer + 1
                                  LSLW                         
                                  ADDWI                        32448
                                  DEEKA                        sndFrequency
                                  MOVWA                        _updateAudio_v, sndVolume
                                  MOVQW                        sndWaveType, 3
                                  SoundOnV                                                  ; sound on, 2, deek(IEF_LUT + (itimer.hi LSL 1)), v, 3

                                  INC                          _itimer + 1                  ; inc itimer.hi

                                  XORBK                        _itimer + 1, 3
                                  JNE                          _if_0x0071
                                  MOVQB                        _itimer + 1, 0               ; if itimer.hi = IEF_SIZ then itimer.hi = 0

_if_0x0071                        ADDVI                        _aviexplode, 2               ; aviexplode = aviexplode + 2

                                  LDW                          _aviexplode
                                  SUBI                         64
                                  JLT                          _endif_0x0072                ; if aviexplode >= 64

                                  LDI                          0
                                  ST                           _itimer + 1
                                  STW                          _aviexplode                  ; itimer.hi = 0 : aviexplode = itimer.hi

                                  LDI                          0
                                  FREQI                        1                            ; sound off, 2

_endif_0x0070                     Return                                                    ; endproc

_disableShootSound                PUSH                         
                                  MOVQW                        _audshoot, 0                 ; audshoot = 0

                                  LDI                          0
                                  CALLI                        _page_0x1da0
_page_0x1da0                      FREQI                        1                            ; sound off, 2

                                  LDI                          0
                                  FREQI                        2                            ; sound off, 3

                                  Return                                                    ; return

_drawScore                        PUSH                                                      ; proc drawScore

                                  LDWI                         29111
                                  STW                          bcdSrcAddr
                                  LDWI                         29117
                                  STW                          bcdDstAddr
                                  LDI                          6
                                  BcdAdd                                                    ; bcdadd @pointsBCD, @scoreBCD, SCORE_LEN

                                  MOVQW                        _drawScore_char, 31          ; char = SCORE_X

                                  MOVQW                        _drawScore_i, 0              ; for i=0 to SCORE_LEN-1

_next_0x0073                      LDWI                         29122
                                  SUBW                         _drawScore_i
                                  PEEK                         
                                  ADDI                         26
                                  STW                          blitId
                                  MOVB                         _drawScore_char, blitXY
                                  MOVQB                        blitXY + 1, 9
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@scoreBCD + SCORE_LEN-1 - i), char, SCORE_Y

                                  ADDVI                        _drawScore_char, 6           ; char = char + 6

                                  ForNextInc                   _drawScore_i _next_0x0073 5  ; next i

                                  LDWI                         0x71c2
                                  STW                          bcdSrcAddr
                                  LDWI                         0x7de5
                                  STW                          bcdDstAddr
                                  LDI                          6
                                  BcdCmp                       
                                  XORI                         1
                                  JNE                          _endif_0x0074                ; if bcdcmp(@scoreBCD+(SCORE_LEN-1), @highBCD+(SCORE_LEN-1), SCORE_LEN) = 1

                                  LDWI                         29117
                                  STW                          bcdSrcAddr
                                  LDWI                         32224
                                  STW                          bcdDstAddr
                                  CALLI                        _page_0x1ea0
_page_0x1ea0                      LDI                          6
                                  BcdCpy                                                    ; bcdcpy @scoreBCD, @highBCD, SCORE_LEN

                                  CALLI                        _drawHigh                    ; call drawHigh

_endif_0x0074                     Return                                                    ; endproc

_drawHigh                         PUSH                                                      ; proc drawHigh

                                  MOVQW                        _drawHigh_char, 97           ; char = HIGH_X

                                  MOVQW                        _drawHigh_i, 0               ; for i=0 to SCORE_LEN-1

_next_0x0075                      LDWI                         32229
                                  SUBW                         _drawHigh_i
                                  PEEK                         
                                  ADDI                         26
                                  STW                          blitId
                                  MOVB                         _drawHigh_char, blitXY
                                  MOVQB                        blitXY + 1, 9
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@highBCD + SCORE_LEN-1 - i), char, HIGH_Y

                                  ADDVI                        _drawHigh_char, 6            ; char = char + 6

                                  ForNextInc                   _drawHigh_i _next_0x0075 5   ; next i

                                  Return                                                    ; endproc

_drawLevel                        PUSH                                                      ; proc drawLevel

                                  MOVQW                        blitId, 36
                                  MOVQB                        blitXY, 2
                                  MOVQB                        blitXY + 1, 9
                                  DrawBlit                                                  ; blit NoFlip, Level, LEVEL_X, LEVEL_Y

                                  MOVQW                        _drawLevel_char, 8           ; char = LEVEL_X + 6

                                  MOVQW                        _drawLevel_i, 0              ; for i=0 to LEVEL_LEN-4

_next_0x0076                      LDWI                         31905
                                  SUBW                         _drawLevel_i
                                  PEEK                         
                                  ADDI                         26
                                  STW                          blitId
                                  MOVB                         _drawLevel_char, blitXY
                                  MOVQB                        blitXY + 1, 9
                                  DrawBlit                                                  ; blit NoFlip, Digit + peek(@levelBCD + LEVEL_LEN-4 - i), char, LEVEL_Y

                                  ADDVI                        _drawLevel_char, 6           ; char = char + 6

                                  CALLI                        _page_0x1fa0
_page_0x1fa0                      ForNextIncOne                _drawLevel_i _next_0x0076    ; next i

                                  Return                                                    ; endproc

_drawSaucerScore                  PUSH                                                      ; proc drawSaucerScore, xy

                                  MOVWA                        _drawSaucerScore_xy, _drawSaucerScore_char                                                                               ; char = xy

                                  MOVQW                        _drawSaucerScore_i, 0        ; for i=0 to SAUCER_LEN-3

_next_0x0077                      LDWI                         31650
                                  SUBW                         _drawSaucerScore_i
                                  PEEK                         
                                  ADDI                         40
                                  STW                          blitId
                                  MOVB                         _drawSaucerScore_char, blitXY
                                  LD                           _drawSaucerScore_char + 1
                                  ADDI                         8
                                  ST                           blitXY + 1
                                  DrawBlit                                                  ; blit NoFlip, DigitS + peek(@saucerBCD + SAUCER_LEN-3 - i), char.lo, char.hi

                                  ADDBI                        _drawSaucerScore_char, 4     ; char.lo = char.lo + 4

                                  ForNextInc                   _drawSaucerScore_i _next_0x0077 2                                                                                        ; next i

                                  Return                                                    ; endproc

_drawLives                        PUSH                                                      ; proc drawLives

                                  MOVQW                        _drawLives_i, 1              ; i = 1

                                  MOVQW                        _drawLives_plife, 136        ; plife = LIFE_X

                                  CALLI                        _wcond_0x0078                ; while i <= livesLevel.hi

_while_0x0079                     MOVQW                        blitId, 24
                                  MOVB                         _drawLives_plife, blitXY
                                  MOVQB                        blitXY + 1, 12
                                  DrawBlit                                                  ; blit NoFlip, PLife, plife, LIFE_Y

                                  ADDVI                        _drawLives_plife, 8          ; plife = plife + 8

                                  INC                          _drawLives_i                 ; inc i.lo

_wcond_0x0078                     LDW                          _drawLives_i
                                  SUBBA                        _livesLevel + 1
                                  TLE                          giga_vAC
                                  JumpTrue                     _while_0x0079                ; wend

                                  CALLI                        _wcond_0x007a                ; while i <= MAX_LIVES

_while_0x007b                     MOVQW                        blitId, 25
                                  CALLI                        _page_0x20a0
_page_0x20a0                      MOVB                         _drawLives_plife, blitXY
                                  MOVQB                        blitXY + 1, 12
                                  DrawBlit                                                  ; blit NoFlip, PBlk, plife, LIFE_Y

                                  ADDVI                        _drawLives_plife, 8          ; plife = plife + 8

                                  INC                          _drawLives_i                 ; inc i.lo

_wcond_0x007a                     LDW                          _drawLives_i
                                  SUBI                         3
                                  TLE                          giga_vAC
                                  JumpTrue                     _while_0x007b                ; wend

                                  Return                                                    ; endproc

_initInvaders                     PUSH                                                      ; proc initInvaders

                                  LDI                          0
                                  STW                          _initInvaders_index
                                  STW                          _initInvaders_iprev
                                  STW                          _initInvaders_inext          ; index = 0 : iprev = index : inext = iprev

                                  MOVQW                        _initInvaders_j, 4           ; for j=INVADERS_J - 1 downto 0

_next_0x007c                      MOVQW                        _initInvaders_i, 0           ; for i=0 to INVADERS_I - 1

_next_0x007d                      LDW                          _initInvaders_index
                                  JNE                          _else_0x007e                 ; if index = 0

                                  LDWI                         23202
                                  STW                          _initInvaders_iprev          ; iprev = @istruct(INVADERS_J * INVADERS_I - 1, 0)

                                  CALLI                        _endif_0x007f                ; else

_else_0x007e                      LDW                          _initInvaders_index
                                  SUBI                         1
                                  STW                          memIndex0
                                  MOVQW                        memIndex1, 0
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  STW                          _initInvaders_iprev          ; iprev = addr(istruct(index - 1, 0))

_endif_0x007f                     CMPI                         _initInvaders_index, 49
                                  JNE                          _else_0x0080                 ; if index = (INVADERS_J * INVADERS_I) - 1

                                  LDWI                         28326
                                  STW                          _initInvaders_inext          ; inext = @istruct(0, 0)

                                  CALLI                        _endif_0x0081                ; else

_else_0x0080                      LDW                          _initInvaders_index
                                  ADDI                         1
                                  STW                          memIndex0
                                  MOVQW                        memIndex1, 0
                                  CALLI                        _page_0x21a0
_page_0x21a0                      LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  STW                          _initInvaders_inext          ; inext = addr(istruct(index + 1, 0))

_endif_0x0081                     MOVWA                        _initInvaders_index, memIndex0
                                  MOVQW                        memIndex1, 0
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  STW                          memValue
                                  MOVWA                        _initInvaders_j, memIndex0
                                  MOVWA                        _initInvaders_i, memIndex1
                                  LDWI                         0x59a2
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; iaddress(j, i) = addr(istruct(index, 0))

                                  MOVWA                        _initInvaders_j, memIndex0
                                  MOVWA                        _initInvaders_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  DEEK                         
                                  ANDWI                        0x7fff
                                  STW                          _initInvaders_invader        ; invader = invaders(j, i) AND &h7FFF

                                  MOVWA                        _initInvaders_invader, memValue
                                  MOVWA                        _initInvaders_j, memIndex0
                                  MOVWA                        _initInvaders_i, memIndex1
                                  LDWI                         0x70a4
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; invaders(j, i) = invader

                                  LDW                          _initInvaders_j
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  LSLW                         
                                  ANDI                         0x70
                                  ORBA                         _initInvaders_invader
                                  STW                          0xe8
                                  ANDBK                        _initInvaders_i, 0x0f
                                  ORW                          0xe8
                                  ST                           _initInvaders_invader        ; invader.lo = invader.lo OR ((j LSL 4) AND &h70) OR (i AND &h0F)

                                  CALLI                        _page_0x22a0
_page_0x22a0                      MOVWA                        _initInvaders_invader, memValue
                                  MOVWA                        _initInvaders_index, memIndex0
                                  MOVQW                        memIndex1, 0
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; istruct(index, 0) = invader

                                  LDARRB                       _initInvaders_i, 0x6fa4
                                  STW                          0xe8
                                  LDARRB                       _initInvaders_j, 0x7aa0
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  ADDW                         0xe8
                                  STW                          memValue
                                  MOVWA                        _initInvaders_index, memIndex0
                                  MOVQW                        memIndex1, 1
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; istruct(index, 1) = ixpos(i) + (iypos(j) LSL 8)

                                  MOVWA                        _initInvaders_iprev, memValue
                                  MOVWA                        _initInvaders_index, memIndex0
                                  MOVQW                        memIndex1, 2
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; istruct(index, 2) = iprev

                                  MOVWA                        _initInvaders_inext, memValue
                                  MOVWA                        _initInvaders_index, memIndex0
                                  MOVQW                        memIndex1, 3
                                  LDWI                         0x062c
                                  CALLI                        convert16Arr2d
                                  DOKEA                        memValue                     ; istruct(index, 3) = inext

                                  INC                          _initInvaders_index          ; inc index.lo

                                  CALLI                        _page_0x23a0
_page_0x23a0                      ForNextInc                   _initInvaders_i _next_0x007d 9                                                                                           ; next i

                                  ForNextDJGE                  _initInvaders_j _next_0x007c ; next j

                                  MOVQW                        _initInvaders_i, 0           ; for i=0 to NUM_IBULLETS - 1

_next_0x0082                      LDI                          0
                                  STARRW                       _initInvaders_i, 0x6ea0      ; ibxy(i) = 0

                                  ForNextInc                   _initInvaders_i _next_0x0082 2                                                                                           ; next i

                                  LDWI                         28326
                                  STW                          _icurrent                    ; icurrent = @istruct(0, 0)

                                  MOVWA                        _icurrent, _ishoot           ; ishoot = icurrent

                                  Return                                                    ; endproc

_initVars                         PUSH                                                      ; proc initVars

                                  ResetVars                    0x4a                         ; clear vars, @timeTicks

                                  Return                                                    ; endproc

_startLevel                       PUSH                                                      ; proc startLevel

                                  SoundAllOff                                               ; sound off

                                  LDWI                         29111
                                  STW                          bcdDstAddr
                                  LDI                          0
                                  BcdInt                                                    ; bcdint @pointsBCD, 0

                                  LDWI                         31648
                                  STW                          bcdDstAddr
                                  LDI                          0
                                  BcdInt                                                    ; bcdint @saucerBCD, 0

                                  LDWI                         31904
                                  STW                          bcdDstAddr
                                  LD                           _delayLevel
                                  BcdInt                                                    ; bcdint @levelBCD, delayLevel.lo

                                  MOVQW                        _ii, 0
                                  MOVQW                        _jj, 4                       ; ii = 0 : jj = INVADERS_J - 1

                                  LDI                          2
                                  STW                          _iflip
                                  CALLI                        _page_0x24a0
_page_0x24a0                      STW                          _xflip                       ; iflip = 2 : xflip = iflip

                                  CMPI                         _livesLevel, 24
                                  JLE                          _if_0x0083
                                  MOVQB                        _livesLevel, 0               ; if livesLevel.lo > LEVEL_X6 then livesLevel.lo = 0

_if_0x0083                        MOVQW                        _ixorigin, 1
                                  LDI                          56
                                  ADDBA                        _livesLevel
                                  STW                          _iyorigin                    ; ixorigin = IORIGIN_X : iyorigin = IORIGIN_Y + livesLevel.lo

                                  ClearVertBlinds                                           ; cls

                                  CALLI                        _drawScore                   ; call drawScore

                                  CALLI                        _drawHigh                    ; call drawHigh

                                  CALLI                        _drawLives                   ; call drawLives

                                  CALLI                        _drawLevel                   ; call drawLevel

                                  CALLI                        _drawBarriers                ; call drawBarriers

                                  CALLI                        _initInvaders                ; call initInvaders

                                  CMPI                         _delayLevel, 100
                                  JLT                          _else_0x0084                 ; if delayLevel.lo >= 100

                                  CALLI                        _easterEgg                   ; call easterEgg

                                  CALLI                        _endif_0x0085                ; else

_else_0x0084                      CALLI                        _uneasterEgg                 ; call uneasterEgg

_endif_0x0085                     Return                                                    ; endproc

_resetLevel                       PUSH                                                      ; proc resetLevel

                                  LDWI                         768
                                  STW                          _livesLevel                  ; livesLevel = 3*256 + 0

                                  LDWI                         7936
                                  STW                          _delayLevel                  ; delayLevel = 31*256 + 0

                                  LDWI                         29117
                                  STW                          bcdDstAddr
                                  LDI                          0
                                  BcdInt                                                    ; bcdint @scoreBCD, 0

                                  MOVQW                        _sevol, 60                   ; sevol = 60

                                  MOVQW                        _px, 1
                                  MOVQW                        _py, 114                     ; px = PLAYER_X : py = PLAYER_Y

                                  CALLI                        _uneasterEgg                 ; call uneasterEgg

                                  Return                                                    ; endproc

                                  CALLI                        _initSystem
_initSystem                       PUSH                                                      ; proc initSystem

                                  MOVQW                        graphicsMode, 2
                                  ScanlineMode                                              ; mode 2

                                  MOVQW                        fgbgColour, 0                ; set FGBG_COLOUR, 0

                                  Return                                                    ; endproc

_easterEgg                        PUSH                                                      ; proc easterEgg

                                  MOVQW                        _easterEgg_vaddr, 127        ; vaddr = &h7F

                                  LDWI                         256
                                  STW                          _easterEgg_vtable
                                  LDWI                         494
                                  STW                          0xd8
                                  MOVQW                        0xda, 2                      ; for vtable=&h0100 to &h01EE step 2

_next_0x0086                      LDW                          _easterEgg_vtable
                                  POKEA                        _easterEgg_vaddr             ; poke vtable, vaddr

                                  DECW                         _easterEgg_vaddr             ; dec vaddr

                                  ForNextFarVarAdd             _easterEgg_vtable _next_0x0086 0xd8 0xda                                                                                 ; next vtable

                                  Return                                                    ; endproc

_uneasterEgg                      PUSH                                                      ; proc uneasterEgg

                                  MOVQW                        _uneasterEgg_vaddr, 8        ; vaddr = &h08

                                  LDWI                         256
                                  STW                          _uneasterEgg_vtable
                                  LDWI                         494
                                  STW                          0xd8
                                  MOVQW                        0xda, 2                      ; for vtable=&h0100 to &h01EE step 2

_next_0x0087                      LDW                          _uneasterEgg_vtable
                                  POKEA                        _uneasterEgg_vaddr           ; poke vtable, vaddr

                                  INC                          _uneasterEgg_vaddr           ; inc vaddr.lo

                                  ForNextFarVarAdd             _uneasterEgg_vtable _next_0x0087 0xd8 0xda                                                                               ; next vtable

                                  Return                                                    ; endproc

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x51d6
convert16Arr2d                    EQU     0x4edc
resetVars                         EQU     0x51a0
integerMin                        EQU     0x50a1
lsr4bit                           EQU     0x4fa4
scanlineMode                      EQU     0x4ef5
waitVBlank                        EQU     0x4fc4
resetVideoFlags                   EQU     0x4ee3
initClearFuncs                    EQU     0x4fd0
clearVertBlinds                   EQU     0x52c8
drawBlit_                         EQU     0x50b0
drawBlit                          EQU     0x4fb9
drawBlitX                         EQU     0x4fae
soundAllOff                       EQU     0x4fde
soundOnV                          EQU     0x4fed
bcdAdd                            EQU     0x52a0
bcdInt                            EQU     0x51b0
bcdDigits                         EQU     0x50c6
bcdCmp                            EQU     0x50df
bcdCpy                            EQU     0x4eeb



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET


swpSrcAddr          EQU     register0
swpDstAddr          EQU     register1
swpTmpData          EQU     register2
swapCount           EQU     register3
swpTmpAddr          EQU     register8
cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        
regsAddr            EQU     giga_sysArg6                        


convert16Arr2d      DEEKR   memIndex0
                    ADDW    memIndex1
                    ADDW    memIndex1
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVars           LDI     giga_One
                    SUBW    varAddress
                    STW     varCount
                    LSRB    varCount                            
                    LDI     0
                    
resetV_loop         DOKEV+  varAddress
                    DBNE    varCount, resetV_loop
                    RET



intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11                          
bcdCarry            EQU     register12
bcdBorrow           EQU     register12                          
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


integerMin          STW     intSrcB
                    LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerMi_A
                    LDW     intSrcB
                    RET

integerMi_A         LDW     intSrcA
                    RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


lsr4bit             LDWI    SYS_LSRW4_50
                    STW     giga_sysFn
                    LDW     mathShift
                    SYS     50
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


waitVBlank          LD      giga_jiffiesTick
                    XORW    frameCountPrev
                    BEQ     waitVBlank
                    LD      giga_jiffiesTick
                    STW     frameCountPrev
                    RET


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET




blitId              EQU     register0
blitXY              EQU     register1
blitAddrs           EQU     register2

    
drawBlit_           ARRVW   blitId, _blitsLut_
                    DEEKA   blitAddrs                     
                    
drawB_loop          DEEKV+  blitAddrs
                    BEQ     drawB_exit
                    STW     giga_sysArg0
                    DEEKV+  blitAddrs
                    ADDW    blitXY
                    SYS     64
                    BRA     drawB_loop
                    
drawB_exit          RET


drawBlit            PUSH
                    LDWI    SYS_Sprite6_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET


drawBlitX           PUSH
                    LDWI    SYS_Sprite6x_v3_64
                    STW     giga_sysFn
                    CALLI   drawBlit_
                    POP
                    RET


midiId              EQU     register0
audioAddr           EQU     register1
waveType            EQU     register2
chnCount            EQU     register3
midiNote            EQU     register4                           
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


soundAllOff         LDI     0
                    FREQI   0                                   
                    FREQI   1                                   
                    FREQI   2                                   
                    FREQI   3                                   
                    RET


soundOnV            LSRB    sndFrequency                        
                    LDW     sndFrequency                        
                    FREQA   sndChannel + 1                      
                    LD      sndVolume
                    VOLA    sndChannel + 1
                    LD      sndWaveType
                    MODA    sndChannel + 1
                    RET


bcdAdd              ST      bcdLength
                    MOVQW   bcdCarry, 0
                    
bcdA_loop           PEEKV   bcdDstAddr                          
                    STW     bcdDstData
                    PEEKV+  bcdSrcAddr                          
                    ADDW    bcdDstData
                    ADDW    bcdCarry
                    STW     bcdDstData
                    SUBI    10                                  
                    BLT     bcdA_nc
                    STW     bcdDstData
                    LDI     1
                    BRA     bcdA_cont
          
bcdA_nc             LDI     0
                    
bcdA_cont           STW     bcdCarry
          
                    LDW     bcdDstData
                    POKEV+  bcdDstAddr                          
                    DBNE    bcdLength, bcdA_loop
                    RET



                    
bcdInt              STW     bcdValue
                    PUSH
                    LDW     bcdDstAddr
                    ADDI    4
                    STW     bcdDstAddr                          
                    MOVQW   bcdDigit, 0
                    LDWI    10000
                    CALLI   bcdDigits
                    LDWI    1000
                    CALLI   bcdDigits
                    LDI     100
                    CALLI   bcdDigits
                    LDI     10
                    CALLI   bcdDigits                           
                    POKEA   bcdValue
                    POP
                    RET


bcdDigits           STW     bcdMult
                    LDW     bcdValue

bcdD_index          SUBW    bcdMult
                    BLT     bcdD_cont
                    STW     bcdValue
                    INC     bcdDigit                            
                    BRA     bcdD_index
    
bcdD_cont           LDW     bcdDstAddr
                    POKEA   bcdDigit                            
                    DECWA   bcdDstAddr
                    MOVQB   bcdDigit, 0                         
                    RET                                         


bcdCmp              ST      bcdLength

bcdCmp_loop         PEEKV   bcdDstAddr                          
                    STW     bcdDstData
                    PEEKV   bcdSrcAddr                          
                    SUBW    bcdDstData
                    BGT     bcdC_gt
                    BLT     bcdC_lt
                    DECW    bcdDstAddr
                    DECW    bcdSrcAddr
                    DBNE    bcdLength, bcdCmp_loop              
                    LDI     0
                    RET

bcdC_gt             LDI     1
                    RET
                    
bcdC_lt             LDNI    1
                    RET                    


bcdCpy              ST      bcdLength

bcdCpy_loop         PEEKV+  bcdSrcAddr
                    POKEV+  bcdDstAddr
                    DBNE    bcdLength, bcdCpy_loop              
                    RET

