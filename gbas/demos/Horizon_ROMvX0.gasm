_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x26a0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_loop                             EQU                          0x02df
_254                              EQU                          0x0336
_253                              EQU                          0x0344
_191                              EQU                          0x0355
_127                              EQU                          0x035b
_calcPitch                        EQU                          0x0361
_next_0x0000                      EQU                          0x023a
_else_0x0001                      EQU                          0x0261
_endif_0x0002                     EQU                          0x0264
_next_0x0003                      EQU                          0x028b
_else_0x0004                      EQU                          0x0299
_endif_0x0005                     EQU                          0x029c
_else_0x0006                      EQU                          0x02ae
_endif_0x0007                     EQU                          0x02b4
_next_0x0008                      EQU                          0x0300
_repeat_0x0009                    EQU                          0x0312
_if_0x000a                        EQU                          0x0342
_if_0x000b                        EQU                          0x0353

; Constants
_horizonY                         EQU                          0x0020

; Global Variables
_y                                EQU                          0x0030
_x                                EQU                          0x0032
_i                                EQU                          0x0034
_j                                EQU                          0x0036
_a                                EQU                          0x0038
_pitch                            EQU                          0x003a
_yy                               EQU                          0x003c
_color1                           EQU                          0x003e
_color2                           EQU                          0x0040
_p                                EQU                          0x0042
_v                                EQU                          0x0044
_q                                EQU                          0x0046

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_lut_numericLabs                  EQU                          0x24f6
_lut_numericLabs                  DW                           254 253 191 127 0x0000
_lut_numericAddrs                 EQU                          0x24ee
_lut_numericAddrs                 DW                           0x0336 0x0344 0x0355 0x035b 

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  ClearVertBlinds                                           ; cls

                                  LDI                          0
                                  STW                          _y
                                  STW                          _x
                                  STW                          _i
                                  STW                          _j
                                  STW                          _a
                                  STW                          _pitch
                                  STW                          _yy                          ; y=0 : x=y : i=x : j=i : a=j : pitch=a : yy=pitch

                                  MOVQW                        _color1, 63
                                  MOVQW                        _color2, 3                   ; color1 = &h3F : color2 = &h03

                                  MOVQW                        _y, 119                      ; for y=119 &downto horizonY

_next_0x0000                      MOVWA                        _y, _yy                      ; yy = y

                                  CALLI                        _calcPitch                   ; gosub calcPitch

                                  LDW                          _y
                                  SUBI                         32
                                  ADDI                         40
                                  STW                          0xe8
                                  LDWI                         400
                                  STW                          giga_sysArg0
                                  MOVWA                        0xe8, giga_sysArg2
                                  CALLI                        divide16bit
                                  ANDI                         0x01
                                  JNE                          _else_0x0001                 ; if((400 / (y-horizonY+40)) AND 1) = 0

                                  LDW                          _color1
                                  XORW                         _color2
                                  STW                          _j                           ; j = color1 XOR color2

                                  CALLI                        _endif_0x0002                ; else

_else_0x0001                      MOVQW                        _j, 0                        ; j = 0

_endif_0x0002                     MOVQW                        giga_sysArg0, 80
                                  MOVWA                        _pitch, giga_sysArg2
                                  CALLI                        divide16bit
                                  MOVWA                        giga_sysArg4, _i             ; i = 80 % pitch

                                  LDW                          _y
                                  ADDI                         8
                                  MOVB                         giga_vAC, giga_vAC + 1
                                  MOVQB                        giga_vAC, 0
                                  STW                          _a                           ; a = ((y + 8) LSL 8)

                                  LDW                          _pitch
                                  ADDI                         159
                                  STW                          0xe8
                                  MOVQW                        _x, 0
                                  LDW                          _pitch
                                  ADDI                         159
                                  STW                          0xdc                         ; for x=0 to pitch + 159

_next_0x0003                      LDW                          _i
                                  JNE                          _else_0x0004                 ; if i = 0

                                  LDW                          _pitch
                                  SUBI                         1
                                  STW                          _i                           ; i = pitch - 1

                                  CALLI                        _endif_0x0005                ; else

_else_0x0004                      SUBVI                        _i, 1                        ; i = i - 1

_endif_0x0005                     LDW                          _i
                                  ADDW                         _i
                                  SUBW                         _pitch
                                  JLT                          _else_0x0006                 ; if i+i >= pitch

                                  LDW                          _color1
                                  XORW                         _j
                                  STW                          _p                           ; p = color1 XOR j

                                  CALLI                        _endif_0x0007                ; else

_else_0x0006                      LDW                          _color2
                                  XORW                         _j
                                  STW                          _p                           ; p = color2 XOR j

_endif_0x0007                     LDW                          _a
                                  ADDW                         _x
                                  POKEA                        _p                           ; poke a+x,p

                                  ForNextVarInc                _x _next_0x0003 0xdc         ; next x

                                  LDWI                         giga_videoTop
                                  STW                          register0
                                  LDW                          _y
                                  ADDW                         _y
                                  POKE                         register0                    ; set VIDEO_TOP, y+y

                                  ForNextDec                   _y _next_0x0000 32           ; next y

                                  LDWI                         giga_videoTop
                                  POKEI                        0                            ; set VIDEO_TOP, 0

                                  MOVQW                        _x, 0
                                  MOVQW                        _v, 8                        ; x=0 : v=8

_loop                             ANDBK                        _x, 0xff
                                  STW                          _i                           ; i = x AND 255

                                  MOVQW                        _j, 0                        ; j = 0

                                  LDWI                         496
                                  STW                          _q                           ; q = &h0100 + 240

                                  MOVQW                        _yy, 32                      ; yy = horizonY

                                  CALLI                        _calcPitch                   ; gosub calcPitch

                                  MOVWA                        _pitch, _y                   ; for y=pitch downto 0

                                  CALLI                        _next_0x0008
_next_0x0008                      ADDVW                        _i, _j                       ; j = j + i

                                  ForNextDJGE                  _y _next_0x0008              ; next y

                                  ADDVW                        _i, _i                       ; i = i + i

                                  LDWI                         321
                                  STW                          _p                           ; p = &h0101 + horizonY + horizonY

                                  WaitVBlank                                                ; wait

_repeat_0x0009                    LD                           _j + 1
                                  POKE                         _p                           ; poke p, j LSR 8

                                  ANDBK                        _j, 0xff
                                  ADDW                         _i
                                  STW                          _j                           ; j = i + (j AND 255)

                                  ADDVI                        _p, 4
                                  SUBW                         _q
                                  JLT                          _repeat_0x0009               ; p = p + 4 : until p >= q

                                  LD                           giga_buttonState
                                  STW                          numericLabel
                                  MOVQW                        defaultLabel, 0
                                  GosubNumeric                                              ; gosub get("BUTTON_STATE")

                                  ADDVW                        _v, _x                       ; x = x + v

                                  CALLI                        _loop                        ; goto loop

_254                              PUSH                         
                                  ADDVI                        _v, 1
                                  SUBI                         32
                                  JLE                          _if_0x000a
                                  MOVQW                        _v, 32                       ; v = v + 1 : if v > 32 then v = 32

_if_0x000a                        Return                                                    ; return

_253                              PUSH                         
                                  SUBVI                        _v, 1
                                  LDNI                         32
                                  SUBW                         _v
                                  JLE                          _if_0x000b
                                  LDNI                         32
                                  STW                          _v                           ; v = v - 1 : if v < -32 then v = -32

_if_0x000b                        Return                                                    ; return

_191                              PUSH                         
                                  MOVQW                        _v, 0
                                  Return                                                    ; v = 0 : return

_127                              PUSH                         
                                  MOVQW                        _v, 0
                                  Return                                                    ; v = 0 : return

_calcPitch                        PUSH                         
                                  LDW                          _yy
                                  ADDWI                        -23
                                  STW                          _pitch                       ; pitch = yy + (96 - 120 + 1)

                                  LDW                          _pitch
                                  ADDI                         1
                                  ANDWI                        0xfffe
                                  STW                          _pitch                       ; pitch = (pitch + 1) AND &hfffe

                                  Return                                                    ; return

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x22d6
divide16bit                       EQU     0x23d3
gosubNumericLabel                 EQU     0x24be
waitVBlank                        EQU     0x24a4
resetVideoFlags                   EQU     0x23a1
initClearFuncs                    EQU     0x24b0
clearVertBlinds                   EQU     0x23a9



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    
divide16bit         LDW     giga_sysArg0                        
                    XORW    giga_sysArg2                        
                    STW     mathSign
                    LDW     giga_sysArg0
                    BGE     divide16_pos0
                    NEGW    giga_sysArg0
                    
divide16_pos0       LDW     giga_sysArg2                     
                    BGE     divide16_pos1
                    NEGW    giga_sysArg2
                    
divide16_pos1       MOVQW   giga_sysFn, SYS_Divide_s16_vX_80
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     80
                    LDW     mathSign
                    BGE     divide16_exit
                    NEGW    giga_sysArg0
                    
divide16_exit       LDW     giga_sysArg0
                    RET


                    
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        DEEKV   lutIndex
                    BNE     gosubNL_cont                        
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                        
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    ADDBI   lutIndex, 2
                    BRA     gosubNL_loop                        
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                            
                    POP
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
waitVBlank          LD      giga_jiffiesTick
                    XORW    frameCountPrev
                    BEQ     waitVBlank
                    LD      giga_jiffiesTick
                    STW     frameCountPrev
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET

