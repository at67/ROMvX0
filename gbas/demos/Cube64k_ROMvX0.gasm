_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_10                               EQU                          0x0258
_20                               EQU                          0x025e
_25                               EQU                          0x0267
_30                               EQU                          0x0276
_35                               EQU                          0x0288
_40                               EQU                          0x029d
_45                               EQU                          0x02ac
_50                               EQU                          0x02b0
_60                               EQU                          0x02d2
_setup                            EQU                          0x02f4
_process                          EQU                          0x0348
_draw                             EQU                          0x03ad
_erase                            EQU                          0x0426
_254                              EQU                          0x0495
_253                              EQU                          0x04b6
_flip                             EQU                          0x04d8
_next_0x0000                      EQU                          0x0318
_next_0x0001                      EQU                          0x034c
_if_0x0002                        EQU                          0x04a2
_if_0x0003                        EQU                          0x04c4
_page_0x0300                      EQU                          0x0300
_page_0x0400                      EQU                          0x0400
_page_0x0500                      EQU                          0x0500

; Constants
_VideoTableStart                  EQU                          0x0130
_VideoTableEnd                    EQU                          0x01c0

; Global Variables
_videoTable                       EQU                          0x0030
_scanLine                         EQU                          0x0032
_pageFlip                         EQU                          0x0034
_K                                EQU                          0x0036
_X                                EQU                          0x0038
_M                                EQU                          0x003a
_N                                EQU                          0x003c
_I                                EQU                          0x003e
_A                                EQU                          0x0040
_B                                EQU                          0x0042
_L                                EQU                          0x0044
_F                                EQU                          0x0046
_U                                EQU                          0x0048
_R                                EQU                          0x004a
_S                                EQU                          0x004c
_C                                EQU                          0x004e
_i                                EQU                          0x0050
_seconds                          EQU                          0x0052
_jiffies                          EQU                          0x0054
_j                                EQU                          0x0056

; Local Variables

; Arrays
_P                                EQU                          0x7df0
_P                                DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_PP                               EQU                          0x7de0
_PP                               DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_Q                                EQU                          0x7dd0
_Q                                DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 
_QQ                               EQU                          0x7dc0
_QQ                               DW                           0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 

; Strings

; Constant Strings
_str_0x7dbd                       EQU                          0x7dbd
_str_0x7dbd                       DB                           1 ' ' 0
_str_0x7db8                       EQU                          0x7db8
_str_0x7db8                       DB                           3 '/60' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  LDWI                         304
                                  STW                          _videoTable                  ; videoTable = VideoTableStart

                                  MOVQW                        _scanLine, 0                 ; scanLine = &h00

                                  MOVQW                        _pageFlip, 0                 ; pageFlip = &h00

                                  LDI                          0
                                  STW                          _K
                                  STW                          _X
                                  STW                          _M
                                  STW                          _N
                                  STW                          _I
                                  STW                          _A
                                  STW                          _B
                                  STW                          _L
                                  STW                          _F                           ; K=0:X=K:M=X:N=M:I=N:A=I:B=A:L=B:F=L

                                  MOVQW                        graphicsMode, 3
                                  ScanlineMode                                              ; mode 3

                                  LDWI                         giga_videoTop
                                  POKEI                        238                          ; set VIDEO_TOP, 238

                                  ClearVertBlinds              
                                  LDWI                         -30720
                                  STW                          clsAddress
                                  ClearScreen                                               ; cls : cls &h8800

                                  LDWI                         giga_videoTop
                                  POKEI                        0                            ; set VIDEO_TOP, 0

_10                               MOVQW                        _U, 48
                                  CALLI                        _setup                       ; U=48:GOTO setup

_20                               PUSH                         
                                  LDW                          _K
                                  ADDW                         _L
                                  ADDW                         _F
                                  STW                          _R                           ; R=K+L+F

_25                               MOVWA                        _X, giga_sysArg0
                                  MOVWA                        _R, giga_sysArg2
                                  CALLI                        divide16bit
                                  ADDI                         80
                                  STARRW                       _I, 0x7df0                   ; P(I)=80+X/R

_30                               LDW                          _M
                                  SUBW                         _N
                                  STW                          giga_sysArg0
                                  MOVWA                        _R, giga_sysArg2
                                  CALLI                        divide16bit
                                  ADDI                         60
                                  STARRW                       _I, 0x7dd0                   ; Q(I)=60+(M-N)/R

_35                               LDARRW                       _I, 0x7df0
                                  STW                          0xe8
                                  LDI                          160
                                  SUBW                         0xe8
                                  STW                          memValue
                                  LDW                          _I
                                  ADDI                         4
                                  ARRW                         0x7df0
                                  DOKEA                        memValue                     ; P(I+4)=160-P(I)

_40                               LDARRW                       _I, 0x7dd0
                                  STW                          memValue
                                  LDW                          _I
                                  ADDI                         4
                                  ARRW                         0x7dd0
                                  DOKEA                        memValue                     ; Q(I+4)=Q(I)

_45                               INC                          _I
                                  Return                                                    ; INC I.lo:RETURN

_50                               PUSH                         
                                  LDARRW                       _A, 0x7df0
                                  STW                          drawLine_x1
                                  LDARRW                       _A, 0x7dd0
                                  ADDW                         _pageFlip
                                  STW                          drawLine_y1
                                  LDARRW                       _B, 0x7df0
                                  STW                          drawLine_x2
                                  LDARRW                       _B, 0x7dd0
                                  ADDW                         _pageFlip
                                  STW                          drawLine_y2
                                  DrawLine                                                  ; LINE P(A), Q(A)+pageFlip, P(B), Q(B)+pageFlip

                                  Return                                                    ; return

_60                               PUSH                         
                                  LDARRW                       _A, 0x7de0
                                  STW                          drawLine_x1
                                  LDARRW                       _A, 0x7dc0
                                  ADDW                         _pageFlip
                                  STW                          drawLine_y1
                                  LDARRW                       _B, 0x7de0
                                  STW                          drawLine_x2
                                  LDARRW                       _B, 0x7dc0
                                  ADDW                         _pageFlip
                                  STW                          drawLine_y2
                                  DrawLine                                                  ; LINE PP(A), QQ(A)+pageFlip, PP(B), QQ(B)+pageFlip

                                  Return                                                    ; return

_setup                            MOVQW                        _S, 45
                                  CALLI                        _page_0x0300
_page_0x0300                      MOVQW                        _C, 45
                                  MOVQW                        _F, 125                      ; S=45:C=45:F=125

                                  CALLI                        _process                     ; gosub process

                                  CALLI                        _draw                        ; gosub draw

                                  MOVQW                        _pageFlip, 128               ; pageFlip = &h80

                                  MOVQW                        giga_secondsTickLo, 0
                                  MOVQB                        giga_jiffiesTick, 0          ; set TIMER, 0

                                  MOVQW                        _i, 0                        ; for i=0 &to 100

_next_0x0000                      CALLI                        _254                         ; gosub 254

                                  ForNextInc                   _i _next_0x0000 100          ; next i

                                  MOVWA                        giga_secondsTickLo, _seconds ; seconds = get("TIMER")

                                  LD                           giga_jiffiesTick
                                  STW                          _jiffies                     ; jiffies = get("JIFFIES")

                                  MOVQB                        fgbgColour + 1, 15           ; set FG_COLOUR, &h0F

                                  LDW                          _seconds
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7dbd
                                  LDW                          _jiffies
                                  PrintAcInt16                 
                                  PrintString                  _str_0x7db8
                                  NewLine                                                   ; print seconds;" ";jiffies;"/60"

                                  HALT                                                      ; end

_process                          PUSH                         
                                  MOVQW                        _j, 0
_next_0x0001                      LDARRW                       _j, 0x7df0
                                  STARRW                       _j, 0x7de0
                                  LDARRW                       _j, 0x7dd0
                                  STARRW                       _j, 0x7dc0
                                  ForNextInc                   _j _next_0x0001 7            ; for j=0 &to 7 : PP(j)=P(j) : QQ(j)=Q(j) : next j

                                  MOVQW                        _I, 0
                                  MOVWA                        _U, giga_sysArg0
                                  STW                          giga_sysArg2
                                  CALLI                        multiply16bit
                                  STW                          _X                           ; I=0:X=U*U

                                  MOVWA                        _S, _K
                                  MOVWA                        _U, giga_sysArg0
                                  MOVWA                        _C, giga_sysArg2
                                  CALLI                        multiply16bit
                                  STW                          _M                           ; K=S:M=U*C

                                  MOVWA                        _C, _L
                                  MOVWA                        _U, giga_sysArg0
                                  MOVWA                        _S, giga_sysArg2
                                  CALLI                        multiply16bit
                                  STW                          _N
                                  CALLI                        _20                          ; L=C:N=U*S:GOSUB 20

                                  NEGW                         _L
                                  NEGW                         _N
                                  CALLI                        _20                          ; L=-L:N=-N:GOSUB 20

                                  NEGW                         _K
                                  NEGW                         _M
                                  CALLI                        _20                          ; K=-K:M=-M:GOSUB 20

                                  NEGW                         _L
                                  NEGW                         _N
                                  CALLI                        _20                          ; L=-L:N=-N:GOSUB 20

                                  Return                                                    ; return

_draw                             PUSH                         
                                  MOVQW                        _A, 0
                                  MOVQW                        _B, 1
                                  CALLI                        _50                          ; A=0:B=1:GOSUB 50

                                  MOVQW                        _A, 1
                                  MOVQW                        _B, 2
                                  CALLI                        _50                          ; A=1:B=2:GOSUB 50

                                  MOVQW                        _A, 2
                                  MOVQW                        _B, 3
                                  CALLI                        _50                          ; A=2:B=3:GOSUB 50

                                  MOVQW                        _A, 3
                                  MOVQW                        _B, 0
                                  CALLI                        _50                          ; A=3:B=0:GOSUB 50

                                  MOVQW                        _A, 4
                                  MOVQW                        _B, 5
                                  CALLI                        _50                          ; A=4:B=5:GOSUB 50

                                  MOVQW                        _A, 5
                                  MOVQW                        _B, 6
                                  CALLI                        _50                          ; A=5:B=6:GOSUB 50

                                  MOVQW                        _A, 6
                                  MOVQW                        _B, 7
                                  CALLI                        _50                          ; A=6:B=7:GOSUB 50

                                  MOVQW                        _A, 7
                                  MOVQW                        _B, 4
                                  CALLI                        _50                          ; A=7:B=4:GOSUB 50

                                  CALLI                        _page_0x0400
_page_0x0400                      MOVQW                        _A, 4
                                  MOVQW                        _B, 0
                                  CALLI                        _50                          ; A=4:B=0:GOSUB 50

                                  MOVQW                        _A, 5
                                  MOVQW                        _B, 1
                                  CALLI                        _50                          ; A=5:B=1:GOSUB 50

                                  MOVQW                        _A, 6
                                  MOVQW                        _B, 2
                                  CALLI                        _50                          ; A=6:B=2:GOSUB 50

                                  MOVQW                        _A, 7
                                  MOVQW                        _B, 3
                                  CALLI                        _50                          ; A=7:B=3:GOSUB 50

                                  Return                                                    ; return

_erase                            PUSH                         
                                  MOVQW                        _A, 0
                                  MOVQW                        _B, 1
                                  CALLI                        _60                          ; A=0:B=1:GOSUB 60

                                  MOVQW                        _A, 1
                                  MOVQW                        _B, 2
                                  CALLI                        _60                          ; A=1:B=2:GOSUB 60

                                  MOVQW                        _A, 2
                                  MOVQW                        _B, 3
                                  CALLI                        _60                          ; A=2:B=3:GOSUB 60

                                  MOVQW                        _A, 3
                                  MOVQW                        _B, 0
                                  CALLI                        _60                          ; A=3:B=0:GOSUB 60

                                  MOVQW                        _A, 4
                                  MOVQW                        _B, 5
                                  CALLI                        _60                          ; A=4:B=5:GOSUB 60

                                  MOVQW                        _A, 5
                                  MOVQW                        _B, 6
                                  CALLI                        _60                          ; A=5:B=6:GOSUB 60

                                  MOVQW                        _A, 6
                                  MOVQW                        _B, 7
                                  CALLI                        _60                          ; A=6:B=7:GOSUB 60

                                  MOVQW                        _A, 7
                                  MOVQW                        _B, 4
                                  CALLI                        _60                          ; A=7:B=4:GOSUB 60

                                  MOVQW                        _A, 4
                                  MOVQW                        _B, 0
                                  CALLI                        _60                          ; A=4:B=0:GOSUB 60

                                  MOVQW                        _A, 5
                                  MOVQW                        _B, 1
                                  CALLI                        _60                          ; A=5:B=1:GOSUB 60

                                  MOVQW                        _A, 6
                                  MOVQW                        _B, 2
                                  CALLI                        _60                          ; A=6:B=2:GOSUB 60

                                  MOVQW                        _A, 7
                                  MOVQW                        _B, 3
                                  CALLI                        _60                          ; A=7:B=3:GOSUB 60

                                  Return                                                    ; return

_254                              PUSH                         
                                  ADDVI                        _S, 5
                                  SUBI                         45
                                  JLT                          _if_0x0002
                                  LDNI                         40
                                  STW                          _S                           ; S = S + 5 : if S >= 45 then S = -40

_if_0x0002                        MOVQB                        fgbgColour + 1, 15
                                  CALLI                        _process
                                  CALLI                        _draw                        ; set FG_COLOUR, &h0F : gosub process : gosub draw

                                  CALLI                        _flip                        ; gosub flip

                                  MOVQB                        fgbgColour + 1, 32
                                  CALLI                        _erase                       ; set FG_COLOUR, &h20 : gosub erase

                                  Return                                                    ; return

_253                              PUSH                         
                                  SUBVI                        _S, 5
                                  LDNI                         45
                                  SUBW                         _S
                                  JLT                          _if_0x0003
                                  MOVQW                        _S, 40                       ; S = S - 5 : if S <= -45 then S = 40

_if_0x0003                        MOVQB                        fgbgColour + 1, 15
                                  CALLI                        _process
                                  CALLI                        _draw                        ; set FG_COLOUR, &h0F : gosub process : gosub draw

                                  CALLI                        _flip                        ; gosub flip

                                  MOVQB                        fgbgColour + 1, 32
                                  CALLI                        _erase                       ; set FG_COLOUR, &h20 : gosub erase

                                  Return                                                    ; return

_flip                             PUSH                         
                                  LDWI                         304
                                  STW                          _videoTable                  ; videoTable = VideoTableStart

                                  LDW                          _pageFlip
                                  ORI                          0x20
                                  STW                          _scanLine                    ; scanLine = pageFlip OR ((VideoTableStart - 0x0100)/2 + 8)

                                  MOVB                         _scanLine,giga_sysArg0       ; MOVB     _scanLine, giga_sysArg0
                                  MOVQB                        giga_sysArg1,(_VideoTableEnd-_VideoTableStart)/2                                                                         ; MOVQB   giga_sysArg1, (_VideoTableEnd - _VideoTableStart)/2
                                  LDW                          _videoTable                  ; LDW     _videoTable
                                  STW                          giga_sysArg2                 ; STW     giga_sysArg2
                                  LDWI                         SYS_OffsetVTableY_vX_36      ; LDWI    SYS_OffsetVTableY_vX_36
                                  STW                          giga_sysFn                   ; STW     giga_sysFn
                                  SYS                          36                           ; SYS     36

                                  CALLI                        _page_0x0500
_page_0x0500                      XORBI                        _pageFlip, 0x80              ; pageFlip = pageFlip XOR &h80

                                  Return                                                    ; return

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x85ac
multiply16bit                     EQU     0x84e5
divide16bit                       EQU     0x8628
scanlineMode                      EQU     0x84db
resetVideoFlags                   EQU     0x84ca
initClearFuncs                    EQU     0x84f1
clearScreen                       EQU     0x8574
clearVertBlinds                   EQU     0x85d5
clearCursorRow                    EQU     0x8703
clearCursorRow4x6                 EQU     0x8605
drawLine                          EQU     0x8726
drawLineExt                       EQU     0x87b2
printInit                         EQU     0x851b
printInit4x6                      EQU     0x84d2
printText                         EQU     0x8507
printDigit                        EQU     0x858d
printInt16                        EQU     0x8654
printChar                         EQU     0x8689
printChar4x6                      EQU     0x855c
printClip                         EQU     0x8546
printClip4x6                      EQU     0x8530
newLineScroll                     EQU     0x876b
newLineScroll4x6                  EQU     0x86bf



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET



mathX               EQU     giga_sysArg0
mathY               EQU     giga_sysArg2
mathSum             EQU     register12
mathRem             EQU     register12
mathMask            EQU     register13
mathSign            EQU     register14
mathQuot            EQU     register15
mathShift           EQU     register15
mathBase            EQU     register10
mathPow             EQU     register11
mathResult          EQU     register14


                    
multiply16bit       MOVQW   giga_sysFn, SYS_Multiply_s16_vX_66
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     66
                    RET


                    
divide16bit         LDW     giga_sysArg0                        
                    XORW    giga_sysArg2                        
                    STW     mathSign
                    LDW     giga_sysArg0
                    BGE     divide16_pos0
                    NEGW    giga_sysArg0
                    
divide16_pos0       LDW     giga_sysArg2                     
                    BGE     divide16_pos1
                    NEGW    giga_sysArg2
                    
divide16_pos1       MOVQW   giga_sysFn, SYS_Divide_s16_vX_80
                    MOVQW   giga_sysArg4, 0                     
                    MOVQW   giga_sysArg6, 1                     
                    SYS     80
                    LDW     mathSign
                    BGE     divide16_exit
                    NEGW    giga_sysArg0
                    
divide16_exit       LDW     giga_sysArg0
                    RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearScreen         PUSH
                    CALLI   initClearFuncs
                    MOVB    clsAddress + 1, giga_sysArg3
                    MOVQB   clsLines, giga_yres
                    
clearCS_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVB    clsAddress, giga_sysArg2
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clsLines, clearCS_loopy
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET



drawLine            PUSH                                        
                    LDI     1
                    STW     drawLine_dx1
                    STW     drawLine_dx2
                    STW     drawLine_dy1
                    MOVQW   drawLine_dy2, 0
    
                    LDW     drawLine_x2                         
                    SUBW    drawLine_x1
                    STW     drawLine_sx
                    ANDBK   drawLine_sx+1, 0x80
                    BEQ     drawL_dy
                    LDNI    1
                    STW     drawLine_dx1        
                    STW     drawLine_dx2                        
                    NEGW    drawLine_sx                         
                    
drawL_dy            LDW     drawLine_y2
                    SUBW    drawLine_y1
                    STW     drawLine_sy
                    STW     drawLine_h                          
                    ANDBK   drawLine_h+1, 0x80
                    BEQ     drawL_ext
                    
                    LDNI    1
                    STW     drawLine_dy1                        
                    NEGW    drawLine_sy                         
                    LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_ext           
                    MOVWA   drawLine_dy1, drawLine_dy2          
    
drawL_ext           CALLI   drawLineExt


drawLineExt         MOVB    drawLine_x1, drawLine_xy1
                    MOVB    drawLine_y1, drawLine_xy1 + 1
                    ADDBI   drawLine_xy1 + 1, 8                 
                    
                    MOVB    drawLine_x2, drawLine_xy2
                    MOVB    drawLine_y2, drawLine_xy2 + 1
                    ADDBI   drawLine_xy2 + 1, 8                 
                    
                    LDW     drawLine_sy
                    SUBW    drawLine_sx
                    BLE     drawL_num
                    MOVQW   drawLine_dx2, 0                     
                    XCHGB   drawLine_sx, drawLine_sy            
                    LDW     drawLine_h
                    BLE     drawL_num
                    MOVQW   drawLine_dy2, 1                     
    
drawL_num           LD      drawLine_sx
                    LSRB    giga_vAC
                    ADDI    1
                    STW     drawLine_num                        
                    STW     drawLine_count                      
                    
                    MOVB    drawLine_dy1, giga_vAC + 1
                    MOVQB   giga_vAC, 0
                    ADDW    drawLine_dx1
                    STW     drawLine_dxy1                       
    
                    MOVB    drawLine_dy2, giga_vAC + 1
                    MOVQB   giga_vAC, 0
                    ADDW    drawLine_dx2
                    STW     drawLine_dxy2                       
                    
                    MOVQW   giga_sysFn, SYS_DrawLine_vX_86      
                    SYS     86                                  
                    POP                                         
                    
                    RET





textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printInit4x6                        
                    LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET


printInit4x6        MOVWA   fgbgColour, giga_sysArg0
                    LDW     cursorXY
                    VTBL    giga_sysArg4                        
                    RET



                    
printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             

printT_char         PEEKV+  textStr             
                    BEQ     printT_exit                         
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    
printDigit          PUSH
                    STW     digitMult
                    LDW     textNum
printD_index        SUBW    digitMult
                    BLT     printD_cont
                    STW     textNum
                    INC     digitIndex
                    BRA     printD_index
    
printD_cont         LD      digitIndex
                    BEQ     printD_exit
                    ORI     0x30
                    CALLI   printChar
                    MOVQB   digitIndex, 0x30
printD_exit         POP
                    RET


                    
printInt16          PUSH
                    STW     textNum
                    CALLI   printInit
                    MOVQB   digitIndex, 0
                    LDW     textNum
                    BGE     printI16_pos
                    LDI     0x2D
                    CALLI   printChar
                    NEGW    textNum
    
printI16_pos        LDWI    10000
                    CALLI   printDigit
                    LDWI    1000
                    CALLI   printDigit
                    LDI     100
                    CALLI   printDigit
                    LDI     10
                    CALLI   printDigit
                    ORBK    textNum, 0x30
                    CALLI   printChar
                    POP
                    RET




                    
printChar           STW     textChr
                    CMPII   32, 132                             
                    BNE     printC_exit
                    ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     printChar4x6                        
                    FNT6X8  textFont, textChr
                    FLT6X8  textFont
                    MOVQB   textSlice, 0x05

printC_slice        LDW     textFont                            
                    LUP     0x00                                
                    ST      giga_sysArg2
                    SYS     134                                 
                    INC     textFont                            
                    INC     giga_sysArg4                        
                    DBNE    textSlice, printC_slice
                    
                    MOVQB   giga_sysArg2, 0
                    SYS     134                                 
                    INC     giga_sysArg4                        
                    
                    PUSH
                    CALLI   printClip
                    POP
                    
printC_exit         RET



                    
printChar4x6        FNT4X6  textFont, textChr
                    FLT4X6  textFont
                    MOVQB   giga_sysArg2, 3                     
                    LDW     giga_sysArg4
                    PRN4X6  textFont
                    ADDBI   giga_sysArg4, 4                     
                    PUSH
                    CALLI   printClip4x6
                    POP
                    
printC46_exit       RET


printClip           ADDBI   cursorXY, giga_xfont
                    CMPI    cursorXY, giga_xres - giga_xfont    
                    BLE     printCl_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                        
                    PUSH
                    CALLI   newLineScroll                       
                    POP
                    
printCl_exit        RET



printClip4x6        ADDBI   cursorXY, 4
                    CMPI    cursorXY, giga_xres - 4             
                    BLE     printCl46_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl46_exit                      
                    PUSH
                    CALLI   newLineScroll4x6                    
                    POP
                    
printCl46_exit      RET



                    
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, giga_yfont

clearCR_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll       ANDBK   miscFlags, MISC_ENABLE_FNT4X6_BIT
                    JNE     newLineScroll4x6                    
                    LDI     giga_CursorX                        
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                         
                    RET
                    
newLS_cont0         PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                         
                    ADDBI   cursorXY + 1, giga_yfont
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS_exit
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, giga_yfont            
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS_exit          CALLI   printInit                           
                    POP
                    RET



                    
clearCursorRow4x6   PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          
                    MOVB    fgbgColour, giga_sysArg1            
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        
                    MOVQW   clearLoop, 6

clearCR46_loopy     MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    SYS     54                                  
                    INC     giga_sysArg3                        
                    DBNE    clearLoop, clearCR46_loopy
                    CALLI   printInit                           
                    POP
                    RET


                    
newLineScroll4x6    LDI     0                                   
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS46_cont0                       
                    RET
                    
newLS46_cont0       PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS46_cont1                       
                    ADDBI   cursorXY + 1, 6
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS46_exit
                    MOVQB   cursorXY + 1, giga_yres - 6
                    
newLS46_cont1       CALLI   clearCursorRow4x6
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        
                    MOVQB   giga_sysArg0, 6                     
                    MOVQB   giga_sysArg1, giga_yres             
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   
                    
newLS46_exit        CALLI   printInit4x6                        
                    POP
                    RET

