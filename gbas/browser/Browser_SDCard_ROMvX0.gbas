_runtimePath_ "../runtime"
_runtimeStart_ &h7FFF
_codeRomType_ ROMvX0

module "../SymbolTable.m"

const sysArg0 = &h24
const sysArg7 = &h2B

'payload protocol: <isLast>, <length>, <payload 0...62>
'filename packet: <type>, <length>, <name>, <0> : <type> = 1:file or 2:dir
const MAX_FILES     = 100
const PAYLOAD_SIZE  = 63
const PROTOCOL_SIZE = 1 + 1 + PAYLOAD_SIZE
const PACKET_SIZE   = 1 + 1 + 12 + 1
const MAX_LINES     = 20

const CmdSDList  = 1
const CmdSDExec  = 2
const CmdSDOpen  = 3
const CmdSDClose = 4
const CmdSDBegin = 5
const CmdSDInit  = 6

const EntryFile  = 1
const EntryDir   = 2
const EntryError = 3


def commsAddr, commsSize, commsRetn, browserIdx, browserY, cursorY, cursOldY, isLast, length, runStrAddr, execRtn, waitRtn

runName$ = ""
execName$ = ""
pathName$ = ""

dim commsCmd%(PACKET_SIZE-1) = 0
dim buffer%(PROTOCOL_SIZE-1) = 0
dim browser%(MAX_FILES-1, PACKET_SIZE-1)


restart:

gosub initialise
gosub initSDComms
gosub beginSDCard
gosub openSDCard
    
repeat
    gosub listSDCard
    gosub loadDir
    gosub fillBrowser
until isLast

gosub closeSDCard
gosub printBrowser

f = 0
kk = 255
repeat
    wait

    gosub handleInput
    if execRtn then goto &restart

    inc f.lo
&forever
end


sendCommsCmd:
    asm
        LDWI    SYS_SendSerial1_v3_80
        STW     giga_sysFn
        LDW     _commsAddr
        STW     giga_sysArg0
        MOVQW   giga_sysArg2, 1
        LD      _commsSize
        LSLW
        LSLW
        LSLW
        STW     giga_sysArg3
        SYS     80
        STW     _commsRetn
    endasm
return


'simplified version of Loader, removes checksum, destination address, copying of buffer
'to destination address and visuals
loadDir:
    asm
        LDW     _NextByteIn_32
        STW     giga_sysFn
        LDWI    _buffer                 'buffer address
        STW     giga_sysArg4

loadD0: LDW     giga_sysArg4            'reset buffer
        STW     giga_sysArg0

        MOVQB   giga_sysArg3, 207       'scanline 207
        SYS     32                      'isLast, (0 or 1)
        
        PEEKV   giga_sysArg4            'read buffer[0]
        XORI    255
        JEQ     _loadD0                 'loop while idle

        MOVQB   giga_sysArg3, 219       'scanline 219
        SYS     32                      'length, (6 bits : 0..62)

        MOVQB   giga_sysArg3, 235       'scanline 235
        SYS     32                      'payload 0
        
        MOVQB   giga_sysArg3, 251       'scanline 251
        SYS     32                      'payload 1

        MOVQB   giga_sysArg4, 60        '60 payloads, (2-61)
        MOVQB   giga_sysArg3, 2         'scanline 2

loadD1: SYS     32                      'payload 2-61
        ADDBI   giga_sysArg3, 4
        DBNE    giga_sysArg4, _loadD1   'scanline end is 238
        
        MOVQB   giga_sysArg3, 185       'scanline 185
        SYS     32                      'payload 62
    endasm

    isLast = peek(@buffer)
    length = peek(@buffer + 1) AND 63    
return


fillBrowser:
    bIdx = 2

    if length = 0 then return
    if browserIdx = MAX_FILES then return
        
    repeat
        cIdx = 0
        
        repeat
            char = peek(@buffer + bIdx)
            poke addr(browser(browserIdx, cIdx)), char
            inc bIdx.lo
            inc cIdx.lo
        until char = 0

        inc browserIdx.lo
        if browserIdx = MAX_FILES then return
    until (bIdx - 2) = length
return


printBrowser:
    startY = max(min(browserY, browserIdx-MAX_LINES), 0)
    endY = min(browserY+(MAX_LINES-1), browserIdx-1)
    for i=startY &to endY
        strAddr = addr(browser(i, 0)) + 1
        strLen = peek(strAddr)
        isFile = peek(strAddr - 1)
        if (i - browserY) = cursorY
            if isFile = 1
                set FGBG_COLOUR, &h203F
            else
                set FGBG_COLOUR, &h202A
            endif
            runStrAddr = strAddr
        else
            if isFile = 1
                set FGBG_COLOUR, &h3F20
            else
                set FGBG_COLOUR, &h2A20
            endif
        endif
        ii = i - browserY 'multiply by 6 to get to correct row for font4x6
        if ii >= 0
            asm
                LD  _ii
                MULB6
                ST  cursorXY + 1
            endasm
            at 2
            print string$(strAddr);spc$(12 - strLen);
        endif
    next i
return


updateBrowser:
    startY = max(min(browserY, browserIdx-MAX_LINES), 0)

    prevY = startY + cursOldY
    prevAddr = addr(browser(prevY, 0)) + 1
    prevLen = peek(prevAddr)
    isFile = peek(prevAddr - 1)
    if isFile = 1
        set FGBG_COLOUR, &h3F20
    else
        set FGBG_COLOUR, &h2A20
    endif
    yy = prevY - startY 'multiply by 6 to get to correct row for font4x6
    asm
        LD  _yy
        MULB6
        ST  cursorXY + 1
    endasm
    at 2
    print string$(prevAddr);spc$(12 - prevLen);
    cursOldY = cursorY

    currY = startY + cursorY
    currAddr = addr(browser(currY, 0)) + 1
    currLen = peek(currAddr)
    isFile = peek(currAddr - 1)
    if isFile = 1
        set FGBG_COLOUR, &h203F
    else
        set FGBG_COLOUR, &h202A
    endif 
    yy = currY - startY 'multiply by 6 to get to correct row for font4x6
    asm
        LD  _yy
        MULB6
        ST  cursorXY + 1
    endasm
    at 2
    print string$(currAddr);spc$(12 - currLen);
    runStrAddr = currAddr
return


getLoaderNextByte:
    NextByteIn_32 = 0
    asm
        LDWI    SYS_LoaderNextByteIn_32
        STW     _NextByteIn_32
    endasm
return


openSDCard:
    poke @commsCmd, CmdSDOpen
    len = peek(@pathName$)
    commsSize = 1 + len + 1
    if len > 0
        for i=1 &to len + 1
            poke @commsCmd + i, peek(@pathName$ + i)
        next i
    else
        poke @commsCmd + 1, 0
    endif
    gosub sendCommsCmd
    
    'SDCard open can take a variable amount of time
    gosub waitSDCard
    
    pathName$ = ""
return


execApp:
    gosub initSDComms
    poke @commsCmd, CmdSDExec
    runName$ = string$(runStrAddr)
    len = peek(@runName$)
    for i=1 &to len + 1
        poke @commsCmd + i, peek(@runName$ + i)
    next i
    'print "Loading..."
    set FGBG_COLOUR, &hFF00 : cls INIT : cls : tfnt4x6 off
    commsSize = 1 + len + 1
    gosub sendCommsCmd
    'exec Loader, &h00A8
return


'repeat delay and auto repeat
handleInput:
    k = get("SERIAL_RAW")
    if k <> kk
        f = 0
        kk = k
        gosub k
    endif
    if f > 20
        if ((f LSR 1) AND 1)
            gosub k
        endif
    endif
return


'button A
127:    gosub execOrList
        return

'enter
10:     gosub execOrList
        return

'right
254:    browserY = browserY + MAX_LINES
        browserY = max(min(browserY, browserIdx-MAX_LINES), 0)
        gosub printBrowser
        return

'left
253:    browserY = browserY - MAX_LINES
        browserY = max(browserY, 0)
        gosub printBrowser
        return
     
'down     
251:    inc cursorY.lo
        if cursorY > min(browserIdx - 1, (MAX_LINES-1)) then cursorY = 0
        gosub updateBrowser
        return

'up
247:    dec cursorY
        if cursorY < 0 then cursorY = min(browserIdx - 1, (MAX_LINES-1))
        gosub updateBrowser
        return


'execute files, list directories
execOrList:
    entry = peek(runStrAddr - 1)
    if entry = EntryFile
        execRtn = 0
        gosub execApp
    endif
    if entry = EntryError
        execRtn = 2
        pathName$ = ""
    endif
    if entry = EntryDir
        execRtn = 1
        pathName$ = string$(runStrAddr)
    endif
return


waitSDCard:
    asm
        LDW     _NextByteIn_32
        STW     giga_sysFn

waitSD: MOVQW   giga_sysArg0, _waitRtn  'waitRtn address

        MOVQB   giga_sysArg3, 207       'scanline 207
        SYS     32                      'waitRtn result, (0:ready)
        
        LD      _waitRtn
        JNE     _waitSD                 'loop while busy
    endasm

    wait 2
return


'this command is used to break BabelFish out of it's game controller loop and start checking comms
initSDComms:
    commsSize = 1
    poke @commsCmd, CmdSDInit
    gosub sendCommsCmd
    wait
return


listSDCard:
    commsSize = 1
    poke @commsCmd, CmdSDList
    gosub sendCommsCmd
return


closeSDCard:
    commsSize = 1
    poke @commsCmd, CmdSDClose
    gosub sendCommsCmd
return


beginSDCard:
    commsSize = 1
    poke @commsCmd, CmdSDBegin
    gosub sendCommsCmd
    
    'SDCard begin can take a variable amount of time
    gosub waitSDCard
return


initialise:
    clear vars, @commsSize
    gosub getLoaderNextByte
    commsAddr = @commsCmd

    mode 2 : set FGBG_COLOUR, &h3F20 : cls INIT : cls : tfnt4x6 on
return
