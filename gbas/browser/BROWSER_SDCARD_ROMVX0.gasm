_startAddress_                    EQU                               0x0200

; Internal Variables
serialRawPrev                     EQU                               0x0081
frameCountPrev                    EQU                               0x00d6
register0                         EQU                               0x0082
register1                         EQU                               register0 + 0x02
register2                         EQU                               register0 + 0x04
register3                         EQU                               register0 + 0x06
register4                         EQU                               register0 + 0x08
register5                         EQU                               register0 + 0x0A
register6                         EQU                               register0 + 0x0C
register7                         EQU                               register0 + 0x0E
register8                         EQU                               register0 + 0x10
register9                         EQU                               register0 + 0x12
register10                        EQU                               register0 + 0x14
register11                        EQU                               register0 + 0x16
register12                        EQU                               register0 + 0x18
register13                        EQU                               register0 + 0x1A
register14                        EQU                               register0 + 0x1C
register15                        EQU                               register0 + 0x1E
fgbgColour                        EQU                               register0 + 0x20
cursorXY                          EQU                               register0 + 0x22
midiStream                        EQU                               register0 + 0x24
midiDelay                         EQU                               register0 + 0x26
miscFlags                         EQU                               register0 + 0x28
timerTick                         EQU                               register0 + 0x2A
timerPrev                         EQU                               register0 + 0x2C

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                               0x01
MISC_ENABLE_SCROLL_BIT            EQU                               0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                               0x04
MISC_DISABLE_CLIP_BIT             EQU                               0x08
MISC_WAIT_VBLANK_MSK              EQU                               0xfe
MISC_ENABLE_SCROLL_MSK            EQU                               0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                               0xfb
MISC_DISABLE_CLIP_MSK             EQU                               0xf7

; Internal Buffers
regsWorkArea                      EQU                               0x0000
textWorkArea                      EQU                               0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
_entryPoint_                      EQU                               0x0200
_restart                          EQU                               0x023e
_findLoader                       EQU                               0x0277
_sendCommsCmd                     EQU                               0x02d8
_loadDir                          EQU                               0x02f2
_loadD0                           EQU                               0x0305
_loadD1                           EQU                               0x032a
_fillBrowser                      EQU                               0x0347
_printBrowser                     EQU                               0x0395
_updateBrowser                    EQU                               0x0458
_getLoaderNextByte                EQU                               0x0526
_openSDCard                       EQU                               0x0531
_execApp                          EQU                               0x058c
_handleInput                      EQU                               0x05f6
_127                              EQU                               0x0632
_10                               EQU                               0x08a5
_254                              EQU                               0x08ab
_253                              EQU                               0x08cc
_251                              EQU                               0x08e0
_247                              EQU                               0x09a2
_execOrList                       EQU                               0x09bc
_waitSDCard                       EQU                               0x09fc
_waitSD                           EQU                               0x0aa4
_initSDComms                      EQU                               0x0ab9
_listSDCard                       EQU                               0x0aca
_closeSDCard                      EQU                               0x0ad8
_beginSDCard                      EQU                               0x0ae6
_initialise                       EQU                               0x0af7
_repeat_0x024a                    EQU                               0x024a
_repeat_0x026a                    EQU                               0x0264
_else_0x027b                      EQU                               0x0271
_repeat_0x0286                    EQU                               0x027b
_next_0x029f                      EQU                               0x0291
_endif_0x02e2                     EQU                               0x02c6
_page_0x0300                      EQU                               0x0300
_else_0x037a                      EQU                               0x0352
_repeat_0x0389                    EQU                               0x035b
_repeat_0x038d                    EQU                               0x035e
_else_0x03d1                      EQU                               0x038a
_next_0x0426                      EQU                               0x03cc
_page_0x0400                      EQU                               0x0400
_else_0x047e                      EQU                               0x040b
_endif_0x0483                     EQU                               0x0410
_else_0x048a                      EQU                               0x0417
_else_0x049f                      EQU                               0x0426
_endif_0x04a4                     EQU                               0x042b
_endif_0x04df                     EQU                               0x044d
_else_0x0556                      EQU                               0x04a2
_endif_0x055b                     EQU                               0x04a7
_page_0x0500                      EQU                               0x0500
_endif_0x05d9                     EQU                               0x0505
_next_0x0650                      EQU                               0x0559
_else_0x0673                      EQU                               0x0574
_endif_0x0678                     EQU                               0x0579
_next_0x06be                      EQU                               0x05b4
_page_0x0600                      EQU                               0x0600
_endif_0x0735                     EQU                               0x0616
_endif_0x075e                     EQU                               0x0630
_page_0x08a0                      EQU                               0x08a0
_else_0x07d8                      EQU                               0x08fa
_page_0x09a0                      EQU                               0x09a0
_else_0x0800                      EQU                               0x09b7
_endif_0x0827                     EQU                               0x09d1
_endif_0x0843                     EQU                               0x09e6
_endif_0x0862                     EQU                               0x09fa
_page_0x0aa0                      EQU                               0x0aa0
_page_0x0ba0                      EQU                               0x0ba0

; Constants
_sysArg0                          EQU                               0x0024
_sysArg7                          EQU                               0x002b
_MAX_FILES                        EQU                               0x0064
_PAYLOAD_SIZE                     EQU                               0x003f
_PROTOCOL_SIZE                    EQU                               0x0041
_PACKET_SIZE                      EQU                               0x000f
_CmdSDList                        EQU                               0x0001
_CmdSDExec                        EQU                               0x0002
_CmdSDOpen                        EQU                               0x0003
_CmdSDClose                       EQU                               0x0004
_CmdSDBegin                       EQU                               0x0005
_CmdSDInit                        EQU                               0x0006
_EntryFile                        EQU                               0x0001
_EntryDir                         EQU                               0x0002
_EntryError                       EQU                               0x0003

; Global Variables
_execAddr                         EQU                               0x0030
_commsAddr                        EQU                               0x0032
_commsSize                        EQU                               0x0034
_commsRetn                        EQU                               0x0036
_browserIdx                       EQU                               0x0038
_browserY                         EQU                               0x003a
_cursorY                          EQU                               0x003c
_cursOldY                         EQU                               0x003e
_isLast                           EQU                               0x0040
_length                           EQU                               0x0042
_runStrAddr                       EQU                               0x0044
_execRtn                          EQU                               0x0046
_waitRtn                          EQU                               0x0048
_f                                EQU                               0x004a
_kk                               EQU                               0x004c
_j                                EQU                               0x004e
_bIdx                             EQU                               0x0050
_cIdx                             EQU                               0x0052
_char                             EQU                               0x0054
_startY                           EQU                               0x0056
_endY                             EQU                               0x0058
_i                                EQU                               0x005a
_strAddr                          EQU                               0x005c
_strLen                           EQU                               0x005e
_isFile                           EQU                               0x0060
_prevY                            EQU                               0x0062
_prevAddr                         EQU                               0x0064
_prevLen                          EQU                               0x0066
_currY                            EQU                               0x0068
_currAddr                         EQU                               0x006a
_currLen                          EQU                               0x006c
_NextByteIn_32                    EQU                               0x006e
_len                              EQU                               0x0070
_k                                EQU                               0x0072
_entry                            EQU                               0x0074

; Local Variables

; Arrays
_commsCmd                         EQU                               0x7cef
_commsCmd                         DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_buffer                           EQU                               0x7cae
_buffer                           DB                                0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
_browser                          EQU                               0x0638
_browser                          DW                                0x79f1 0x79e2 0x79d3 0x79c4 0x79b5 0x79a6 0x78f1 0x78e2 0x78d3 0x78c4 0x78b5 0x78a6 0x77f1 0x77e2 0x77d3 0x77c4 0x77b5 0x77a6 0x76f1 0x76e2 0x76d3 0x76c4 0x76b5 0x76a6 0x75f1 0x75e2 0x75d3 0x75c4 0x75b5 0x75a6 0x74f1 0x74e2 0x74d3 0x74c4 0x74b5 0x74a6 0x73f1 0x73e2 0x73d3 0x73c4 0x73b5 0x73a6 0x72f1 0x72e2 0x72d3 0x72c4 0x72b5 0x72a6 0x71f1 0x71e2 0x71d3 0x71c4 0x71b5 0x71a6 0x70f1 0x70e2 0x70d3 0x70c4 0x70b5 0x70a6 0x6ff1 0x6fe2 0x6fd3 0x6fc4 0x6fb5 0x6fa6 0x6ef1 0x6ee2 0x6ed3 0x6ec4 0x6eb5 0x6ea6 0x6df1 0x6de2 0x6dd3 0x6dc4 0x6db5 0x6da6 0x6cf1 0x6ce2 0x6cd3 0x6cc4 0x6cb5 0x6ca6 0x6bf1 0x6be2 0x6bd3 0x6bc4 0x6bb5 0x6ba6 0x6af1 0x6ae2 0x6ad3 0x6ac4 0x6ab5 0x6aa6 0x69f1 0x69e2 0x69d3 0x69c4 
_browser_0x79f1                   EQU                               0x79f1
_browser_0x79e2                   EQU                               0x79e2
_browser_0x79d3                   EQU                               0x79d3
_browser_0x79c4                   EQU                               0x79c4
_browser_0x79b5                   EQU                               0x79b5
_browser_0x79a6                   EQU                               0x79a6
_browser_0x78f1                   EQU                               0x78f1
_browser_0x78e2                   EQU                               0x78e2
_browser_0x78d3                   EQU                               0x78d3
_browser_0x78c4                   EQU                               0x78c4
_browser_0x78b5                   EQU                               0x78b5
_browser_0x78a6                   EQU                               0x78a6
_browser_0x77f1                   EQU                               0x77f1
_browser_0x77e2                   EQU                               0x77e2
_browser_0x77d3                   EQU                               0x77d3
_browser_0x77c4                   EQU                               0x77c4
_browser_0x77b5                   EQU                               0x77b5
_browser_0x77a6                   EQU                               0x77a6
_browser_0x76f1                   EQU                               0x76f1
_browser_0x76e2                   EQU                               0x76e2
_browser_0x76d3                   EQU                               0x76d3
_browser_0x76c4                   EQU                               0x76c4
_browser_0x76b5                   EQU                               0x76b5
_browser_0x76a6                   EQU                               0x76a6
_browser_0x75f1                   EQU                               0x75f1
_browser_0x75e2                   EQU                               0x75e2
_browser_0x75d3                   EQU                               0x75d3
_browser_0x75c4                   EQU                               0x75c4
_browser_0x75b5                   EQU                               0x75b5
_browser_0x75a6                   EQU                               0x75a6
_browser_0x74f1                   EQU                               0x74f1
_browser_0x74e2                   EQU                               0x74e2
_browser_0x74d3                   EQU                               0x74d3
_browser_0x74c4                   EQU                               0x74c4
_browser_0x74b5                   EQU                               0x74b5
_browser_0x74a6                   EQU                               0x74a6
_browser_0x73f1                   EQU                               0x73f1
_browser_0x73e2                   EQU                               0x73e2
_browser_0x73d3                   EQU                               0x73d3
_browser_0x73c4                   EQU                               0x73c4
_browser_0x73b5                   EQU                               0x73b5
_browser_0x73a6                   EQU                               0x73a6
_browser_0x72f1                   EQU                               0x72f1
_browser_0x72e2                   EQU                               0x72e2
_browser_0x72d3                   EQU                               0x72d3
_browser_0x72c4                   EQU                               0x72c4
_browser_0x72b5                   EQU                               0x72b5
_browser_0x72a6                   EQU                               0x72a6
_browser_0x71f1                   EQU                               0x71f1
_browser_0x71e2                   EQU                               0x71e2
_browser_0x71d3                   EQU                               0x71d3
_browser_0x71c4                   EQU                               0x71c4
_browser_0x71b5                   EQU                               0x71b5
_browser_0x71a6                   EQU                               0x71a6
_browser_0x70f1                   EQU                               0x70f1
_browser_0x70e2                   EQU                               0x70e2
_browser_0x70d3                   EQU                               0x70d3
_browser_0x70c4                   EQU                               0x70c4
_browser_0x70b5                   EQU                               0x70b5
_browser_0x70a6                   EQU                               0x70a6
_browser_0x6ff1                   EQU                               0x6ff1
_browser_0x6fe2                   EQU                               0x6fe2
_browser_0x6fd3                   EQU                               0x6fd3
_browser_0x6fc4                   EQU                               0x6fc4
_browser_0x6fb5                   EQU                               0x6fb5
_browser_0x6fa6                   EQU                               0x6fa6
_browser_0x6ef1                   EQU                               0x6ef1
_browser_0x6ee2                   EQU                               0x6ee2
_browser_0x6ed3                   EQU                               0x6ed3
_browser_0x6ec4                   EQU                               0x6ec4
_browser_0x6eb5                   EQU                               0x6eb5
_browser_0x6ea6                   EQU                               0x6ea6
_browser_0x6df1                   EQU                               0x6df1
_browser_0x6de2                   EQU                               0x6de2
_browser_0x6dd3                   EQU                               0x6dd3
_browser_0x6dc4                   EQU                               0x6dc4
_browser_0x6db5                   EQU                               0x6db5
_browser_0x6da6                   EQU                               0x6da6
_browser_0x6cf1                   EQU                               0x6cf1
_browser_0x6ce2                   EQU                               0x6ce2
_browser_0x6cd3                   EQU                               0x6cd3
_browser_0x6cc4                   EQU                               0x6cc4
_browser_0x6cb5                   EQU                               0x6cb5
_browser_0x6ca6                   EQU                               0x6ca6
_browser_0x6bf1                   EQU                               0x6bf1
_browser_0x6be2                   EQU                               0x6be2
_browser_0x6bd3                   EQU                               0x6bd3
_browser_0x6bc4                   EQU                               0x6bc4
_browser_0x6bb5                   EQU                               0x6bb5
_browser_0x6ba6                   EQU                               0x6ba6
_browser_0x6af1                   EQU                               0x6af1
_browser_0x6ae2                   EQU                               0x6ae2
_browser_0x6ad3                   EQU                               0x6ad3
_browser_0x6ac4                   EQU                               0x6ac4
_browser_0x6ab5                   EQU                               0x6ab5
_browser_0x6aa6                   EQU                               0x6aa6
_browser_0x69f1                   EQU                               0x69f1
_browser_0x69e2                   EQU                               0x69e2
_browser_0x69d3                   EQU                               0x69d3
_browser_0x69c4                   EQU                               0x69c4

; Strings
_runName$                         EQU                               0x7da0
_runName$                         DB                                0 '' 0
_execName$                        EQU                               0x7ba0
_execName$                        DB                                0 '' 0
_pathName$                        EQU                               0x7aa0
_pathName$                        DB                                0 '' 0

; Constant Strings
_str_0x7cfe                       EQU                               0x7cfe
_str_0x7cfe                       DB                                0 '' 0
_str_0x7ca6                       EQU                               0x7ca6
_str_0x7ca6                       DB                                6 'Loader' 0
_str_0x69b1                       EQU                               0x69b1
_str_0x69b1                       DB                                17 'Loader not found!' 0
_str_0x69a5                       EQU                               0x69a5
_str_0x69a5                       DB                                10 'Loading...' 0

; Data

; Time

; Define Bytes

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables
_lut_numericLabs                  EQU                               0x68f2
_lut_numericLabs                  DW                                127 10 254 253 251 247 0x0000
_lut_numericAddrs                 EQU                               0x68e6
_lut_numericAddrs                 DW                                0x0632 0x08a5 0x08ab 0x08cc 0x08e0 0x09a2 

; Lazy Constants

; Code
_entryPoint_                      LDI                               0x80
                                  STW                               romUser
                                  RomCheck                          
                                  Initialise                                                    ; INIT

                                  LDWI                              0x7cfe
                                  STW                               strSrcAddr
                                  LDWI                              0x7da0
                                  StringCopy                                                    ; runName$ = ""

                                  LDWI                              0x7cfe
                                  STW                               strSrcAddr
                                  LDWI                              0x7ba0
                                  StringCopy                                                    ; execName$ = ""

                                  LDWI                              0x7cfe
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; pathName$ = ""

                                  CALLI                             _findLoader                 ; gosub findLoader

_restart                          CALLI                             _initialise                 ; gosub initialise

                                  CALLI                             _initSDComms                ; gosub initSDComms

                                  CALLI                             _beginSDCard                ; gosub beginSDCard

                                  CALLI                             _openSDCard                 ; gosub openSDCard

_repeat_0x024a                    CALLI                             _listSDCard                 ; gosub listSDCard

                                  CALLI                             _loadDir                    ; gosub loadDir

                                  CALLI                             _fillBrowser                ; gosub fillBrowser

                                  LDW                               _isLast
                                  BEQ                               _repeat_0x024a              ; until &(isLast)

                                  CALLI                             _closeSDCard                ; gosub closeSDCard

                                  CALLI                             _printBrowser               ; gosub printBrowser

                                  MOVQW                             _f, 0                       ; f = 0

                                  MOVQW                             _kk, 255                    ; kk = 255

_repeat_0x026a                    WaitVBlank                                                    ; wait

                                  CALLI                             _handleInput                ; gosub handleInput

                                  LDW                               _execRtn
                                  BEQ                               _else_0x027b
                                  BRA                               _restart                    ; if &(execRtn) then goto &restart

_else_0x027b                      INC                               _f                          ; inc f.lo

                                  BRA                               _repeat_0x026a              ; &forever

                                  HALT                                                          ; end

_findLoader                       PUSH                              
                                  MOVQW                             _execAddr, 0                ; execAddr = 0

_repeat_0x0286                    LDW                               _execAddr
                                  RomRead                           
                                  STW                               _execAddr                   ; execAddr = get("ROM_READ_DIR", execAddr)

                                  LDW                               _execAddr
                                  JumpFalse                         _endif_0x02e2               ; if (execAddr)

                                  LDWI                              31648
                                  POKEI                             6                           ; poke @execName$, 6

                                  MOVQW                             _j, 36                      ; for j=sysArg0 &to sysArg7

_next_0x029f                      LDWI                              31648
                                  ADDW                              _j
                                  SUBI                              35
                                  STW                               0xe8
                                  PEEKV                             _j
                                  POKE                              0xe8                        ; poke @execName$ + j - (sysArg0 - 1), peek(j)

                                  ForNextInc                        _j _next_0x029f 43          ; next j

                                  LDWI                              0x7ba0
                                  STW                               strSrcAddr
                                  MOVQW                             strDstLen, 6
                                  LDWI                              0x7ea0
                                  StringLeft                        
                                  LDWI                              0x7ea0
                                  STW                               strSrcAddr
                                  LDWI                              0x7ca6
                                  StringCmp                         
                                  ANDI                              1
                                  JumpFalse                         _endif_0x02e2
                                  Return                                                        ; if left$(execName$, 6) = "Loader" then return

_endif_0x02e2                     LDW                               _execAddr
                                  JNE                               _repeat_0x0286              ; until execAddr = 0

                                  PrintString                       _str_0x69b1
                                  NewLine                                                       ; print "Loader not found!"

                                  HALT                                                          ; end

                                  Return                                                        ; return

_sendCommsCmd                     PUSH                                                          ; asm

                                  LDWI                              SYS_SendSerial1_v3_80       ; LDWI    SYS_SendSerial1_v3_80
                                  STW                               giga_sysFn                  ; STW     giga_sysFn
                                  LDW                               _commsAddr                  ; LDW     _commsAddr
                                  STW                               giga_sysArg0                ; STW     giga_sysArg0
                                  MOVQW                             giga_sysArg2,1              ; MOVQW   giga_sysArg2, 1
                                  LD                                _commsSize                  ; LD      _commsSize
                                  LSLW                                                          ; LSLW
                                  LSLW                                                          ; LSLW
                                  LSLW                                                          ; LSLW
                                  STW                               giga_sysArg3                ; STW     giga_sysArg3
                                  SYS                               80                          ; SYS     80
                                  STW                               _commsRetn                  ; STW     _commsRetn

                                  Return                                                        ; return

_loadDir                          PUSH                                                          ; asm

                                  LDW                               _NextByteIn_32              ; LDW     _NextByteIn_32
                                  STW                               giga_sysFn                  ; STW     giga_sysFn
                                  CALLI                             _page_0x0300
_page_0x0300                      LDWI                              _buffer                     ; LDWI    _buffer
                                  STW                               giga_sysArg4                ; STW     giga_sysArg4

_loadD0                           LDW                               giga_sysArg4                ; LDW     giga_sysArg4
                                  STW                               giga_sysArg0                ; STW     giga_sysArg0

                                  MOVQB                             giga_sysArg3,207            ; MOVQB   giga_sysArg3, 207
                                  SYS                               32                          ; SYS     32

                                  PEEKV                             giga_sysArg4                ; PEEKV   giga_sysArg4
                                  XORI                              255                         ; XORI    255
                                  JEQ                               _loadD0                     ; JEQ     _loadD0

                                  MOVQB                             giga_sysArg3,219            ; MOVQB   giga_sysArg3, 219
                                  SYS                               32                          ; SYS     32

                                  MOVQB                             giga_sysArg3,235            ; MOVQB   giga_sysArg3, 235
                                  SYS                               32                          ; SYS     32

                                  MOVQB                             giga_sysArg3,251            ; MOVQB   giga_sysArg3, 251
                                  SYS                               32                          ; SYS     32

                                  MOVQB                             giga_sysArg4,60             ; MOVQB   giga_sysArg4, 60
                                  MOVQB                             giga_sysArg3,2              ; MOVQB   giga_sysArg3, 2

_loadD1                           SYS                               32                          ; SYS     32
                                  ADDBI                             giga_sysArg3,4              ; ADDBI   giga_sysArg3, 4
                                  DBNE                              giga_sysArg4,_loadD1        ; DBNE    giga_sysArg4, _loadD1

                                  MOVQB                             giga_sysArg3,185            ; MOVQB   giga_sysArg3, 185
                                  SYS                               32                          ; SYS     32

                                  LDWI                              0x7cae
                                  PEEK                              
                                  STW                               _isLast                     ; isLast = peek(@buffer)

                                  LDWI                              0x7caf
                                  PEEK                              
                                  ANDI                              0x3f
                                  STW                               _length                     ; length = peek(@buffer + 1) AND 63

                                  Return                                                        ; return

_fillBrowser                      PUSH                              
                                  MOVQW                             _bIdx, 2                    ; bIdx = 2

                                  LDW                               _length
                                  JNE                               _else_0x037a
                                  Return                                                        ; if length = 0 then return

_else_0x037a                      LDW                               _browserIdx
                                  XORI                              100
                                  JNE                               _repeat_0x0389
                                  Return                                                        ; if browserIdx = MAX_FILES then return

_repeat_0x0389                    MOVQW                             _cIdx, 0                    ; cIdx = 0

_repeat_0x038d                    LDWI                              31918
                                  ADDW                              _bIdx
                                  PEEK                              
                                  STW                               _char                       ; char = peek(@buffer + bIdx)

                                  LDW                               _browserIdx
                                  STW                               memIndex0
                                  LDW                               _cIdx
                                  STW                               memIndex1
                                  LDWI                              0x0638
                                  CALLI                             convert8Arr2d
                                  POKEA                             _char                       ; poke addr(browser(browserIdx, cIdx)), char

                                  INC                               _bIdx                       ; inc bIdx.lo

                                  INC                               _cIdx                       ; inc cIdx.lo

                                  LDW                               _char
                                  JNE                               _repeat_0x038d              ; until char = 0

                                  INC                               _browserIdx                 ; inc browserIdx.lo

                                  LDW                               _browserIdx
                                  XORI                              100
                                  JNE                               _else_0x03d1
                                  Return                                                        ; if browserIdx = MAX_FILES then return

_else_0x03d1                      LDW                               _bIdx
                                  SUBI                              2
                                  XORW                              _length
                                  JNE                               _repeat_0x0389              ; until (bIdx - 2) = length

                                  Return                                                        ; return

_printBrowser                     PUSH                              
                                  LDW                               _browserIdx
                                  SUBI                              15
                                  STW                               0xe8
                                  LDW                               _browserY
                                  STW                               intSrcA
                                  LDW                               0xe8
                                  IntMin                            
                                  STW                               intSrcA
                                  LDI                               0
                                  IntMax                            
                                  STW                               _startY                     ; startY = max(min(browserY, browserIdx-15), 0)

                                  LDW                               _browserY
                                  ADDI                              14
                                  STW                               0xe8
                                  LDW                               _browserIdx
                                  SUBI                              1
                                  STW                               0xea
                                  LDW                               0xe8
                                  STW                               intSrcA
                                  LDW                               0xea
                                  IntMin                            
                                  STW                               _endY                       ; endY = min(browserY+14, browserIdx-1)

                                  LDW                               _endY
                                  STW                               0xd8
                                  MOVQW                             _i, 0                       ; for i=startY &to endY

_next_0x0426                      LDW                               _i
                                  STW                               memIndex0
                                  MOVQW                             memIndex1, 0
                                  LDWI                              0x0638
                                  CALLI                             convert8Arr2d
                                  ADDI                              1
                                  STW                               _strAddr                    ; strAddr = addr(browser(i, 0)) + 1

                                  PEEKV                             _strAddr
                                  STW                               _strLen                     ; strLen = peek(strAddr)

                                  LDW                               _strAddr
                                  SUBI                              1
                                  PEEK                              
                                  STW                               _isFile                     ; isFile = peek(strAddr - 1)

                                  LDW                               _i
                                  SUBW                              _browserY
                                  XORW                              _cursorY
                                  JNE                               _else_0x048a                ; if (i - browserY) = cursorY

                                  LDW                               _isFile
                                  XORI                              1
                                  CALLI                             _page_0x0400
_page_0x0400                      JNE                               _else_0x047e                ; if isFile = 1

                                  LDWI                              8255
                                  STW                               fgbgColour
                                  CALLI                             _endif_0x0483               ; set FGBG_COLOUR, &h203F

_else_0x047e                      LDWI                              8234
                                  STW                               fgbgColour                  ; set FGBG_COLOUR, &h202A

_endif_0x0483                     LDW                               _strAddr
                                  STW                               _runStrAddr
                                  CALLI                             _endif_0x04a4               ; runStrAddr = strAddr

_else_0x048a                      LDW                               _isFile
                                  XORI                              1
                                  JNE                               _else_0x049f                ; if isFile = 1

                                  LDWI                              16160
                                  STW                               fgbgColour
                                  CALLI                             _endif_0x04a4               ; set FGBG_COLOUR, &h3F20

_else_0x049f                      LDWI                              10784
                                  STW                               fgbgColour                  ; set FGBG_COLOUR, &h2A20

_endif_0x04a4                     LDW                               _i
                                  SUBW                              _browserY
                                  JLT                               _endif_0x04df               ; if (i - browserY) >= 0

                                  MOVQB                             cursorXY, 2
                                  LDW                               _i
                                  SUBW                              _browserY
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; at 2, (i - browserY) LSL 3

                                  LDW                               _strAddr
                                  PrintAcString                     
                                  LDI                               12
                                  SUBW                              _strLen
                                  PrintSpc                                                      ; print string$(strAddr);spc$(12 - strLen);

_endif_0x04df                     ForNextVarInc                     _i _next_0x0426 0xd8        ; next i

                                  Return                                                        ; return

_updateBrowser                    PUSH                              
                                  LDW                               _browserIdx
                                  SUBI                              15
                                  STW                               0xe8
                                  LDW                               _browserY
                                  STW                               intSrcA
                                  LDW                               0xe8
                                  IntMin                            
                                  STW                               intSrcA
                                  LDI                               0
                                  IntMax                            
                                  STW                               _startY                     ; startY = max(min(browserY, browserIdx-15), 0)

                                  LDW                               _startY
                                  ADDW                              _cursOldY
                                  STW                               _prevY                      ; prevY = startY + cursOldY

                                  LDW                               _prevY
                                  STW                               memIndex0
                                  MOVQW                             memIndex1, 0
                                  LDWI                              0x0638
                                  CALLI                             convert8Arr2d
                                  ADDI                              1
                                  STW                               _prevAddr                   ; prevAddr = addr(browser(prevY, 0)) + 1

                                  PEEKV                             _prevAddr
                                  STW                               _prevLen                    ; prevLen = peek(prevAddr)

                                  LDW                               _prevAddr
                                  SUBI                              1
                                  PEEK                              
                                  STW                               _isFile                     ; isFile = peek(prevAddr - 1)

                                  LDW                               _isFile
                                  XORI                              1
                                  JNE                               _else_0x0556                ; if isFile = 1

                                  LDWI                              16160
                                  STW                               fgbgColour
                                  CALLI                             _endif_0x055b               ; set FGBG_COLOUR, &h3F20

_else_0x0556                      LDWI                              10784
                                  STW                               fgbgColour                  ; set FGBG_COLOUR, &h2A20

_endif_0x055b                     MOVQB                             cursorXY, 2
                                  LDW                               _prevY
                                  SUBW                              _startY
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; at 2, (prevY - startY) LSL 3

                                  LDW                               _prevAddr
                                  PrintAcString                     
                                  LDI                               12
                                  SUBW                              _prevLen
                                  PrintSpc                                                      ; print string$(prevAddr);spc$(12 - prevLen);

                                  LDW                               _cursorY
                                  STW                               _cursOldY                   ; cursOldY = cursorY

                                  LDW                               _startY
                                  ADDW                              _cursorY
                                  STW                               _currY                      ; currY = startY + cursorY

                                  LDW                               _currY
                                  STW                               memIndex0
                                  MOVQW                             memIndex1, 0
                                  LDWI                              0x0638
                                  CALLI                             convert8Arr2d
                                  ADDI                              1
                                  STW                               _currAddr                   ; currAddr = addr(browser(currY, 0)) + 1

                                  PEEKV                             _currAddr
                                  STW                               _currLen                    ; currLen = peek(currAddr)

                                  LDW                               _currAddr
                                  SUBI                              1
                                  PEEK                              
                                  STW                               _isFile                     ; isFile = peek(currAddr - 1)

                                  LDW                               _isFile
                                  XORI                              1
                                  JNE                               _page_0x0500                ; if isFile = 1

                                  LDWI                              8255
                                  STW                               fgbgColour
                                  CALLI                             _endif_0x05d9               ; set FGBG_COLOUR, &h203F

                                  CALLI                             _page_0x0500
_page_0x0500                      LDWI                              8234
                                  STW                               fgbgColour                  ; set FGBG_COLOUR, &h202A

_endif_0x05d9                     MOVQB                             cursorXY, 2
                                  LDW                               _currY
                                  SUBW                              _startY
                                  LSLW                              
                                  LSLW                              
                                  LSLW                              
                                  ST                                cursorXY + 1
                                  AtTextCursor                                                  ; at 2, (currY - startY) LSL 3

                                  LDW                               _currAddr
                                  PrintAcString                     
                                  LDI                               12
                                  SUBW                              _currLen
                                  PrintSpc                                                      ; print string$(currAddr);spc$(12 - currLen);

                                  LDW                               _currAddr
                                  STW                               _runStrAddr                 ; runStrAddr = currAddr

                                  Return                                                        ; return

_getLoaderNextByte                PUSH                              
                                  MOVQW                             _NextByteIn_32, 0           ; NextByteIn_32 = 0

                                  LDWI                              SYS_LoaderNextByteIn_32     ; LDWI    SYS_LoaderNextByteIn_32
                                  STW                               _NextByteIn_32              ; STW     _NextByteIn_32

                                  Return                                                        ; return

_openSDCard                       PUSH                              
                                  LDWI                              31983
                                  POKEI                             3                           ; poke @commsCmd, CmdSDOpen

                                  LDWI                              0x7aa0
                                  PEEK                              
                                  STW                               _len                        ; len = peek(@pathName$)

                                  LDI                               1
                                  ADDW                              _len
                                  ADDI                              1
                                  STW                               _commsSize                  ; commsSize = 1 + len + 1

                                  LDW                               _len
                                  JLE                               _else_0x0673                ; if len > 0

                                  LDW                               _len
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _len
                                  ADDI                              1
                                  STW                               0xd8
                                  MOVQW                             _i, 1                       ; for i=1 &to len + 1

_next_0x0650                      LDWI                              31983
                                  ADDW                              _i
                                  STW                               0xe8
                                  LDWI                              31392
                                  ADDW                              _i
                                  PEEK                              
                                  POKE                              0xe8                        ; poke @commsCmd + i, peek(@pathName$ + i)

                                  ForNextVarInc                     _i _next_0x0650 0xd8
                                  CALLI                             _endif_0x0678               ; next i

_else_0x0673                      LDWI                              31984
                                  POKEI                             0                           ; poke @commsCmd + 1, 0

_endif_0x0678                     CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  CALLI                             _waitSDCard                 ; gosub waitSDCard

                                  LDWI                              0x7cfe
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; pathName$ = ""

                                  Return                                                        ; return

_execApp                          PUSH                              
                                  CALLI                             _initSDComms                ; gosub initSDComms

                                  LDWI                              31983
                                  POKEI                             2                           ; poke @commsCmd, CmdSDExec

                                  LDW                               _runStrAddr
                                  STW                               strSrcAddr
                                  LDWI                              0x7da0
                                  StringCopy                                                    ; runName$ = string$(runStrAddr)

                                  LDWI                              0x7da0
                                  PEEK                              
                                  STW                               _len                        ; len = peek(@runName$)

                                  LDW                               _len
                                  ADDI                              1
                                  STW                               0xe8
                                  LDW                               _len
                                  ADDI                              1
                                  STW                               0xd8
                                  MOVQW                             _i, 1                       ; for i=1 &to len + 1

_next_0x06be                      LDWI                              31983
                                  ADDW                              _i
                                  STW                               0xe8
                                  LDWI                              32160
                                  ADDW                              _i
                                  PEEK                              
                                  POKE                              0xe8                        ; poke @commsCmd + i, peek(@runName$ + i)

                                  ForNextVarInc                     _i _next_0x06be 0xd8        ; next i

                                  LDWI                              3872
                                  STW                               fgbgColour
                                  ResetVideoTable                   
                                  ClearVertBlinds                                               ; set FGBG_COLOUR, &h0F20 : cls INIT : cls

                                  PrintString                       _str_0x69a5
                                  NewLine                                                       ; print "Loading..."

                                  LDI                               1
                                  ADDW                              _len
                                  ADDI                              1
                                  STW                               _commsSize                  ; commsSize = 1 + len + 1

                                  CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  LDW                               _execAddr
                                  STW                               giga_sysArg0
                                  LDI                               168
                                  RomExec                                                       ; exec execAddr, &h00A8

                                  Return                                                        ; return

_handleInput                      PUSH                              
                                  LD                                giga_serialRaw
                                  STW                               _k                          ; k = get("SERIAL_RAW")

                                  LDW                               _k
                                  CALLI                             _page_0x0600
_page_0x0600                      XORW                              _kk
                                  JEQ                               _endif_0x0735               ; if k <> kk

                                  MOVQW                             _f, 0                       ; f = 0

                                  LDW                               _k
                                  STW                               _kk                         ; kk = k

                                  LDW                               _k
                                  STW                               numericLabel
                                  MOVQW                             defaultLabel, 0
                                  GosubNumeric                                                  ; gosub k

_endif_0x0735                     LDW                               _f
                                  SUBI                              20
                                  JLE                               _endif_0x075e               ; if f > 20

                                  LDW                               _f
                                  LSRV                              giga_vAC
                                  ANDI                              0x01
                                  JumpFalse                         _endif_0x075e               ; if ((f LSR 1) AND 1)

                                  LDW                               _k
                                  STW                               numericLabel
                                  MOVQW                             defaultLabel, 0
                                  GosubNumeric                                                  ; gosub k

_endif_0x075e                     Return                                                        ; return

_127                              PUSH                              
                                  CALLI                             _page_0x08a0
_page_0x08a0                      CALLI                             _execOrList                 ; gosub execOrList

                                  Return                                                        ; return

_10                               PUSH                              
                                  CALLI                             _execOrList                 ; gosub execOrList

                                  Return                                                        ; return

_254                              PUSH                              
                                  ADDVI                             _browserY, 15               ; browserY = browserY + 15

                                  LDW                               _browserIdx
                                  SUBI                              15
                                  STW                               0xe8
                                  LDW                               _browserY
                                  STW                               intSrcA
                                  LDW                               0xe8
                                  IntMin                            
                                  STW                               intSrcA
                                  LDI                               0
                                  IntMax                            
                                  STW                               _browserY                   ; browserY = max(min(browserY, browserIdx-15), 0)

                                  CALLI                             _printBrowser               ; gosub printBrowser

                                  Return                                                        ; return

_253                              PUSH                              
                                  SUBVI                             _browserY, 15               ; browserY = browserY - 15

                                  LDW                               _browserY
                                  STW                               intSrcA
                                  LDI                               0
                                  IntMax                            
                                  STW                               _browserY                   ; browserY = max(browserY, 0)

                                  CALLI                             _printBrowser               ; gosub printBrowser

                                  Return                                                        ; return

_251                              PUSH                              
                                  INC                               _cursorY                    ; inc cursorY.lo

                                  LDW                               _browserIdx
                                  SUBI                              1
                                  STW                               intSrcA
                                  LDI                               14
                                  IntMin                            
                                  STW                               0xea
                                  LDW                               _cursorY
                                  SUBW                              0xea
                                  JLE                               _else_0x07d8
                                  MOVQW                             _cursorY, 0                 ; if cursorY > min(browserIdx - 1, 14) then cursorY = 0

_else_0x07d8                      CALLI                             _updateBrowser              ; gosub updateBrowser

                                  CALLI                             _page_0x09a0
_page_0x09a0                      Return                                                        ; return

_247                              PUSH                              
                                  DECW                              _cursorY                    ; dec cursorY

                                  LDW                               _cursorY
                                  JGE                               _else_0x0800
                                  LDW                               _browserIdx
                                  SUBI                              1
                                  STW                               intSrcA
                                  LDI                               14
                                  IntMin                            
                                  STW                               _cursorY                    ; if cursorY < 0 then cursorY = min(browserIdx - 1, 14)

_else_0x0800                      CALLI                             _updateBrowser              ; gosub updateBrowser

                                  Return                                                        ; return

_execOrList                       PUSH                              
                                  LDW                               _runStrAddr
                                  SUBI                              1
                                  PEEK                              
                                  STW                               _entry                      ; entry = peek(runStrAddr - 1)

                                  LDW                               _entry
                                  XORI                              1
                                  JNE                               _endif_0x0827               ; if entry = EntryFile

                                  MOVQW                             _execRtn, 0                 ; execRtn = 0

                                  CALLI                             _execApp                    ; gosub execApp

_endif_0x0827                     LDW                               _entry
                                  XORI                              3
                                  JNE                               _endif_0x0843               ; if entry = EntryError

                                  MOVQW                             _execRtn, 2                 ; execRtn = 2

                                  LDWI                              0x7cfe
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; pathName$ = ""

_endif_0x0843                     LDW                               _entry
                                  XORI                              2
                                  JNE                               _endif_0x0862               ; if entry = EntryDir

                                  MOVQW                             _execRtn, 1                 ; execRtn = 1

                                  LDW                               _runStrAddr
                                  STW                               strSrcAddr
                                  LDWI                              0x7aa0
                                  StringCopy                                                    ; pathName$ = string$(runStrAddr)

_endif_0x0862                     Return                                                        ; return

_waitSDCard                       PUSH                                                          ; asm

                                  CALLI                             _page_0x0aa0
_page_0x0aa0                      LDW                               _NextByteIn_32              ; LDW     _NextByteIn_32
                                  STW                               giga_sysFn                  ; STW     giga_sysFn

_waitSD                           MOVQW                             giga_sysArg0,_waitRtn       ; MOVQW   giga_sysArg0, _waitRtn

                                  MOVQB                             giga_sysArg3,207            ; MOVQB   giga_sysArg3, 207
                                  SYS                               32                          ; SYS     32

                                  LD                                _waitRtn                    ; LD      _waitRtn
                                  JNE                               _waitSD                     ; JNE     _waitSD

                                  MOVQW                             waitVBlankNum, 2
                                  WaitVBlanks                                                   ; wait 2

                                  Return                                                        ; return

_initSDComms                      PUSH                              
                                  MOVQW                             _commsSize, 1               ; commsSize = 1

                                  LDWI                              31983
                                  POKEI                             6                           ; poke @commsCmd, CmdSDInit

                                  CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  WaitVBlank                                                    ; wait

                                  Return                                                        ; return

_listSDCard                       PUSH                              
                                  MOVQW                             _commsSize, 1               ; commsSize = 1

                                  LDWI                              31983
                                  POKEI                             1                           ; poke @commsCmd, CmdSDList

                                  CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  Return                                                        ; return

_closeSDCard                      PUSH                              
                                  MOVQW                             _commsSize, 1               ; commsSize = 1

                                  LDWI                              31983
                                  POKEI                             4                           ; poke @commsCmd, CmdSDClose

                                  CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  Return                                                        ; return

_beginSDCard                      PUSH                              
                                  MOVQW                             _commsSize, 1               ; commsSize = 1

                                  LDWI                              31983
                                  POKEI                             5                           ; poke @commsCmd, CmdSDBegin

                                  CALLI                             _sendCommsCmd               ; gosub sendCommsCmd

                                  CALLI                             _waitSDCard                 ; gosub waitSDCard

                                  Return                                                        ; return

_initialise                       PUSH                              
                                  MOVQW                             varAddress, 0x34
                                  CALLI                             _page_0x0ba0
_page_0x0ba0                      ResetVars                                                     ; init vars @commsSize

                                  CALLI                             _getLoaderNextByte          ; gosub getLoaderNextByte

                                  LDWI                              31983
                                  STW                               _commsAddr                  ; commsAddr = @commsCmd

                                  MOVQW                             graphicsMode, 2
                                  ScanlineMode                      
                                  LDWI                              16160
                                  STW                               fgbgColour
                                  ResetVideoTable                   
                                  ClearVertBlinds                                               ; mode 2 : set FGBG_COLOUR, &h3F20 : cls INIT : cls

                                  Return                                                        ; return

                                  HALT                                                          ; END



;****************************************************************************************************************************************
;****************************************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files                            *
;****************************************************************************************************************************************
;****************************************************************************************************************************************

romCheck                          EQU     0x64d6
romExec                           EQU     0x61d4
romRead                           EQU     0x63a0
convert8Arr2d                     EQU     0x61e3
resetVars                         EQU     0x62ef
integerMin                        EQU     0x62d0
integerMax                        EQU     0x62c1
gosubNumericLabel                 EQU     0x66cf
scanlineMode                      EQU     0x61f5
waitVBlank                        EQU     0x62df
waitVBlanks                       EQU     0x62b2
resetVideoFlags                   EQU     0x61db
resetVideoTable                   EQU     0x63e5
initClearFuncs                    EQU     0x62a4
clearVertBlinds                   EQU     0x65a5
clearCursorRow                    EQU     0x64b3
printInit                         EQU     0x63bc
printText                         EQU     0x63a8
printChar                         EQU     0x68a3
printClip                         EQU     0x63d0
printSpc                          EQU     0x64a0
atTextCursor                      EQU     0x67a5
newLineScroll                     EQU     0x67c1
stringCopy                        EQU     0x61eb
stringCmp                         EQU     0x65cf
stringLeft                        EQU     0x66a4


; do *NOT* use register4 to register7 during time slicing
realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           ; user requested romType
romType             EQU     register1                           ; actual romType
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                ; loader happy constant address
vramErrAddr         EQU     giga_vram + giga_yres/2*256 + giga_xres/2

romErrAddr          DW      vramErrAddr
 

; can't use any new instructions in romCheck
romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         ; romType = romUser, so ok
                    LDW     romUser
                    SUBI    0x80                                ; experimental ROM's must match exactly
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         ; romType = romUser, so ok
                    BRA     romC_fail
                    
romC_check          LDW     romType                             ; non experimental ROM
                    SUBW    romUser
                    BGT     romC_return                         ; romType > romUser, so ok
                    
                    ; gprintf's are only shown in the emulator and always attached to the next instruction
                    gprintf("Wrong ROM version, you asked for 0x%2X, you have 0x%2X", *romUser, *romType)
romC_fail           LD      giga_frameCount
                    POKE    romErrAddr
                    BRA     romC_fail                           ; flash center pixel indicating rom error
                    
romC_return         RET


romExec             STW     giga_vLR
                    MOVQW  giga_sysFn, SYS_Exec_88              ; address < 0x0100 so use MOVQW
                    SYS     88                                  ; doesn't return from here!


romRead             MOVQW   giga_sysFn, SYS_ReadRomDir_v5_80    ; address < 0x0100 so use MOVQW
                    LDW     romReadAddr
                    SYS     80
                    RET


swpSrcAddr          EQU     register0
swpDstAddr          EQU     register1
swpTmpData          EQU     register2
swapCount           EQU     register3
swpTmpAddr          EQU     register8
cpySrcAddr          EQU     register0
cpyDstAddr          EQU     register1
cpyCount            EQU     register2
cpyLoaderLut        EQU     register3
regsWork            EQU     giga_sysArg4                        ; use SYS arg registers to stop conflicts with time slicing/vblanks
regsAddr            EQU     giga_sysArg6                        ; use SYS arg registers to stop conflicts with time slicing/vblanks


convert8Arr2d       ADDW    memIndex0
                    ADDW    memIndex0
                    DEEK
                    ADDW    memIndex1
                    RET


; do *NOT* use register4 to register7 during time slicing
xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15


resetVars           LDI     giga_One
                    SUBW    varAddress
                    STW     varCount
                    LSRB    varCount                            ; (0x0080 - varAddress)/2
                    LDI     0
                    
resetV_loop         DOKE+   varAddress
                    DBNE    varCount, resetV_loop
                    RET


; do *NOT* use register4 to register7 during time slicing
intSrcA             EQU     register0
intSrcB             EQU     register1
intSrcX             EQU     register2
intSwap             EQU     register3
intSrcAddr          EQU     register8
intDigit            EQU     register9
intResult           EQU     register10
intNegative         EQU     register11
bcdLength           EQU     register8
bcdSrcAddr          EQU     register9
bcdDstAddr          EQU     register10
bcdSrcData          EQU     register11
bcdDstData          EQU     register11                          ; alias to make code less confusing
bcdCarry            EQU     register12
bcdBorrow           EQU     register12                          ; alias to make code less confusing
bcdValue            EQU     register0
bcdDigit            EQU     register1
bcdMult             EQU     register2


integerMin          STW     intSrcB
                    LDW     intSrcA
                    SUBW    intSrcB
                    BLE     integerMi_A
                    LDW     intSrcB
                    RET

integerMi_A         LDW     intSrcA
                    RET


integerMax          STW     intSrcB
                    LDW     intSrcA
                    SUBW    intSrcB
                    BGE     integerMa_A
                    LDW     intSrcB
                    RET

integerMa_A         LDW     intSrcA
                    RET


                    ; find numeric label and call it, (it had better return or welcome to lala land)
gosubNumericLabel   PUSH
                    LDWI    _lut_numericLabs
                    STW     lutLabs
                    STW     lutIndex
                    LDWI    _lut_numericAddrs
                    STW     lutAddrs
                    
gosubNL_loop        DEEKV   lutIndex
                    BNE     gosubNL_cont                        ; check for 0
                    LDW     defaultLabel
                    BEQ     gosubNL_exit
                    CALL    defaultLabel                        ; fetch default address and call
                    
gosubNL_exit        POP
                    RET
                    
gosubNL_cont        SUBW    numericLabel
                    BEQ     gosubNL_found
                    ADDBI   lutIndex, 2
                    BRA     gosubNL_loop                        ; loop through lut until found or 0
                    
gosubNL_found       LDW     lutIndex
                    SUBW    lutLabs
                    ADDW    lutAddrs
                    DEEK
                    CALL    giga_vAC                            ; fetch label address and call
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13

drawPixel_xy        EQU     giga_sysArg6
readPixel_xy        EQU     giga_sysArg6

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     giga_sysArg4                        ; TODO: find a better spot for this

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET


%if VBLANK_INTERRUPT
waitVBlank          LD      timerPrev                           ; can't use giga_frameCount for VBlanks
%else
waitVBlank          LD      giga_frameCount
%endif
                    XORW    frameCountPrev
                    BEQ     waitVBlank
%if VBLANK_INTERRUPT
                    MOVB    timerPrev, frameCountPrev           ; can't use giga_frameCount for VBlanks
%else
                    MOVB    giga_frameCount, frameCountPrev
%endif
                    RET


waitVBlanks         PUSH

waitVB_loop0        DECW    waitVBlankNum
                    LDW     waitVBlankNum
                    BGE     waitVB_vblank
                    POP
                    RET
    
waitVB_vblank       CALLI   waitVBlank
                    BRA     waitVB_loop0


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              ; starting cursor position
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   ; reset on bottom row flag
                    RET


                    ; resets video table pointers
resetVideoTable     PUSH
                    MOVQW   vramAddr, 8
                    LDWI    giga_videoTable
                    STW     evenAddr
                    MOVQB   vtbLines, 120
    
resetVT_loop        LDW     vramAddr
                    DOKE+   evenAddr
                    INC     vramAddr
                    DBNE    vtbLines, resetVT_loop
                    CALLI   resetVideoFlags
                    POP
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 ; setup fill memory SYS routine
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            ; fill value                   
                    POP
                    RET


                    ; clears the viewable screen using a vertical blinds effect
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     ; low start address
                    MOVB    top, giga_sysArg3                   ; top line
                    SYS     54                                  ; fill memory
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     ; low start address
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        ; bottom line
                    SYS     54                                  ; fill memory
                    INC     top                                 ; next top line
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET



; do *NOT* use register4 to register7 during time slicing
textStr             EQU     register0
textNum             EQU     register0
textBak             EQU     register0
textHex             EQU     register1
textSpc             EQU     register1
textLen             EQU     register2
textOfs             EQU     register3
textChr             EQU     register8
textFont            EQU     register9
textSlice           EQU     register10
scanLine            EQU     register11
digitMult           EQU     register12
digitIndex          EQU     register13
clearLoop           EQU     register14
    
    
printInit           LDWI    SYS_VDrawBits_134
                    STW     giga_sysFn
                    LDW     fgbgColour
                    STW     giga_sysArg0
                    LD      cursorXY + 1                        ; xy = peek(256+2*y)*256 + x
                    LSLW
                    INC     giga_vAC + 1
                    PEEKA   giga_sysArg4 + 1
                    MOVB    cursorXY, giga_sysArg4              ; xy position
                    RET



                    ; prints text string pointed to by the accumulator
printText           PUSH
                    STW     textStr
                    CALLI   printInit
                    INC     textStr                             ; skip length

printT_char         PEEK+   textStr             
                    BEQ     printT_exit                         ; check for terminating zero
                    CALLI   printChar
                    BRA     printT_char
                    
printT_exit         POP
                    RET



                    ; prints char in textChr
printChar           ANDI    0x7F                                ; char can't be bigger than 127
                    SUBI    82
                    BGE     printC_text82
                    ADDI    50
                    BLT     printC_exit                         ; char<32 exit
                    STW     textChr                             ; char-32
                    LDWI    giga_text32                         ; text font slice base address for chars 32-81
                    BRA     printC_font
                    
printC_text82       STW     textChr                             ; char-82
                    LDWI    giga_text82                         ; text font slice base address for chars 82+
                    
printC_font         STW     textFont
                    LD      textChr
                    LSLW    
                    LSLW    
                    ADDW    textChr
                    ADDW    textFont
                    STW     textFont                            ; char*5 + textFont
                    MOVQB   textSlice, 0x05

printC_slice        LDW     textFont                            ; text font slice base address
                    LUP     0x00                                ; get ROM slice
                    ST      giga_sysArg2
                    SYS     134                                 ; draw vertical slice, SYS_VDrawBits_134, 270 - 134/2 = 0xCB
                    INC     textFont                            ; next vertical slice
                    INC     giga_sysArg4                        ; next x
                    DBNE    textSlice, printC_slice
                    
                    MOVQB   giga_sysArg2, 0
                    SYS     134                                 ; draw last blank slice
                    INC     giga_sysArg4                        ; using sysArg4 as a temporary cursor address for multiple char prints
                    
                    PUSH
                    CALLI   printClip
                    POP
                    
printC_exit         RET


printClip           ADDBI   cursorXY, giga_xfont
                    CMPI    cursorXY, giga_xres - giga_xfont    ; last possible char on line
                    BLE     printCl_exit
                    ANDBK   miscFlags, MISC_DISABLE_CLIP_BIT
                    BNE     printCl_exit                        ; is text clipping disabled?
                    PUSH
                    CALLI   newLineScroll                       ; next row, scroll at bottom
                    POP
                    
printCl_exit        RET


                    ; prints textSpc spaces
printSpc            PUSH
                    BEQ     printS_exit
                    ST      textSpc
                    CALLI   printInit
                    
printS_loop         LDI     32
                    CALLI   printChar
                    DBNE    textSpc, printS_loop
                    
printS_exit         POP
                    RET


atTextCursor        CMPI    cursorXY, giga_xres - giga_xfont
                    BLE     atTC_checkY
                    MOVQB   cursorXY, 0
                    
atTC_checkY         CMPI    cursorXY + 1, giga_yres - giga_yfont
                    BLT     atTC_resbot
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   ; set on bottom row flag
                    RET
                    
atTC_resbot         ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   ; reset on bottom row flag
                    RET



                    ; clears the top giga_yfont lines of pixels in preparation of text scrolling
clearCursorRow      PUSH
                    LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn                          ; setup fill memory SYS routine
                    MOVB    fgbgColour, giga_sysArg1            ; fill value
                    LDWI    giga_videoTable
                    PEEKA   giga_sysArg3                        ; row0 high byte address
                    MOVQW   clearLoop, giga_yfont

clearCR_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     ; low start address
                    SYS     54                                  ; fill memory
                    INC     giga_sysArg3                        ; next line
                    DBNE    clearLoop, clearCR_loopy
                    CALLI   printInit                           ; re-initialise the SYS registers
                    POP
                    RET


                    ; print from top row to bottom row, then start scrolling 
newLineScroll       LDI     giga_CursorX                        ; cursor x start
                    ST      cursorXY
                    ST      giga_sysArg4
                    ANDBK   miscFlags, MISC_ENABLE_SCROLL_BIT
                    BNE     newLS_cont0                         ; is scroll on or off?
                    RET
                    
newLS_cont0         PUSH
                    ANDBK   miscFlags, MISC_ON_BOTTOM_ROW_BIT
                    BNE     newLS_cont1                         ; is on bottom row flag?
                    ADDBI   cursorXY + 1, giga_yfont
                    CMPI    cursorXY + 1, giga_yres
                    BLT     newLS_exit
                    MOVQB   cursorXY + 1, giga_yres - giga_yfont
                    
newLS_cont1         CALLI   clearCursorRow
                    LDWI    giga_videoTable
                    STW     giga_sysArg2                        ; VTable
                    MOVQB   giga_sysArg0, giga_yfont            ; scroll offset
                    MOVQB   giga_sysArg1, giga_yres             ; scanline count
                    LDWI    SYS_ScrollVTableY_vX_38
                    STW     giga_sysFn
                    SYS     38
                    ORBI    miscFlags, MISC_ON_BOTTOM_ROW_BIT   ; set on bottom row flag
                    
newLS_exit          CALLI   printInit                           ; re-initialise the SYS registers
                    POP
                    RET


; do *NOT* use register4 to register7 during time slicing
strChr              EQU     register0
strAddr             EQU     register0
strHex              EQU     register1
strLen              EQU     register2
strDstLen           EQU     register0
strFinish           EQU     register0
strSrcAddr          EQU     register1
strDstAddr          EQU     register2
strSrcLen           EQU     register3
strOffset           EQU     register8
strSrcAddr2         EQU     register9
strTmpAddr          EQU     register10
strLutAddr          EQU     register11
strBakAddr          EQU     register12
strSrcLen2          EQU     register13
strInteger          EQU     register0
strDigit            EQU     register1
strMult             EQU     register3


                    ; copy one string to another
stringCopy          STW     strDstAddr

stringCp_loop       PEEK+   strSrcAddr
                    POKE+   strDstAddr
                    BNE     stringCp_loop                       ; copy char until terminating char
                    RET


                    ; compares two strings: returns 0 for smaller, 1 for equal and 2 for larger
stringCmp           STW     strSrcAddr2
                    PEEK+   strSrcAddr
                    STW     strSrcLen                           ; save str length
                    PEEK+   strSrcAddr2
                    STW     strSrcLen2                          ; save str length
                    
stringC_loop        PEEK+   strSrcAddr
                    BEQ     stringC_equal                       ; this assumes your strings are valid, (i.e. valid length and terminating bytes)
                    STW     strChr
                    PEEK+   strSrcAddr2
                    SUBW    strChr
                    BLT     stringC_larger
                    BGT     stringC_smaller
                    BRA     stringC_loop

stringC_smaller     LDI     0
                    RET
                    
stringC_equal       LDW     strSrcLen
                    SUBW    strSrcLen2
                    BLT     stringC_smaller
                    BGT     stringC_larger                      ; if strings are equal, choose based on length
                    LDI     1
                    RET
                    
stringC_larger      LDI     2
                    RET


                    ; copies sub string from left hand side of source string to destination string
stringLeft          STW     strDstAddr
                    LD      strDstLen
                    BEQ     stringL_exit                        ; exit if left length = 0
                    POKE    strDstAddr                          ; destination length
                    PEEKV   strSrcAddr                          ; get source length
                    BEQ     stringL_exit                        ; exit if source length = 0
                    STW     strSrcLen
                    SUBW    strDstLen
                    BGE     stringL_skip                        ; is left length <= source length
                    LD      strSrcLen
                    STW     strDstLen
                    POKE    strDstAddr                          ; new destination length
                    
stringL_skip        INC     strSrcAddr                          ; skip lengths
                    INC     strDstAddr
                    
stringL_loop        PEEK+   strSrcAddr
                    POKE+   strDstAddr                          ; copy char
                    DBNE    strDstLen, stringL_loop             ; until finished
                    
stringL_exit        LDI     0
                    POKE    strDstAddr                          ; terminating 0
                    RET

