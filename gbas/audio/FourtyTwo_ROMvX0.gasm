_startAddress_                    EQU                          0x0200

; Internal Variables
serialRawPrev                     EQU                          0x0081
frameCountPrev                    EQU                          0x00d6
register0                         EQU                          0x0082
register1                         EQU                          register0 + 0x02
register2                         EQU                          register0 + 0x04
register3                         EQU                          register0 + 0x06
register4                         EQU                          register0 + 0x08
register5                         EQU                          register0 + 0x0A
register6                         EQU                          register0 + 0x0C
register7                         EQU                          register0 + 0x0E
register8                         EQU                          register0 + 0x10
register9                         EQU                          register0 + 0x12
register10                        EQU                          register0 + 0x14
register11                        EQU                          register0 + 0x16
register12                        EQU                          register0 + 0x18
register13                        EQU                          register0 + 0x1A
register14                        EQU                          register0 + 0x1C
register15                        EQU                          register0 + 0x1E
fgbgColour                        EQU                          register0 + 0x20
cursorXY                          EQU                          register0 + 0x22
midiStream                        EQU                          register0 + 0x24
midiDelay                         EQU                          register0 + 0x26
miscFlags                         EQU                          register0 + 0x28

; Internal Constants
MISC_WAIT_VBLANK_BIT              EQU                          0x01
MISC_ENABLE_SCROLL_BIT            EQU                          0x02
MISC_ON_BOTTOM_ROW_BIT            EQU                          0x04
MISC_DISABLE_CLIP_BIT             EQU                          0x08
MISC_ENABLE_FNT4X6_BIT            EQU                          0x10
MISC_WAIT_VBLANK_MSK              EQU                          0xfe
MISC_ENABLE_SCROLL_MSK            EQU                          0xfd
MISC_ON_BOTTOM_ROW_MSK            EQU                          0xfb
MISC_DISABLE_CLIP_MSK             EQU                          0xf7
MISC_ENABLE_FNT4X6_MSK            EQU                          0xef

; Internal Buffers
regsWorkArea                      EQU                          0x0000
textWorkArea                      EQU                          0x7fa0

; Includes
%includePath                      "../runtime"
%include                          util.i
%include                          gigatron.i
%include                          macros_ROMvX0.i

; Labels
__entryPoint_                     EQU                          0x0200
_initialise                       EQU                          0x02d2
_repeat_0x0000                    EQU                          0x0270
_next_0x0001                      EQU                          0x0276
_next_0x0002                      EQU                          0x02ac
_next_0x0003                      EQU                          0x02bc
_page_0x0300                      EQU                          0x0300

; Constants
_SAMPLES_ADDR                     EQU                          0x0600
_SAMPLES                          EQU                          0x0040
_SMP_H                            EQU                          0x0040
_OSC_X                            EQU                          0x0030
_OSC_Y                            EQU                          0x001c
_OSC_A                            EQU                          0x2430

; Global Variables
_samplesAddr                      EQU                          0x0030
_t                                EQU                          0x0032
_s                                EQU                          0x0034
_smpsAddr                         EQU                          0x0036
_i                                EQU                          0x0038
_tt                               EQU                          0x003a
_tr9                              EQU                          0x003c
_sAddr                            EQU                          0x003e

; Local Variables

; Arrays

; Strings

; Constant Strings

; Data

; Time

; Define Bytes
def_bytes_0x0600                  EQU                          0x0600
def_bytes_0x0600                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
def_bytes_0x0640                  EQU                          0x0640
def_bytes_0x0640                  DB                           0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

; Define Words

; Define Images

; Define Loader Image Chunks

; Define Midis

; Define Blits

; Define Fonts

; Define Sprites

; Define Patterns

; Lookup Tables

; Lazy Constants

; Code
__entryPoint_                     LDI                          0x80
                                  STW                          romUser
                                  RomCheck                     
                                  Initialise                                                ; INIT

                                  LDWI                         1536
                                  STW                          _samplesAddr                 ; samplesAddr = SAMPLES_ADDR

                                  CALLI                        _initialise                  ; gosub initialise

                                  LDI                          0
                                  STW                          _t
                                  STW                          _s                           ; t = 0 : s = t

                                  MOVQB                        sndChannel + 1, 1
                                  LDWI                         800
                                  STW                          sndFrequency
                                  MOVQW                        sndVolume, 64
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 1, 800, 64, 2

                                  MOVQB                        sndChannel + 1, 2
                                  LDWI                         800
                                  STW                          sndFrequency
                                  MOVQW                        sndVolume, 64
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 2, 800, 64, 2

                                  MOVQB                        sndChannel + 1, 3
                                  LDWI                         800
                                  STW                          sndFrequency
                                  MOVQW                        sndVolume, 64
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 3, 800, 64, 2

                                  MOVQB                        sndChannel + 1, 4
                                  LDWI                         800
                                  STW                          sndFrequency
                                  MOVQW                        sndVolume, 64
                                  MOVQW                        sndWaveType, 2
                                  SoundOnV                                                  ; sound on, 4, 800, 64, 2

_repeat_0x0000                    MOVWA                        _samplesAddr, _smpsAddr      ; smpsAddr = samplesAddr

                                  MOVQW                        _i, 0                        ; for i=0 &to 63

_next_0x0001                      LDW                          _t
                                  ADDW                         _i
                                  STW                          _tt                          ; tt = t + i

                                  LD                           _tt + 1
                                  LSRB                         giga_vAC
                                  STW                          _tr9                         ; tr9 = tt.hi LSR 1

                                  LDW                          _i
                                  LSLW                         
                                  LSLW                         
                                  ADDWI                        1794
                                  POKEA                        _s                           ; poke &h0702 + (i LSL 2), s

                                  LD                           _s                           ; LD      _s
                                  POKEV+                       _smpsAddr                    ; POKEV+  _smpsAddr

                                  ANDBK                        _tr9, 0x2a
                                  ADDW                         _s
                                  STW                          _s                           ; s = s + (tr9 AND 42)

                                  ForNextInc                   _i _next_0x0001 63           ; next i

                                  MOVQB                        fgbgColour + 1, 16           ; set FG_COLOUR, &h10

                                  LDW                          _samplesAddr
                                  XORI                         0x40
                                  STW                          _sAddr                       ; sAddr = samplesAddr XOR &h40

                                  MOVQW                        _i, 63                       ; for i=SAMPLES-1 &downto 0

_next_0x0002                      LDWI                         _OSC_A                       ; LDWI    _OSC_A
                                  OSCPX                        _sAddr,_i                    ; OSCPX   _sAddr, _i

                                  ForNextDBGE                  _i _next_0x0002              ; next i

                                  MOVQB                        fgbgColour + 1, 29           ; set FG_COLOUR, &h1D

                                  MOVQW                        _i, 63                       ; for i=SAMPLES-1 &downto 0

_next_0x0003                      LDWI                         _OSC_A                       ; LDWI    _OSC_A
                                  OSCPX                        _samplesAddr,_i              ; OSCPX   _samplesAddr, _i

                                  ForNextDBGE                  _i _next_0x0003              ; next i

                                  XORBI                        _samplesAddr, 0x40           ; samplesAddr = samplesAddr XOR &h40

                                  MOVQB                        giga_soundTimer, 5           ; set SOUND_TIMER, 5

                                  ADDVI                        _t, 64                       ; t = t + 64

                                  BRA                          _repeat_0x0000               ; &forever

_initialise                       PUSH                         
                                  MOVQW                        graphicsMode, 3
                                  ScanlineMode                                              ; mode 3

                                  LDWI                         4144
                                  STW                          fgbgColour                   ; set FGBG_COLOUR, &h1030

                                  ClearVertBlinds                                           ; cls

                                  MOVQB                        fgbgColour + 1, 32           ; set FG_COLOUR, &h20

                                  MOVQW                        drawRectF_x1, 45
                                  MOVQW                        drawRectF_y1, 25
                                  MOVQW                        drawRectF_x2, 114
                                  MOVQW                        drawRectF_y2, 94
                                  DrawRectF                                                 ; rectf OSC_X - 3, OSC_Y - 3, OSC_X + SAMPLES + 2, OSC_Y + SMP_H + 2

                                  MOVQB                        fgbgColour + 1, 16           ; set FG_COLOUR, &h10

                                  CALLI                        _page_0x0300
_page_0x0300                      MOVQW                        drawRectF_x1, 48
                                  MOVQW                        drawRectF_y1, 28
                                  MOVQW                        drawRectF_x2, 111
                                  MOVQW                        drawRectF_y2, 91
                                  DrawRectF                                                 ; rectf OSC_X, OSC_Y, OSC_X + SAMPLES - 1, OSC_Y + SMP_H - 1

                                  MOVQB                        fgbgColour + 1, 47           ; set FG_COLOUR, &h2F

                                  Return                                                    ; return

                                  HALT                                                      ; END



;*************************************************************************************************************
;*************************************************************************************************************
;* Internal runtime, DO NOT MODIFY PAST THIS POINT, modifications must be made in the original include files *
;*************************************************************************************************************
;*************************************************************************************************************

romCheck                          EQU     0x7eac
scanlineMode                      EQU     0x7ea2
resetVideoFlags                   EQU     0x7df7
initClearFuncs                    EQU     0x7fa1
clearVertBlinds                   EQU     0x7ed5
drawRectF                         EQU     0x7fc1
soundOnV                          EQU     0x7faf



realTimeAddr        EQU     register0
realTimeProc0       EQU     register1
realTimeProc1       EQU     register2
realTimeProc2       EQU     register3
numericLabel        EQU     register0
defaultLabel        EQU     register1
lutLabs             EQU     register2
lutAddrs            EQU     register3
lutIndex            EQU     register8
romUser             EQU     register0                           
romType             EQU     register1                           
romReadAddr         EQU     register0               
romErrAddr          EQU     0x7E                                
vramErrAddr         EQU     0x0101

romErrAddr          DW      vramErrAddr
 


romCheck            LD      giga_romType
                    ANDI    0xFC
                    STW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    LDW     romUser
                    SUBI    0x80                                
                    BNE     romC_check
                    LDW     romType
                    SUBW    romUser
                    BEQ     romC_return                         
                    BRA     romC_fail
                    
romC_check          LDW     romType                             
                    SUBW    romUser
                    BGT     romC_return                         
                    
romC_fail           LD      giga_rand0
                    POKE    romErrAddr                          
                    BRA     romC_fail

romC_return         RET



graphicsMode        EQU     register0
waitVBlankNum       EQU     register0
waitVBlankTmp       EQU     register1

drawHLine_x1        EQU     register0
drawHLine_y1        EQU     register1
drawHLine_x2        EQU     register2

drawVLine_x1        EQU     register0
drawVLine_y1        EQU     register1
drawVLine_y2        EQU     register2

drawLine_x1         EQU     register0
drawLine_y1         EQU     register1
drawLine_x2         EQU     register2
drawLine_y2         EQU     register3
drawLine_xy1        EQU     register0
drawLine_xy2        EQU     register1
drawLine_dxy1       EQU     register2
drawLine_dxy2       EQU     register3
drawLine_dx1        EQU     register8
drawLine_dy1        EQU     register9
drawLine_dx2        EQU     register10
drawLine_dy2        EQU     register11
drawLine_sx         EQU     register12
drawLine_sy         EQU     register13
drawLine_h          EQU     register14
drawLine_num        EQU     register15
drawLine_count      EQU     register14
drawLine_dx         EQU     register2
drawLine_dy         EQU     register3
drawLine_u          EQU     register8
drawLine_v          EQU     register9
drawLine_addr       EQU     register10
drawLine_ddx        EQU     register11
drawLine_cnt        EQU     register12
drawLine_swp        EQU     register13
drawLine_xy         EQU     register7

drawPixel_xy        EQU     register0
readPixel_xy        EQU     register0

drawCircle_cx       EQU     register0
drawCircle_cy       EQU     register1
drawCircle_r        EQU     register2
drawCircle_a        EQU     register3
drawCircle_d        EQU     register8
drawCircle_x        EQU     register9
drawCircle_y        EQU     register10
drawCircle_ch0      EQU     register11
drawCircle_ch1      EQU     register12
drawCircle_ch2      EQU     register13
drawCircle_ch3      EQU     register14

drawCircleF_x1      EQU     register0
drawCircleF_y1      EQU     register1
drawCircleF_x2      EQU     register2
drawCircleF_cnt     EQU     register3
drawCircleF_cx      EQU     register15
drawCircleF_cy      EQU     register10
drawCircleF_r       EQU     register11
drawCircleF_v       EQU     register8
drawCircleF_w       EQU     register9

drawRect_x1         EQU     register8
drawRect_y1         EQU     register9
drawRect_x2         EQU     register10
drawRect_y2         EQU     register11

drawRectF_x1        EQU     register0
drawRectF_y1        EQU     register1
drawRectF_x2        EQU     register2
drawRectF_y2        EQU     register3
drawRectF_xcnt      EQU     register8
drawRectF_ycnt      EQU     register9

drawPoly_mode       EQU     register14
drawPoly_addr       EQU     register7

    
scanlineMode        LDWI    SYS_SetMode_v2_80
                    STW     giga_sysFn
                    LDW     graphicsMode
                    SYS     80
                    RET



xreset              EQU     register0
xcount              EQU     register1
ycount              EQU     register2
treset              EQU     register3
breset              EQU     register8
top                 EQU     register9
bot                 EQU     register10
vtbLines            EQU     register10
vramAddr            EQU     register11
evenAddr            EQU     register12
clsAddress          EQU     register13
clsLines            EQU     register14
varAddress          EQU     register13
varCount            EQU     register14
clrAddress          EQU     register13
clrLines            EQU     register14
clrWidth            EQU     register15
ramAddr             EQU     register14
ramCount            EQU     register15


resetVideoFlags     MOVQW   cursorXY, giga_CursorX              
                    ANDBI   miscFlags, MISC_ON_BOTTOM_ROW_MSK   
                    RET



initClearFuncs      PUSH
                    CALLI   resetVideoFlags
                    LDWI    SYS_SetMemory_v2_54                 
                    STW     giga_sysFn
                    MOVB    fgbgColour, giga_sysArg1            
                    POP
                    RET


                    
clearVertBlinds     PUSH
                    CALLI   initClearFuncs
                    MOVQW   top, giga_vram >> 8
                    MOVQB   clsLines, giga_yres/2
                    
clearVB_loopy       MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    MOVB    top, giga_sysArg3                   
                    SYS     54                                  
    
                    MOVQB   giga_sysArg0, giga_xres
                    MOVQB   giga_sysArg2, 0                     
                    LDI     giga_yres - 1 + 16
                    SUBW    top
                    ST      giga_sysArg3                        
                    SYS     54                                  
                    INC     top                                 
                    DBNE    clsLines, clearVB_loopy
                    POP
                    RET


drawRectF           LDWI    SYS_SetMemory_v2_54
                    STW     giga_sysFn
                    LD      drawRectF_y2
                    SUBW    drawRectF_y1
                    STW     drawRectF_ycnt                      
                    BGE     drawRFY_cont
                    MOVB    drawRectF_y2, drawRectF_y1
                    NEGW    drawRectF_ycnt                      
                    
drawRFY_cont        ADDBI   drawRectF_y1, 8                     
                    INC     drawRectF_ycnt                      
                    LD      drawRectF_x2
                    SUBW    drawRectF_x1
                    BGE     drawRFX_cont                        
                    MOVB    drawRectF_x2, drawRectF_x1          
                    NEGW    giga_vAC                            
                    
drawRFX_cont        ADDI    1                                   
                    ST      drawRectF_xcnt
                    MOVB    fgbgColour + 1, giga_sysArg1        
                    MOVB    drawRectF_y1, giga_sysArg3          
                    
drawRF_loop         MOVB    drawRectF_xcnt, giga_sysArg0        
                    MOVB    drawRectF_x1, giga_sysArg2          
                    SYS     54                                  
                    INC     giga_sysArg3
                    DBNE    drawRectF_ycnt, drawRF_loop
                    RET


midiId              EQU     register0
audioAddr           EQU     register1
waveType            EQU     register2
chnCount            EQU     register3
midiNote            EQU     register4                           
midiCommand         EQU     register5
midiPtr             EQU     register6
sndChannel          EQU     register8
sndFrequency        EQU     register9
sndVolume           EQU     register10
sndWaveType         EQU     register11
musicStream         EQU     register8
musicNote           EQU     register9
musicCommand        EQU     register10
musicPtr            EQU     register11


soundOnV            LSRB    sndFrequency                        
                    LDW     sndFrequency                        
                    FREQA   sndChannel + 1                      
                    LD      sndVolume
                    VOLA    sndChannel + 1
                    LD      sndWaveType
                    MODA    sndChannel + 1
                    RET

