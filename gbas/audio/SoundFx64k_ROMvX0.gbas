_runtimePath_ "../runtime"
_runtimeStart_ &hFFFF
_arraysStart_ &hFFFF
_codeRomType_ ROMvX0
_enable6BitAudioEmu_ ON 'experimental

const SMP_A = &h8000
const SMP_N = 64
const SMP_H = 64
const OSC_X = 11
const OSC_Y = (120 - 64)/2 + 4
const OSC_A = &h0800 + OSC_Y*256 + OSC_X

const VU_X = 76
const VU_Y = 16
const VU_H = 64

const OFFSCREEN=&h78A0

'alloc offscreen scrolling areas, (<address>, <optional width>, <optional height>, <optional offset>)
alloc OFFSCREEN, 96, 8, &h0100

samplesAddr = SMP_A
def byte(SMP_A,        0, 1, SMP_N) = 0 'buffer A
def byte(SMP_A + &h40, 0, 1, SMP_N) = 0 'buffer B

def byte(&h0702, x, 0.0, 360.0, 64, 4) = sin(x)*31.0 + 32.0

'frequency sweep
const F_LUT=&h0500
def word(F_LUT, y, 0.0, 360.0, 256) = sin(y)*2000.0 + 5000.0

'volume sweep
const V_LUT=&h08A0
const V_SIZ=64
def byte(V_LUT, y, 0.0, 360.0, V_SIZ) = 63.0 - (cos(y)*0.5 + 0.5)*55.0

'extinction function, (modelled in Desmos), used to control attack and decay for crash sound
'don't use variable names that clash with functions, i.e. 'x' and 'exp'
const D_LUT=&h09A0
const D_SIZ=64
def byte(D_LUT, y, 0.0, 0.5, D_SIZ) = 63.0 - exp(-y)*(1.0-exp(-2.0*y))*2.5*58.0

const T_LUT=&h09E0
const T_SIZ=8
def byte(T_LUT, y, 0.0, 3.0, T_SIZ) = 63.0 - 1.398*exp(-y)*(1.0-exp(-10.0*y))*63.0

_blitStripeChunks_ 32, &h0400, &h7FFF, ascending
load blit, ../../res/image/VUerase.tga, 0
load blit, ../../res/image/VUdraw.tga, 1, FlipY

'define vars without intitialisation, (initialised in initialise)
def t, f, v, a0, a1, count, scrollPos, scrollTmp

gosub initialise

'dim volume%(4) = 126
'dim ypos%(4) = 1
vol1 = 126 : vol2 = vol1 : vol3 = vol2 : vol4 = vol3
ypos1 = 1 : ypos2 = ypos1 : ypos3 = ypos2 : ypos4 = ypos3

kk = 255
state = 0

load raw, ../../res/audio/raw/robots1.raw,  RobotAddr, RobotSize ': print "Robots:  ";"0x";HEX$(RobotAddr, 4);" ";RobotSize
load raw, ../../res/audio/raw/curly1.raw,   CurlyAddr, CurlySize ': print "Curly:   ";"0x";HEX$(CurlyAddr, 4);" ";CurlySize
load raw, ../../res/audio/raw/ahooga1.raw,  AhoogAddr, AhoogSize ': print "Ahooga:  ";"0x";HEX$(AhoogAddr, 4);" ";AhoogSize
load raw, ../../res/audio/raw/rooster1.raw, RoostAddr, RoostSize ': print "Rooster: ";"0x";HEX$(RoostAddr, 4);" ";RoostSize
load raw, ../../res/audio/raw/boing1.raw,   BoingAddr, BoingSize ': print "Boing:   ";"0x";HEX$(BoingAddr, 4);" ";BoingSize

load midi, ../../res/audio/midi/freedom.gtmid, 0
init textScroll, midiv
sound off

loop:
    'wait
    set SOUND_TIMER, 5

    gosub oscilloscope
    gosub vuMeter
    
    k = get("SERIAL_RAW")
    if kk = 255 then gosub k
    gosub state
    kk = k
goto loop


vuMeter:
    chanAddr = &h01FA : freqAddr = &h01FC
    vol = vol1 : y = ypos1
    call vuDisplay, chanAddr, freqAddr, VU_X + 16
    vol1 = vol : ypos1 = y

    inc chanAddr.hi : inc freqAddr.hi
    vol = vol2 : y = ypos2
    call vuDisplay, chanAddr, freqAddr, VU_X + 32
    vol2 = vol : ypos2 = y
    
    inc chanAddr.hi : inc freqAddr.hi
    vol = vol3 : y = ypos3
    call vuDisplay, chanAddr, freqAddr, VU_X + 48
    vol3 = vol : ypos3 = y
    
    inc chanAddr.hi : inc freqAddr.hi
    vol = vol4 : y = ypos4
    call vuDisplay, chanAddr, freqAddr, VU_X + 64
    vol4 = vol : ypos4 = y
return

proc vuDisplay, volAddr, freqAddr, vuX
local v
    v = peek(volAddr)
    if v >= VU_H
        if deek(freqAddr) = 0 then goto decay 'if frequency is 0, (i.e. note off), then decay
        if v < vol
            y = ((VU_H-1) - (v - VU_H)) LSR 1 'transform 127->64 to 0->63
            vol = v
        else
decay:
            dec y
            inc vol
            if y < 1
                inc y
                vol = 126
            endif
        endif
        
        'erase led
        blit noFlip, 0, vuX, (VU_Y + 64) - (y + 1)
        
        'adjust height of led bar
        lut = (y LSL 2) + y + y + get("BLIT_LUT", 1)
        save = peek(lut)
        poke lut, -1
        blit flipY, 1, vuX, VU_Y + 32
        blit flipY, 1, vuX + 6, VU_Y + 32
        poke lut, save
    endif
endproc


oscilloscope:
    addrA = samplesAddr
    
    'sample a representation of the waveform, (using ROMvX0 instructions)
'    asm
'        MOVQB   _count, 0x40
'cro:    LD      0x13
'        POKEV+  _addrA
'        DBNE    _count, _cro
'    endasm

    'erase waveform buffer B
    set FG_COLOUR, &h10
    sAddr = samplesAddr XOR &h40
    for i=SMP_N-1 &downto 0
        asm
            LD      0x13    'sample waveform
            POKEV+  _addrA  'save to buffer
            LDWI    _OSC_A
            OSCPX   _sAddr, _i
        endasm

        'pixelAddr = (((peek(sAddr + i)) AND &hFC) LSR 2) LSL 8
        'poke OSC_A + pixelAddr + i, &h10
    next i
    
    'draw waveform buffer A
    set FG_COLOUR, &h1D
    for i=SMP_N-1 &downto 0
        asm
            LDWI    _OSC_A
            OSCPX   _samplesAddr, _i
        endasm

        'pixelAddr = (((peek(samplesAddr + i)) AND &hFC) LSR 2) LSL 8
        'poke OSC_A + pixelAddr + i, &h1D
    next i
    
    'toggle waveform buffers
    samplesAddr = samplesAddr XOR &h40
return


proc printKey, key
    set FG_COLOUR, &h0F
    at 134, 2 : print "<";chr$(key);">";
endproc

midiOff:
    set MIDI_STREAM, &h0000
    sound off
    gosub resetWaves
return

1:  gosub siren
    return
    
2:  gosub crash
    return

3:  gosub beep
    return

4:  gosub tictoc
    return

5:  gosub pucDeath
    return

6:  gosub ghostMove
    return

7:  gosub invaderMove
    return

8:  gosub invaderShoot
    return
 
9:  gosub saucerMove
    return
    
10: gosub invaderExplode
    return    

11: gosub testSfx
    return

12: gosub saucerExplode
    return
    
13: gosub playerExplode
    return

14: gosub playSample
    return

99: gosub resetWaves
    if get("MIDI_STREAM") = &h0000
        play mididv, 0
    endif
    return


48: state = 99
    call printKey, k
    at 2, 112 : print "Muzak incoming..                    "
    return    
    
49: t = 0
    state = 1
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Dodgey Siren incoming..             "
    return

50: t = 0
    state = 2
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Crash Effect incoming..             "
    return
    
51: t = 0
    state = 3
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Ye Ole Beep incoming..              "
    return

52: t = 0
    state = 4
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Tick Tock..Tick Tock..              "
    return

53: t = 0
    state = 5 
    gosub midiOff
    call printKey, k
    at 2, 112 : print "PucMon has had a hard day..         "
    return
    
54: t = 0
    state = 6
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Ghosts on the Move..                "
    return

55: t = 0
    f = 0
    vv = 63
    state = 7
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Invaders incoming..                 "
    return

56: t = 0
    state = 8
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Shoot on sight!..                   "
    return

57: t = 0
    f = 0
    vv = 63
    state = 9
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Saucer on the Move..                "
    return

113:t = 0
    f = 0
    vv = 63
    state = 10
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Invader go Pooof..                  "
    return

119:t = 0
    f = 0
    vv = 63
    state = 11
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Test Fx..                           "
    return
  
101:t = 0
    f = 0
    vv = 60
    state = 12
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Saucer go Booom..                   "
    return

114:t = 0
    f = 0
    vv = 63
    state = 13
    gosub midiOff
    call printKey, k
    at 2, 112 : print "Player go Booom..                   "
    return

116:t = 0
    state = 14
    a = RobotAddr
    s = RobotSize
    gosub midiOff
    sound on, 1, 530, 64, 2
    sound on, 2, 530, 64, 2
    sound on, 3, 530, 64, 2
    sound on, 4, 530, 64, 2
    call printKey, k
    at 2, 112 : print "Destroy Him My Robots!..            "
    return

117:t = 0
    state = 14
    a = AhoogAddr
    s = AhoogSize
    gosub midiOff
    sound on, 1, 530, 64, 2
    sound on, 2, 530, 64, 2
    sound on, 3, 530, 64, 2
    sound on, 4, 530, 64, 2
    call printKey, k
    at 2, 112 : print "Ahroooghaaaa..                      "
    return

121:t = 0
    state = 14
    a = CurlyAddr
    s = CurlySize
    gosub midiOff
    sound on, 1, 530, 64, 2
    sound on, 2, 530, 64, 2
    sound on, 3, 530, 64, 2
    sound on, 4, 530, 64, 2
    call printKey, k
    at 2, 112 : print "Nyuk..Nyuk..Nyuk..                  "
    return
    
105:t = 0
    state = 14
    a = RoostAddr
    s = RoostSize
    gosub midiOff
    sound on, 1, 530, 64, 2
    sound on, 2, 530, 64, 2
    sound on, 3, 530, 64, 2
    sound on, 4, 530, 64, 2
    call printKey, k
    at 2, 112 : print "Wakey wakey..                       "
    return

111:t = 0
    state = 14
    a = BoingAddr
    s = BoingSize
    gosub midiOff
    sound on, 1, 530, 64, 2
    sound on, 2, 530, 64, 2
    sound on, 3, 530, 64, 2
    sound on, 4, 530, 64, 2
    call printKey, k
    at 2, 112 : print "Booooiiiinnnng..                    "
    return


siren:
    v_lut = peek(V_LUT + (t AND (V_SIZ - 1)))
    f_lut = deek(F_LUT + (t LSL 1))
    sound on, 1, f_lut    , v_lut, 2 
    sound on, 2, f_lut+100, v_lut, 2
    sound on, 3, f_lut+200, v_lut, 2
    sound on, 4, f_lut+300, v_lut, 2
    inc t
    if t = 64
        t = 0
        state = 0
        sound off
    endif
return

crash:
    d_lut = peek(D_LUT + (t AND (D_SIZ - 1)))
    f_lut = deek(F_LUT + ((t AND 1) LSL 1))
    sound on, 1, f_lut    , d_lut, 0
    sound on, 2, f_lut+100, d_lut, 0
    sound on, 3, f_lut+200, d_lut, 0
    sound on, 4, f_lut+300, d_lut, 0
    inc t
    if t = 64
        t = 0
        state = 0
        sound off
    endif
return

beep:
    sound on, 1, 8000, 63, 1
    inc t
    if t = 3
        t = 0
        state = 0
        sound off
    endif
return

tictoc:
    t_lut = peek(T_LUT + (t AND (T_SIZ - 1)))
    sound on, 1, t_lut LSL 4, t_lut, 0

    inc t
    if t = T_SIZ-2
        t = 0
        state = 0
        sound off
    endif
return


dim pnotes%(15) = 74, 72, 71, 69, 67, 65, 64, 62, 60, 62, 64, 65, 67, 69, 71, 72
def byte(&h0701, x, 0.0, 1.0, 64, 4) = sin(pow(x + 1.8, 3.13)*57.2957795)*31.0 + 32.0
'def byte(&h0701, y, 0.0, 1.0, 64, 4) = (sin(pow(y + 1.8, 3.13)*57.2957795)*exp(-1.5*y)*1.2)*31.0 + 32.0
'def byte(&h0701, y, 0.0, 1.0, 64, 4) = sin(pow(y + 1.8, 3.13)*57.2957795)*(1-y)*31.0 + 32.0
pucDeath:
    n = get("MIDI_NOTE", peek(@pnotes + (t AND 15)))
    sound on, 1, n - f, 63 - (t LSR 2), 1
    inc t
    if (t AND 7) = 0
        f = f + 200
    endif
    if t = 128
        t = 0
        f = 0
        state = 0
        sound off
    endif
return

dim gnotes%(15) = 60, 62, 64, 65, 67, 69, 71, 72, 74, 72, 71, 69, 67, 65, 64, 62
ghostMove:
    n = get("MIDI_NOTE", peek(@gnotes + (t AND 15)) + 10)
    sound on, 1, n, 63, 2
    inc t
    if t = 128
        t = 0
        state = 0
        sound off
    endif
return

'overwrite waveform 0 in audio memory, (invader move)
'load wave, ../../res/audio/Invader/IMove.gtwav, &h0702, 4
dim inotes%(3) = 40, 38, 36, 34
vv = 0
invaderMove:
    n = get("MIDI_NOTE", peek(@inotes + (f AND 3)))    
    sound on, 0, n, vv, 3
    sound on, 1, n, vv, 3
    'sound on, 2, n, vv, 3
    'sound on, 3, n, vv, 3
    inc t
    if t = 25
        t = 0
        vv = 63
        inc f
        if f = 4
            f = 0
            state = 0
            sound off
        endif
    elseif t = 4
        vv = 0
    endif
return

const I_LUT=&h6EA0
const IF_LUT=&h6DA0
const I_SIZ=32
'def word(I_LUT, y, 0.0, 1.0, I_SIZ) = (10.0*exp(-15.0*y)*(1.0-exp(-9.75*(y-0.015)))*0.343 + 0.25)*25000.0
def byte(I_LUT, y, 0.0, 1.0, I_SIZ) = exp(-5.0*pow(y, 3.0))*32.0
'def byte(I_LUT, y, 0.0, 10.0, I_SIZ) = exp(-0.2*y)*(sin(15.0*y/6.28*360.0)*0.25 + 0.75)*32.0
def word(IF_LUT, y, 0.0, 1.0, I_SIZ) = exp(-3.0*y)*6000.0 + 14000.0
invaderShootOld:
    ff = max(25000 - f, 13000)
    sound on, 1, ff, vv, 2
    'sound on, 1, deek(I_LUT + (t AND 31)), vv, 2
    inc t
    vv = vv - 2
    if vv <= 0
        t = 0
        vv = 63
        state = 0
        sound off
    endif
return

invaderShoot:
    ff = deek(IF_LUT + ((t AND 31) LSL 1))
    vvv = peek(I_LUT + (t AND 31))
    sound on, 1, ff, vvv, 3
    sound on, 2, ff, vvv, 0
    inc t
    if t = 32
        t = 0
        state = 0
        sound off
    endif
return

const SF_LUT=&h6CA0
const SF_SIZ=12
'def word(SF_LUT, y, 0.0, 360.0, SF_SIZ) = (sin(y)*0.5 + 0.5) * 5000.0
'def word(SF_LUT, y, 0.5, 1.5, SF_SIZ) = sin(exp(-pow(4.0*y - 4.0, 2.0))/6.28*360) * 5000.0
'def word(SF_LUT, y, 0.0, 180.0, SF_SIZ) = sin(y) * sin(y) * 2121.0 + 2121.0
def word(SF_LUT, y, 0.0, SF_SIZ, SF_SIZ) = (y % (SF_SIZ/2)) * 300.0 + 3000.0
'def word(SF_LUT, y, 0.0, 360, SF_SIZ) = (asin(cos(y))/90.0*0.5 + 0.5) * 300.0 + 3000.0
'def byte(&h0702, x, 0.0, 360.0, 64, 4) = sin(x)*31.0 + 32.0
saucerMove:
    ff = deek(SF_LUT + (t LSL 1))
    sound on, 1, ff, 32, 2
    inc t
    if t = SF_SIZ
        t = 0
    endif
return

const IE_LUT=&h6BA0
const IE_SIZ=3
'def word(IE_LUT, y, 0.0, 1.0, IE_SIZ) = exp(-3.0*y)*5000.0
'def word(IE_LUT, y, 0.0, 720.0, IE_SIZ) = sin(y) * sin(y) * 1000.0 + 500
'def word(IE_LUT, y, 0.0, 360, IE_SIZ) = (asin(cos(y))/90.0*0.5 + 0.5) * 3000.0 + 3000.0
def word(IE_LUT, y, 0.0, IE_SIZ, IE_SIZ) = 6000.0*(1 - exp(-0.5*y))
'def byte(&h0702, x, 0.0, 720.0, 64, 4) = sin(x)*31.0 + 32.0
invaderExplode:
    sound on, 1, deek(IE_LUT + (t LSL 1)), vv, 2
    inc t
    if t = IE_SIZ then t = 0
    vv = vv - 2
    if vv <= 0
        t = 0
        vv = 60
        state = 0
        sound off
    endif
return

testSfx:
    ff = ff - 16384
    ff = 16384 - (vv LSL 8) + f
    sound on, 1, ff, vv, 2
    inc t
    vv = vv - 8
    if vv <= 0
        t = 0
        vv = 63
        f = f + 1000
        if f = 4000
            f = 0
            state = 0
            sound off
        endif
    endif
return

const SEF_LUT=&h69A0
const SEF_SIZ=12
'def word(SEF_LUT, y, 0.0, 180.0, SEF_SIZ) = sin(y) * sin(y) * 2121.0 + 2121.0
def word(SEF_LUT, y, 0.0, SEF_SIZ, SEF_SIZ) = (y % (SEF_SIZ/2)) * 300.0 + 3000.0
saucerExplode:
    m = min(vv + 10, 63)
    ff = deek(SEF_LUT + (t LSL 1)) - f
    sound on, 1, ff, vv, 2
    sound on, 2, ff LSR 4, vv, 0
    inc t
    if t = SEF_SIZ
        t = 0
        f = f + 600
        vv = vv - 15
        if vv <= 0
            f = 0
            vv = 60
            state = 0
            sound off
        endif
    endif
return

const PEF_LUT=&h6AA0
const PEF_SIZ=32
'def word(PEF_LUT, y, 0.0, 180.0, PEF_SIZ) = sin(y) * sin(y) * 2121.0 + 2121.0
'def word(PEF_LUT, y, 0.0, PEF_SIZ, PEF_SIZ) = (y % (PEF_SIZ/2)) * 300.0 + 3000.0
'def word(PEF_LUT, y, 0.0, 360, PEF_SIZ) = (asin(cos(y))/90.0*0.5 + 0.5) * 300.0 + 300.0
'def word(PEF_LUT, y, 0.0, PEF_SIZ, PEF_SIZ) = 900.0*(exp(-1.125*y)) + 300.0
def word(PEF_LUT, 0.0, PEF_SIZ, PEF_SIZ) = rand(PEF_SIZ) / PEF_SIZ * 300.0
playerExplode:
    f = deek(PEF_LUT + (t LSL 1))
    sound on, 1, f, vv, 0
    sound on, 2, f, vv, 0
    sound on, 3, f, vv, 0
    sound on, 4, f, vv, 0
    inc t
    if t = PEF_SIZ then t = 0
    vv = vv - 1
    if vv <= 0
        t = 0
        vv = 60
        state = 0
        sound off
    endif
return

playSample:
    sampleAddr = &h0702
    i = 0 : j = i
    'repeat
    '    nibble = peek(a + j)
    '    poke &h0702 + i, (nibble AND &hF0) LSR 2
    '    poke &h0706 + i, (nibble AND &h0F) LSL 2
    '    inc j.lo
    'i = i + 8 : until i > 252
    asm
        LDW     _a
        SMPCPY  _sampleAddr
        STW     _a
    endasm
    t = t + 32
    if t > s-32
        t = 0
        state = 0
        sound off
    endif
return

resetWaves:
    'asm
    '    LDWI    SYS_ResetWaveforms_v4_50
    '    STW     giga_sysFn
    '    LDI     0
    '    SYS     50
    'endasm
return

textScroll:
    asm
        PUSH
        LDWI    &h01E1          'bottom banner
        STW     _scrollTmp
        LDW     _scrollPos
        POKE    _scrollTmp
        INC     _scrollPos
        POP
    endasm
ret

initialise:
    clear vars, @t

    mode 2
    set BG_COLOUR, &h30
    cls
    cls OFFSCREEN, 96, 8
    
    set FG_COLOUR, &h20
    rectf OSC_X - 3, OSC_Y - 3, OSC_X + SMP_N + 2, OSC_Y + SMP_H + 2
    rectf VU_X + 13, VU_Y + 66, VU_X + 78, VU_Y + 29
    set FG_COLOUR, &h10
    rectf VU_X + 16, VU_Y + 63, VU_X + 75, VU_Y + 32
    rectf OSC_X, OSC_Y, OSC_X + SMP_N - 1, OSC_Y + SMP_H - 1
    set FG_COLOUR, &h20
    rectf VU_X + 28, VU_Y + 66, VU_X + 31, VU_Y + 29
    rectf VU_X + 44, VU_Y + 66, VU_X + 47, VU_Y + 29
    rectf VU_X + 60, VU_Y + 66, VU_X + 63, VU_Y + 29
    
    set FG_COLOUR, &h3F
    at 33,2 : print "Keys: <1> to <0>"
    at 33 :   print "      <q> to <o>"
    tscroll off
    tclip off
    set FG_COLOUR, &h0F
    at 2, 112 : print "Hit a key, we don't have all day!.."
return